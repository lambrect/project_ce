
remote_standalone_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000094  00800100  00003068  000030fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003068  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000005ab  00800194  00800194  00003190  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003190  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000031ec  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00002120  00000000  00000000  0000322c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0004de27  00000000  00000000  0000534c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003cb6  00000000  00000000  00053173  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000ed76  00000000  00000000  00056e29  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000c41c  00000000  00000000  00065ba0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010d5f  00000000  00000000  00071fbc  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0005739f  00000000  00000000  00082d1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002940  00000000  00000000  000da0ba  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__ctors_end>
       4:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
       8:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
       c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      10:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      14:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      18:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      1c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      20:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      24:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      28:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      2c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      30:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      34:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      38:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      3c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      40:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      44:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      48:	0c 94 64 07 	jmp	0xec8	; 0xec8 <__vector_18>
      4c:	0c 94 46 07 	jmp	0xe8c	; 0xe8c <__vector_19>
      50:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      54:	0c 94 0c 07 	jmp	0xe18	; 0xe18 <__vector_21>
      58:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      5c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      60:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      64:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 02       	muls	r27, r31
      6a:	03 02       	muls	r16, r19
      6c:	03 03       	mulsu	r16, r19
      6e:	01 01       	movw	r0, r2
      70:	04 04       	cpc	r0, r4
      72:	06 00       	.word	0x0006	; ????
      74:	ff 05       	cpc	r31, r15
      76:	ff 05       	cpc	r31, r15
      78:	ff 01       	movw	r30, r30
      7a:	06 02       	muls	r16, r22
      7c:	09 06       	cpc	r0, r25
      7e:	24 20       	and	r2, r4
      80:	06 74       	andi	r16, 0x46	; 70
      82:	7c 36       	cpi	r23, 0x6C	; 108
      84:	00 21       	and	r16, r0
      86:	08 74       	andi	r16, 0x48	; 72
      88:	9c ac       	ldd	r9, Y+60	; 0x3c
      8a:	0e c4       	rjmp	.+2076   	; 0x8a8 <app_gui+0x64>
      8c:	00 22       	and	r0, r16
      8e:	07 74       	andi	r16, 0x47	; 71
      90:	8c a4       	ldd	r8, Y+44	; 0x2c
      92:	9d 06       	cpc	r9, r29
      94:	23 0b       	sbc	r18, r19
      96:	74 8c       	ldd	r7, Z+28	; 0x1c
      98:	24 19       	sub	r18, r4
      9a:	94 64       	ori	r25, 0x44	; 68
      9c:	50 52       	subi	r21, 0x20	; 32
      9e:	00 24       	eor	r0, r0
      a0:	09 74       	andi	r16, 0x49	; 73
      a2:	9c 68       	ori	r25, 0x8C	; 140
      a4:	11 93       	st	Z+, r17
      a6:	29 02       	muls	r18, r25
      a8:	25 08       	sbc	r2, r5
      aa:	74 8c       	ldd	r7, Z+28	; 0x1c
      ac:	34 aa       	std	Z+52, r3	; 0x34
      ae:	a6 00       	.word	0x00a6	; ????
      b0:	26 0a       	sbc	r2, r22
      b2:	74 9c       	mul	r7, r4
      b4:	28 89       	ldd	r18, Y+16	; 0x10
      b6:	2a 51       	subi	r18, 0x1A	; 26
      b8:	12 02       	muls	r17, r18
      ba:	27 07       	cpc	r18, r23
      bc:	74 9c       	mul	r7, r4
      be:	2c 27       	eor	r18, r28
      c0:	02 28       	or	r0, r2
      c2:	07 74       	andi	r16, 0x47	; 71
      c4:	ac 5a       	subi	r26, 0xAC	; 172
      c6:	63 02       	muls	r22, r19
      c8:	29 08       	sbc	r2, r9
      ca:	74 8c       	ldd	r7, Z+28	; 0x1c
      cc:	30 6b       	ori	r19, 0xB0	; 176
      ce:	ca 00       	.word	0x00ca	; ????
      d0:	2a 09       	sbc	r18, r10
      d2:	74 8c       	ldd	r7, Z+28	; 0x1c
      d4:	24 8a       	std	Z+20, r2	; 0x14
      d6:	a6 4a       	sbci	r26, 0xA6	; 166
      d8:	0a 2b       	or	r16, r26
      da:	08 74       	andi	r16, 0x48	; 72
      dc:	9c 2c       	mov	r9, r12
      de:	9a b2       	in	r9, 0x1a	; 26
      e0:	18 2c       	mov	r1, r8
      e2:	07 74       	andi	r16, 0x47	; 71
      e4:	7c 5a       	subi	r23, 0xAC	; 172
      e6:	94 01       	movw	r18, r8
      e8:	2d 07       	cpc	r18, r29
      ea:	74 7c       	andi	r23, 0xC4	; 196
      ec:	64 87       	std	Z+12, r22	; 0x0c
      ee:	01 2e       	mov	r0, r17
      f0:	06 74       	andi	r16, 0x46	; 70
      f2:	7c 5a       	subi	r23, 0xAC	; 172
      f4:	0c 2f       	mov	r16, r28
      f6:	08 74       	andi	r16, 0x48	; 72
      f8:	ac 2c       	mov	r10, r12
      fa:	aa e5       	ldi	r26, 0x5A	; 90
      fc:	00 30       	cpi	r16, 0x00	; 0
      fe:	09 74       	andi	r16, 0x49	; 73
     100:	9c 28       	or	r9, r12
     102:	49 96       	adiw	r24, 0x19	; 25
     104:	52 0c       	add	r5, r2
     106:	31 08       	sbc	r3, r1
     108:	74 9c       	mul	r7, r4
     10a:	48 2b       	or	r20, r24
     10c:	ad 00       	.word	0x00ad	; ????
     10e:	32 09       	sbc	r19, r2
     110:	74 9c       	mul	r7, r4
     112:	28 c9       	rjmp	.-3504   	; 0xfffff364 <__eeprom_end+0xff7ef364>
     114:	a2 68       	ori	r26, 0x82	; 130
     116:	05 33       	cpi	r16, 0x35	; 53
     118:	08 74       	andi	r16, 0x48	; 72
     11a:	8c 2d       	mov	r24, r12
     11c:	0a 13       	cpse	r16, r26
     11e:	19 34       	cpi	r17, 0x49	; 73
     120:	08 74       	andi	r16, 0x48	; 72
     122:	8c a4       	ldd	r8, Y+44	; 0x2c
     124:	65 ab       	std	Z+53, r22	; 0x35
     126:	02 35       	cpi	r16, 0x52	; 82
     128:	08 74       	andi	r16, 0x48	; 72
     12a:	8c 25       	eor	r24, r12
     12c:	13 13       	cpse	r17, r19
     12e:	19 36       	cpi	r17, 0x69	; 105
     130:	09 74       	andi	r16, 0x49	; 73
     132:	1c 25       	eor	r17, r12
     134:	93 92       	.word	0x9293	; ????
     136:	28 06       	cpc	r2, r24
     138:	37 08       	sbc	r3, r7
     13a:	74 8c       	ldd	r7, Z+28	; 0x1c
     13c:	2d aa       	std	Y+53, r2	; 0x35
     13e:	e5 00       	.word	0x00e5	; ????
     140:	38 09       	sbc	r19, r8
     142:	74 1c       	adc	r7, r4
     144:	a5 54       	subi	r26, 0x45	; 69
     146:	49 64       	ori	r20, 0x49	; 73
     148:	00 39       	cpi	r16, 0x90	; 144
     14a:	09 74       	andi	r16, 0x49	; 73
     14c:	9c 28       	or	r9, r12
     14e:	89 b4       	in	r8, 0x29	; 41
     150:	44 06       	cpc	r4, r20
     152:	3a 07       	cpc	r19, r26
     154:	74 dc       	rcall	.-1816   	; 0xfffffa3e <__eeprom_end+0xff7efa3e>
     156:	1c 8c       	ldd	r1, Y+28	; 0x1c
     158:	01 3b       	cpi	r16, 0xB1	; 177
     15a:	08 74       	andi	r16, 0x48	; 72
     15c:	dc 1c       	adc	r13, r12
     15e:	8c 32       	cpi	r24, 0x2C	; 44
     160:	00 3c       	cpi	r16, 0xC0	; 192
     162:	07 74       	andi	r16, 0x47	; 71
     164:	ac c6       	rjmp	.+3416   	; 0xebe <USART0_TX_EXIT>
     166:	2a 00       	.word	0x002a	; ????
     168:	3d 07       	cpc	r19, r29
     16a:	74 cc       	rjmp	.-1816   	; 0xfffffa54 <__eeprom_end+0xff7efa54>
     16c:	75 87       	std	Z+13, r23	; 0x0d
     16e:	00 3e       	cpi	r16, 0xE0	; 224
     170:	07 74       	andi	r16, 0x47	; 71
     172:	8c b0       	in	r8, 0x0c	; 12
     174:	54 07       	cpc	r21, r20
     176:	3f 08       	sbc	r3, r15
     178:	74 0c       	add	r7, r4
     17a:	31 ca       	rjmp	.-2974   	; 0xfffff5de <__eeprom_end+0xff7ef5de>
     17c:	81 18       	sub	r8, r1
     17e:	40 07       	cpc	r20, r16
     180:	74 1c       	adc	r7, r4
     182:	a5 47       	sbci	r26, 0x75	; 117
     184:	15 41       	sbci	r17, 0x15	; 21
     186:	09 74       	andi	r16, 0x49	; 73
     188:	9c 28       	or	r9, r12
     18a:	49 96       	adiw	r24, 0x19	; 25
     18c:	ae 00       	.word	0x00ae	; ????
     18e:	42 0a       	sbc	r4, r18
     190:	74 0c       	add	r7, r4
     192:	29 49       	sbci	r18, 0x99	; 153
     194:	a4 24       	eor	r10, r4
     196:	91 01       	movw	r18, r2
     198:	43 09       	sbc	r20, r3
     19a:	74 9c       	mul	r7, r4
     19c:	28 a9       	ldd	r18, Y+48	; 0x30
     19e:	25 51       	subi	r18, 0x15	; 21
     1a0:	0c 44       	sbci	r16, 0x4C	; 76
     1a2:	08 74       	andi	r16, 0x48	; 72
     1a4:	0c 29       	or	r16, r12
     1a6:	e9 45       	sbci	r30, 0x59	; 89
     1a8:	06 45       	sbci	r16, 0x56	; 86
     1aa:	08 74       	andi	r16, 0x48	; 72
     1ac:	8c 25       	eor	r24, r12
     1ae:	93 b2       	in	r9, 0x13	; 19
     1b0:	15 46       	sbci	r17, 0x65	; 101
     1b2:	08 74       	andi	r16, 0x48	; 72
     1b4:	8c 25       	eor	r24, r12
     1b6:	93 b2       	in	r9, 0x13	; 19
     1b8:	1c 47       	sbci	r17, 0x7C	; 124
     1ba:	09 74       	andi	r16, 0x49	; 73
     1bc:	1c 25       	eor	r17, r12
     1be:	4b 9a       	sbi	0x09, 3	; 9
     1c0:	54 00       	.word	0x0054	; ????
     1c2:	48 08       	sbc	r4, r8
     1c4:	74 8c       	ldd	r7, Z+28	; 0x1c
     1c6:	a4 65       	ori	r26, 0x54	; 84
     1c8:	e9 0a       	sbc	r14, r25
     1ca:	49 08       	sbc	r4, r9
     1cc:	74 8c       	ldd	r7, Z+28	; 0x1c
     1ce:	29 2b       	or	r18, r25
     1d0:	ad 00       	.word	0x00ad	; ????
     1d2:	4a 08       	sbc	r4, r10
     1d4:	74 ac       	ldd	r7, Z+60	; 0x3c
     1d6:	ac 52       	subi	r26, 0x2C	; 44
     1d8:	8a 01       	movw	r16, r20
     1da:	4b 09       	sbc	r20, r11
     1dc:	74 8c       	ldd	r7, Z+28	; 0x1c
     1de:	a4 45       	sbci	r26, 0x54	; 84
     1e0:	4a 5a       	subi	r20, 0xAA	; 170
     1e2:	01 4c       	sbci	r16, 0xC1	; 193
     1e4:	07 74       	andi	r16, 0x47	; 71
     1e6:	8c ac       	ldd	r8, Y+60	; 0x3c
     1e8:	6d 05       	cpc	r22, r13
     1ea:	4d 08       	sbc	r4, r13
     1ec:	74 8c       	ldd	r7, Z+28	; 0x1c
     1ee:	24 b9       	out	0x04, r18	; 4
     1f0:	74 05       	cpc	r23, r4
     1f2:	4e 08       	sbc	r4, r14
     1f4:	74 ac       	ldd	r7, Z+60	; 0x3c
     1f6:	a4 b2       	in	r10, 0x14	; 20
     1f8:	b4 03       	fmuls	r19, r20
     1fa:	4f 08       	sbc	r4, r15
     1fc:	74 9c       	mul	r7, r4
     1fe:	28 e9       	ldi	r18, 0x98	; 152
     200:	29 06       	cpc	r2, r25
     202:	50 09       	sbc	r21, r0
     204:	74 0c       	add	r7, r4
     206:	29 49       	sbci	r18, 0x99	; 153
     208:	a4 2c       	mov	r10, r4
     20a:	07 51       	subi	r16, 0x17	; 23
     20c:	09 74       	andi	r16, 0x49	; 73
     20e:	9c 28       	or	r9, r12
     210:	e9 29       	or	r30, r9
     212:	4c 00       	.word	0x004c	; ????
     214:	52 09       	sbc	r21, r2
     216:	74 0c       	add	r7, r4
     218:	29 49       	sbci	r18, 0x99	; 153
     21a:	a4 a4       	ldd	r10, Z+44	; 0x2c
     21c:	15 53       	subi	r17, 0x35	; 53
     21e:	08 74       	andi	r16, 0x48	; 72
     220:	1c 25       	eor	r17, r12
     222:	ac c8       	rjmp	.-3752   	; 0xfffff37c <__eeprom_end+0xff7ef37c>
     224:	00 54       	subi	r16, 0x40	; 64
     226:	07 74       	andi	r16, 0x47	; 71
     228:	8c 29       	or	r24, r12
     22a:	6b 06       	cpc	r6, r27
     22c:	55 08       	sbc	r5, r5
     22e:	74 8c       	ldd	r7, Z+28	; 0x1c
     230:	a4 5f       	subi	r26, 0xF4	; 244
     232:	56 00       	.word	0x0056	; ????
     234:	56 08       	sbc	r5, r6
     236:	74 8c       	ldd	r7, Z+28	; 0x1c
     238:	a4 97       	sbiw	r28, 0x24	; 36
     23a:	29 06       	cpc	r2, r25
     23c:	57 08       	sbc	r5, r7
     23e:	74 8c       	ldd	r7, Z+28	; 0x1c
     240:	a4 e5       	ldi	r26, 0x54	; 84
     242:	52 05       	cpc	r21, r2
     244:	58 08       	sbc	r5, r8
     246:	74 8c       	ldd	r7, Z+28	; 0x1c
     248:	a4 a9       	ldd	r26, Z+52	; 0x34
     24a:	d2 0a       	sbc	r13, r18
     24c:	59 08       	sbc	r5, r9
     24e:	74 8c       	ldd	r7, Z+28	; 0x1c
     250:	a4 29       	or	r26, r4
     252:	2b 03       	fmul	r18, r19
     254:	5a 08       	sbc	r5, r10
     256:	74 8c       	ldd	r7, Z+28	; 0x1c
     258:	2d aa       	std	Y+53, r2	; 0x35
     25a:	ad 00       	.word	0x00ad	; ????
     25c:	5b 08       	sbc	r5, r11
     25e:	74 1c       	adc	r7, r4
     260:	29 ab       	std	Y+49, r18	; 0x31
     262:	a9 00       	.word	0x00a9	; ????
     264:	5c 08       	sbc	r5, r12
     266:	74 8c       	ldd	r7, Z+28	; 0x1c
     268:	2c ac       	ldd	r2, Y+60	; 0x3c
     26a:	a5 00       	.word	0x00a5	; ????
     26c:	5d 07       	cpc	r21, r29
     26e:	74 0c       	add	r7, r4
     270:	ad 49       	sbci	r26, 0x9D	; 157
     272:	06 5e       	subi	r16, 0xE6	; 230
     274:	08 74       	andi	r16, 0x48	; 72
     276:	9c 28       	or	r9, r12
     278:	c9 69       	ori	r28, 0x99	; 153
     27a:	00 5f       	subi	r16, 0xF0	; 240
     27c:	06 74       	andi	r16, 0x46	; 70
     27e:	7c f2       	brlt	.-98     	; 0x21e <__trampolines_end+0x1b6>
     280:	02 60       	ori	r16, 0x02	; 2
     282:	07 74       	andi	r16, 0x47	; 71
     284:	9c 30       	cpi	r25, 0x0C	; 12
     286:	a7 01       	movw	r20, r14
     288:	61 07       	cpc	r22, r17
     28a:	74 5c       	subi	r23, 0xC4	; 196
     28c:	a5 93       	las	Z, r26
     28e:	0a 62       	ori	r16, 0x2A	; 42
     290:	09 74       	andi	r16, 0x49	; 73
     292:	8c 4c       	sbci	r24, 0xCC	; 204
     294:	4a 5a       	subi	r20, 0xAA	; 170
     296:	64 00       	.word	0x0064	; ????
     298:	63 08       	sbc	r6, r3
     29a:	74 5c       	subi	r23, 0xC4	; 196
     29c:	25 0b       	sbc	r18, r21
     29e:	55 00       	.word	0x0055	; ????
     2a0:	64 08       	sbc	r6, r4
     2a2:	74 ac       	ldd	r7, Z+60	; 0x3c
     2a4:	48 e9       	ldi	r20, 0x98	; 152
     2a6:	a4 02       	muls	r26, r20
     2a8:	65 08       	sbc	r6, r5
     2aa:	74 dc       	rcall	.-1816   	; 0xfffffb94 <__eeprom_end+0xff7efb94>
     2ac:	28 49       	sbci	r18, 0x98	; 152
     2ae:	34 15       	cp	r19, r4
     2b0:	66 08       	sbc	r6, r6
     2b2:	74 ac       	ldd	r7, Z+60	; 0x3c
     2b4:	d2 94       	swap	r13
     2b6:	c5 00       	.word	0x00c5	; ????
     2b8:	67 09       	sbc	r22, r7
     2ba:	74 5c       	subi	r23, 0xC4	; 196
     2bc:	a5 a4       	ldd	r10, Z+45	; 0x2d
     2be:	25 12       	cpse	r2, r21
     2c0:	00 68       	ori	r16, 0x80	; 128
     2c2:	08 74       	andi	r16, 0x48	; 72
     2c4:	8c 4c       	sbci	r24, 0xCC	; 204
     2c6:	4a 7a       	andi	r20, 0xAA	; 170
     2c8:	05 69       	ori	r16, 0x95	; 149
     2ca:	08 74       	andi	r16, 0x48	; 72
     2cc:	9c 58       	subi	r25, 0x8C	; 140
     2ce:	8b 56       	subi	r24, 0x6B	; 107
     2d0:	00 6a       	ori	r16, 0xA0	; 160
     2d2:	09 74       	andi	r16, 0x49	; 73
     2d4:	ac 1c       	adc	r10, r12
     2d6:	c8 2a       	or	r12, r24
     2d8:	12 00       	.word	0x0012	; ????
     2da:	6b 09       	sbc	r22, r11
     2dc:	74 8c       	ldd	r7, Z+28	; 0x1c
     2de:	2c 49       	sbci	r18, 0x9C	; 156
     2e0:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2e2:	15 6c       	ori	r17, 0xC5	; 197
     2e4:	07 74       	andi	r16, 0x47	; 71
     2e6:	0c ad       	ldd	r16, Y+60	; 0x3c
     2e8:	69 05       	cpc	r22, r9
     2ea:	6d 08       	sbc	r6, r13
     2ec:	74 cc       	rjmp	.-1816   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     2ee:	24 59       	subi	r18, 0x94	; 148
     2f0:	ba 02       	muls	r27, r26
     2f2:	6e 07       	cpc	r22, r30
     2f4:	74 4c       	sbci	r23, 0xC4	; 196
     2f6:	29 e9       	ldi	r18, 0x99	; 153
     2f8:	15 6f       	ori	r17, 0xF5	; 245
     2fa:	08 74       	andi	r16, 0x48	; 72
     2fc:	dc 28       	or	r13, r12
     2fe:	69 8a       	std	Y+17, r6	; 0x11
     300:	01 70       	andi	r16, 0x01	; 1
     302:	09 74       	andi	r16, 0x49	; 73
     304:	4c 29       	or	r20, r12
     306:	49 a4       	ldd	r4, Y+41	; 0x29
     308:	2c 03       	fmul	r18, r20
     30a:	71 08       	sbc	r7, r1
     30c:	74 5c       	subi	r23, 0xC4	; 196
     30e:	a5 93       	las	Z, r26
     310:	96 00       	.word	0x0096	; ????
     312:	72 08       	sbc	r7, r2
     314:	74 cc       	rjmp	.-1816   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
     316:	24 91       	lpm	r18, Z
     318:	b2 1c       	adc	r11, r2
     31a:	73 08       	sbc	r7, r3
     31c:	74 5c       	subi	r23, 0xC4	; 196
     31e:	45 4c       	sbci	r20, 0xC5	; 197
     320:	64 00       	.word	0x0064	; ????
     322:	74 08       	sbc	r7, r4
     324:	74 9c       	mul	r7, r4
     326:	68 ca       	rjmp	.-2864   	; 0xfffff7f8 <__eeprom_end+0xff7ef7f8>
     328:	c2 14       	cp	r12, r2
     32a:	75 07       	cpc	r23, r21
     32c:	74 cc       	rjmp	.-1816   	; 0xfffffc16 <__eeprom_end+0xff7efc16>
     32e:	a4 27       	eor	r26, r20
     330:	15 76       	andi	r17, 0x65	; 101
     332:	07 74       	andi	r16, 0x47	; 71
     334:	cc a4       	ldd	r12, Y+44	; 0x2c
     336:	a7 18       	sub	r10, r7
     338:	77 08       	sbc	r7, r7
     33a:	74 cc       	rjmp	.-1816   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     33c:	a4 65       	ori	r26, 0x54	; 84
     33e:	a9 02       	muls	r26, r25
     340:	78 09       	sbc	r23, r8
     342:	74 cc       	rjmp	.-1816   	; 0xfffffc2c <__eeprom_end+0xff7efc2c>
     344:	24 ca       	rjmp	.-3000   	; 0xfffff78e <__eeprom_end+0xff7ef78e>
     346:	a2 24       	eor	r10, r2
     348:	05 79       	andi	r16, 0x95	; 149
     34a:	09 74       	andi	r16, 0x49	; 73
     34c:	cc a4       	ldd	r12, Y+44	; 0x2c
     34e:	49 4b       	sbci	r20, 0xB9	; 185
     350:	24 00       	.word	0x0024	; ????
     352:	7a 08       	sbc	r7, r10
     354:	74 cc       	rjmp	.-1816   	; 0xfffffc3e <__eeprom_end+0xff7efc3e>
     356:	2d 8a       	std	Y+21, r2	; 0x15
     358:	56 00       	.word	0x0056	; ????
     35a:	7b 08       	sbc	r7, r11
     35c:	74 ac       	ldd	r7, Z+60	; 0x3c
     35e:	92 56       	subi	r25, 0x62	; 98
     360:	4c 00       	.word	0x004c	; ????
     362:	7c 07       	cpc	r23, r28
     364:	74 9c       	mul	r7, r4
     366:	ac 33       	cpi	r26, 0x3C	; 60
     368:	00 7d       	andi	r16, 0xD0	; 208
     36a:	09 74       	andi	r16, 0x49	; 73
     36c:	8c 30       	cpi	r24, 0x0C	; 12
     36e:	93 b2       	in	r9, 0x13	; 19
     370:	28 03       	fmul	r18, r16
     372:	7e 08       	sbc	r7, r14
     374:	74 9c       	mul	r7, r4
     376:	44 c9       	rjmp	.-3448   	; 0xfffff600 <__eeprom_end+0xff7ef600>
     378:	69 00       	.word	0x0069	; ????
     37a:	a0 06       	cpc	r10, r16
     37c:	74 7c       	andi	r23, 0xC4	; 196
     37e:	36 00       	.word	0x0036	; ????
     380:	a1 08       	sbc	r10, r1
     382:	74 9c       	mul	r7, r4
     384:	1c c8       	rjmp	.-4040   	; 0xfffff3be <__eeprom_end+0xff7ef3be>
     386:	ca 00       	.word	0x00ca	; ????
     388:	a2 08       	sbc	r10, r2
     38a:	74 9c       	mul	r7, r4
     38c:	68 c9       	rjmp	.-3376   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     38e:	a6 18       	sub	r10, r6
     390:	a3 08       	sbc	r10, r3
     392:	74 ac       	ldd	r7, Z+60	; 0x3c
     394:	9a 54       	subi	r25, 0x4A	; 74
     396:	49 01       	movw	r8, r18
     398:	a4 09       	sbc	r26, r4
     39a:	74 cc       	rjmp	.-1816   	; 0xfffffc84 <__eeprom_end+0xff7efc84>
     39c:	28 91       	.word	0x9128	; ????
     39e:	94 28       	or	r9, r4
     3a0:	04 a5       	ldd	r16, Z+44	; 0x2c
     3a2:	09 74       	andi	r16, 0x49	; 73
     3a4:	8c 24       	eor	r8, r12
     3a6:	8a a6       	std	Y+42, r8	; 0x2a
     3a8:	2c 06       	cpc	r2, r28
     3aa:	a6 08       	sbc	r10, r6
     3ac:	74 9c       	mul	r7, r4
     3ae:	2c 07       	cpc	r18, r28
     3b0:	b2 18       	sub	r11, r2
     3b2:	a7 09       	sbc	r26, r7
     3b4:	74 1c       	adc	r7, r4
     3b6:	53 12       	cpse	r5, r19
     3b8:	69 89       	ldd	r22, Y+17	; 0x11
     3ba:	04 a8       	ldd	r0, Z+52	; 0x34
     3bc:	06 74       	andi	r16, 0x46	; 70
     3be:	8c 24       	eor	r8, r12
     3c0:	67 a9       	ldd	r22, Z+55	; 0x37
     3c2:	0a 74       	andi	r16, 0x4A	; 74
     3c4:	1c 25       	eor	r17, r12
     3c6:	5a 16       	cp	r5, r26
     3c8:	29 51       	subi	r18, 0x19	; 25
     3ca:	00 aa       	std	Z+48, r0	; 0x30
     3cc:	08 74       	andi	r16, 0x48	; 72
     3ce:	1c a5       	ldd	r17, Y+44	; 0x2c
     3d0:	a4 ae       	std	Z+60, r10	; 0x3c
     3d2:	00 ab       	std	Z+48, r16	; 0x30
     3d4:	09 74       	andi	r16, 0x49	; 73
     3d6:	dc 44       	sbci	r29, 0x4C	; 76
     3d8:	89 92       	st	Y+, r8
     3da:	1c 01       	movw	r2, r24
     3dc:	ac 08       	sbc	r10, r12
     3de:	74 7c       	andi	r23, 0xC4	; 196
     3e0:	64 cb       	rjmp	.-2360   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     3e2:	21 00       	.word	0x0021	; ????
     3e4:	ad 07       	cpc	r26, r29
     3e6:	74 7c       	andi	r23, 0xC4	; 196
     3e8:	64 87       	std	Z+12, r22	; 0x0c
     3ea:	01 ae       	std	Z+57, r0	; 0x39
     3ec:	09 74       	andi	r16, 0x49	; 73
     3ee:	1c 65       	ori	r17, 0x5C	; 92
     3f0:	58 12       	cpse	r5, r24
     3f2:	1d 02       	muls	r17, r29
     3f4:	af 06       	cpc	r10, r31
     3f6:	74 8c       	ldd	r7, Z+28	; 0x1c
     3f8:	9d 01       	movw	r18, r26
     3fa:	b0 08       	sbc	r11, r0
     3fc:	74 9c       	mul	r7, r4
     3fe:	28 89       	ldd	r18, Y+16	; 0x10
     400:	72 02       	muls	r23, r18
     402:	b1 08       	sbc	r11, r1
     404:	74 9c       	mul	r7, r4
     406:	68 8a       	std	Y+16, r6	; 0x10
     408:	57 00       	.word	0x0057	; ????
     40a:	b2 08       	sbc	r11, r2
     40c:	74 0c       	add	r7, r4
     40e:	2d ca       	rjmp	.-2982   	; 0xfffff86a <__eeprom_end+0xff7ef86a>
     410:	74 0c       	add	r7, r4
     412:	b3 08       	sbc	r11, r3
     414:	74 0c       	add	r7, r4
     416:	2d 0a       	sbc	r2, r29
     418:	a3 1c       	adc	r10, r3
     41a:	b4 06       	cpc	r11, r20
     41c:	74 ac       	ldd	r7, Z+60	; 0x3c
     41e:	3a 11       	cpse	r19, r10
     420:	b5 08       	sbc	r11, r5
     422:	74 cc       	rjmp	.-1816   	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
     424:	a4 17       	cp	r26, r20
     426:	29 03       	fmul	r18, r17
     428:	b6 08       	sbc	r11, r6
     42a:	74 9c       	mul	r7, r4
     42c:	41 59       	subi	r20, 0x91	; 145
     42e:	7a 04       	cpc	r7, r10
     430:	b7 06       	cpc	r11, r23
     432:	74 7c       	andi	r23, 0xC4	; 196
     434:	28 27       	eor	r18, r24
     436:	b8 07       	cpc	r27, r24
     438:	74 7c       	andi	r23, 0xC4	; 196
     43a:	42 14       	cp	r4, r2
     43c:	03 b9       	out	0x03, r16	; 3
     43e:	08 74       	andi	r16, 0x48	; 72
     440:	9c 48       	sbci	r25, 0x8C	; 140
     442:	ab 63       	ori	r26, 0x3B	; 59
     444:	00 ba       	out	0x10, r0	; 16
     446:	08 74       	andi	r16, 0x48	; 72
     448:	9c 28       	or	r9, r12
     44a:	89 e2       	ldi	r24, 0x29	; 41
     44c:	15 bb       	out	0x15, r17	; 21
     44e:	09 74       	andi	r16, 0x49	; 73
     450:	cc 24       	eor	r12, r12
     452:	4a 94       	dec	r4
     454:	1c 02       	muls	r17, r28
     456:	bc 09       	sbc	r27, r12
     458:	74 8c       	ldd	r7, Z+28	; 0x1c
     45a:	ac 98       	cbi	0x15, 4	; 21
     45c:	24 5b       	subi	r18, 0xB4	; 180
     45e:	00 bd       	out	0x20, r16	; 32
     460:	09 74       	andi	r16, 0x49	; 73
     462:	8c ac       	ldd	r8, Y+60	; 0x3c
     464:	a2 45       	sbci	r26, 0x52	; 82
     466:	99 00       	.word	0x0099	; ????
     468:	be 09       	sbc	r27, r14
     46a:	74 0c       	add	r7, r4
     46c:	2d 0a       	sbc	r2, r29
     46e:	13 5b       	subi	r17, 0xB3	; 179
     470:	00 bf       	out	0x30, r16	; 48
     472:	08 74       	andi	r16, 0x48	; 72
     474:	9c 1c       	adc	r9, r12
     476:	88 42       	sbci	r24, 0x28	; 40
     478:	15 c0       	rjmp	.+42     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     47a:	09 74       	andi	r16, 0x49	; 73
     47c:	8c 30       	cpi	r24, 0x0C	; 12
     47e:	4a 92       	st	-Y, r4
     480:	a5 0a       	sbc	r10, r21
     482:	c1 08       	sbc	r12, r1
     484:	74 ac       	ldd	r7, Z+60	; 0x3c
     486:	96 64       	ori	r25, 0x46	; 70
     488:	a9 02       	muls	r26, r25
     48a:	c2 09       	sbc	r28, r2
     48c:	74 0c       	add	r7, r4
     48e:	2d 4a       	sbci	r18, 0xAD	; 173
     490:	92 a5       	ldd	r25, Z+42	; 0x2a
     492:	0a c3       	rjmp	.+1556   	; 0xaa8 <__stack+0x1a9>
     494:	09 74       	andi	r16, 0x49	; 73
     496:	1c 53       	subi	r17, 0x3C	; 60
     498:	92 2c       	mov	r9, r2
     49a:	55 00       	.word	0x0055	; ????
     49c:	c4 09       	sbc	r28, r4
     49e:	74 8c       	ldd	r7, Z+28	; 0x1c
     4a0:	24 aa       	std	Z+52, r2	; 0x34
     4a2:	24 4b       	sbci	r18, 0xB4	; 180
     4a4:	15 c5       	rjmp	.+2602   	; 0xed0 <__vector_18+0x8>
     4a6:	09 74       	andi	r16, 0x49	; 73
     4a8:	9c 2c       	mov	r9, r12
     4aa:	4a 92       	st	-Y, r4
     4ac:	a5 0a       	sbc	r10, r21
     4ae:	c6 0a       	sbc	r12, r22
     4b0:	74 9c       	mul	r7, r4
     4b2:	21 49       	sbci	r18, 0x91	; 145
     4b4:	06 a5       	ldd	r16, Z+46	; 0x2e
     4b6:	22 02       	muls	r18, r18
     4b8:	c7 09       	sbc	r28, r7
     4ba:	74 9c       	mul	r7, r4
     4bc:	28 a9       	ldd	r18, Y+48	; 0x30
     4be:	25 51       	subi	r18, 0x15	; 21
     4c0:	0d c8       	rjmp	.-4070   	; 0xfffff4dc <__eeprom_end+0xff7ef4dc>
     4c2:	08 74       	andi	r16, 0x48	; 72
     4c4:	8c 6c       	ori	r24, 0xCC	; 204
     4c6:	91 b2       	in	r9, 0x11	; 17
     4c8:	15 c9       	rjmp	.-3542   	; 0xfffff6f4 <__eeprom_end+0xff7ef6f4>
     4ca:	08 74       	andi	r16, 0x48	; 72
     4cc:	ac 64       	ori	r26, 0x4C	; 76
     4ce:	91 b2       	in	r9, 0x11	; 17
     4d0:	15 ca       	rjmp	.-3030   	; 0xfffff8fc <__eeprom_end+0xff7ef8fc>
     4d2:	08 74       	andi	r16, 0x48	; 72
     4d4:	1c 65       	ori	r17, 0x5C	; 92
     4d6:	91 b2       	in	r9, 0x11	; 17
     4d8:	15 cb       	rjmp	.-2518   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
     4da:	09 74       	andi	r16, 0x49	; 73
     4dc:	8c 24       	eor	r8, r12
     4de:	59 a4       	ldd	r5, Y+41	; 0x29
     4e0:	6c 05       	cpc	r22, r12
     4e2:	cc 08       	sbc	r12, r12
     4e4:	74 8c       	ldd	r7, Z+28	; 0x1c
     4e6:	6c ca       	rjmp	.-2856   	; 0xfffff9c0 <__eeprom_end+0xff7ef9c0>
     4e8:	a2 15       	cp	r26, r2
     4ea:	cd 08       	sbc	r12, r13
     4ec:	74 ac       	ldd	r7, Z+60	; 0x3c
     4ee:	64 ca       	rjmp	.-2872   	; 0xfffff9b8 <__eeprom_end+0xff7ef9b8>
     4f0:	a2 15       	cp	r26, r2
     4f2:	ce 08       	sbc	r12, r14
     4f4:	74 9c       	mul	r7, r4
     4f6:	68 ca       	rjmp	.-2864   	; 0xfffff9c8 <__eeprom_end+0xff7ef9c8>
     4f8:	a2 15       	cp	r26, r2
     4fa:	cf 09       	sbc	r28, r15
     4fc:	74 8c       	ldd	r7, Z+28	; 0x1c
     4fe:	24 ca       	rjmp	.-3000   	; 0xfffff948 <__eeprom_end+0xff7ef948>
     500:	4a 2b       	or	r20, r26
     502:	00 d0       	rcall	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     504:	09 74       	andi	r16, 0x49	; 73
     506:	8c 29       	or	r24, r12
     508:	59 2a       	or	r5, r25
     50a:	43 0a       	sbc	r4, r19
     50c:	d1 09       	sbc	r29, r1
     50e:	74 9c       	mul	r7, r4
     510:	44 49       	sbci	r20, 0x94	; 148
     512:	2e 55       	subi	r18, 0x5E	; 94
     514:	00 d2       	rcall	.+1024   	; 0x916 <__stack+0x17>
     516:	09 74       	andi	r16, 0x49	; 73
     518:	8c 30       	cpi	r24, 0x0C	; 12
     51a:	4a 9a       	sbi	0x09, 2	; 9
     51c:	62 00       	.word	0x0062	; ????
     51e:	d3 07       	cpc	r29, r19
     520:	74 ac       	ldd	r7, Z+60	; 0x3c
     522:	96 a6       	std	Z+46, r9	; 0x2e
     524:	18 d4       	rcall	.+2096   	; 0xd56 <app_speaker+0x3c>
     526:	09 74       	andi	r16, 0x49	; 73
     528:	9c 2c       	mov	r9, r12
     52a:	4a 9a       	sbi	0x09, 2	; 9
     52c:	62 00       	.word	0x0062	; ????
     52e:	d5 08       	sbc	r13, r5
     530:	74 9c       	mul	r7, r4
     532:	61 e9       	ldi	r22, 0x91	; 145
     534:	14 03       	mulsu	r17, r20
     536:	d6 09       	sbc	r29, r6
     538:	74 8c       	ldd	r7, Z+28	; 0x1c
     53a:	24 aa       	std	Z+52, r2	; 0x34
     53c:	34 c5       	rjmp	.+2664   	; 0xfa6 <u8g2_DrawFrame+0x24>
     53e:	00 d7       	rcall	.+3584   	; 0x1340 <u8g2_font_decode_glyph+0x28>
     540:	09 74       	andi	r16, 0x49	; 73
     542:	cc 24       	eor	r12, r12
     544:	aa e4       	ldi	r26, 0x4A	; 74
     546:	10 00       	.word	0x0010	; ????
     548:	d8 09       	sbc	r29, r8
     54a:	74 1c       	adc	r7, r4
     54c:	a5 b2       	in	r10, 0x15	; 21
     54e:	54 64       	ori	r21, 0x44	; 68
     550:	00 d9       	rcall	.-3584   	; 0xfffff752 <__eeprom_end+0xff7ef752>
     552:	09 74       	andi	r16, 0x49	; 73
     554:	8c 30       	cpi	r24, 0x0C	; 12
     556:	4a 5a       	subi	r20, 0xAA	; 170
     558:	56 00       	.word	0x0056	; ????
     55a:	da 07       	cpc	r29, r26
     55c:	74 ac       	ldd	r7, Z+60	; 0x3c
     55e:	96 96       	adiw	r26, 0x26	; 38
     560:	15 db       	rcall	.-2518   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     562:	08 74       	andi	r16, 0x48	; 72
     564:	9c 38       	cpi	r25, 0x8C	; 140
     566:	69 59       	subi	r22, 0x99	; 153
     568:	01 dc       	rcall	.-2046   	; 0xfffffd6c <__eeprom_end+0xff7efd6c>
     56a:	09 74       	andi	r16, 0x49	; 73
     56c:	8c 24       	eor	r8, r12
     56e:	4d 5a       	subi	r20, 0xAD	; 173
     570:	56 00       	.word	0x0056	; ????
     572:	dd 08       	sbc	r13, r13
     574:	74 ac       	ldd	r7, Z+60	; 0x3c
     576:	34 89       	ldd	r19, Z+20	; 0x14
     578:	b2 18       	sub	r11, r2
     57a:	de 09       	sbc	r29, r14
     57c:	74 8c       	ldd	r7, Z+28	; 0x1c
     57e:	4c 4a       	sbci	r20, 0xAC	; 172
     580:	12 29       	or	r17, r2
     582:	07 df       	rcall	.-498    	; 0x392 <__trampolines_end+0x32a>
     584:	0b 74       	andi	r16, 0x4B	; 75
     586:	9c 28       	or	r9, r12
     588:	49 a4       	ldd	r4, Y+41	; 0x29
     58a:	24 59       	subi	r18, 0x94	; 148
     58c:	32 00       	.word	0x0032	; ????
     58e:	e0 09       	sbc	r30, r0
     590:	74 8c       	ldd	r7, Z+28	; 0x1c
     592:	30 53       	subi	r19, 0x30	; 48
     594:	4a 2a       	or	r4, r26
     596:	00 e1       	ldi	r16, 0x10	; 16
     598:	08 74       	andi	r16, 0x48	; 72
     59a:	ac 9a       	sbi	0x15, 4	; 21
     59c:	52 52       	subi	r21, 0x22	; 34
     59e:	01 e2       	ldi	r16, 0x21	; 33
     5a0:	08 74       	andi	r16, 0x48	; 72
     5a2:	1c 59       	subi	r17, 0x9C	; 156
     5a4:	29 a9       	ldd	r18, Y+49	; 0x31
     5a6:	00 e3       	ldi	r16, 0x30	; 48
     5a8:	09 74       	andi	r16, 0x49	; 73
     5aa:	9c 44       	sbci	r25, 0x4C	; 76
     5ac:	89 94       	.word	0x9489	; ????
     5ae:	92 0a       	sbc	r9, r18
     5b0:	e4 09       	sbc	r30, r4
     5b2:	74 8c       	ldd	r7, Z+28	; 0x1c
     5b4:	24 56       	subi	r18, 0x64	; 100
     5b6:	4a 2a       	or	r4, r26
     5b8:	00 e5       	ldi	r16, 0x50	; 80
     5ba:	09 74       	andi	r16, 0x49	; 73
     5bc:	9c 1c       	adc	r9, r12
     5be:	50 4a       	sbci	r21, 0xA0	; 160
     5c0:	2a 00       	.word	0x002a	; ????
     5c2:	e6 08       	sbc	r14, r6
     5c4:	74 dc       	rcall	.-1816   	; 0xfffffeae <__eeprom_end+0xff7efeae>
     5c6:	21 59       	subi	r18, 0x91	; 145
     5c8:	a2 11       	cpse	r26, r2
     5ca:	e7 09       	sbc	r30, r7
     5cc:	74 dc       	rcall	.-1816   	; 0xfffffeb6 <__eeprom_end+0xff7efeb6>
     5ce:	28 29       	or	r18, r8
     5d0:	4a 11       	cpse	r20, r10
     5d2:	00 e8       	ldi	r16, 0x80	; 128
     5d4:	09 74       	andi	r16, 0x49	; 73
     5d6:	8c 30       	cpi	r24, 0x0C	; 12
     5d8:	4a 12       	cpse	r4, r26
     5da:	4d 05       	cpc	r20, r13
     5dc:	e9 08       	sbc	r14, r9
     5de:	74 ac       	ldd	r7, Z+60	; 0x3c
     5e0:	96 44       	sbci	r25, 0x46	; 70
     5e2:	53 01       	movw	r10, r6
     5e4:	ea 09       	sbc	r30, r10
     5e6:	74 0c       	add	r7, r4
     5e8:	2d 4a       	sbci	r18, 0xAD	; 173
     5ea:	12 4d       	sbci	r17, 0xD2	; 210
     5ec:	05 eb       	ldi	r16, 0xB5	; 181
     5ee:	09 74       	andi	r16, 0x49	; 73
     5f0:	8c 24       	eor	r8, r12
     5f2:	aa 24       	eor	r10, r10
     5f4:	9a 0a       	sbc	r9, r26
     5f6:	ec 08       	sbc	r14, r12
     5f8:	74 8c       	ldd	r7, Z+28	; 0x1c
     5fa:	30 2b       	or	r19, r16
     5fc:	ad 00       	.word	0x00ad	; ????
     5fe:	ed 08       	sbc	r14, r13
     600:	74 ac       	ldd	r7, Z+60	; 0x3c
     602:	44 2b       	or	r20, r20
     604:	ad 00       	.word	0x00ad	; ????
     606:	ee 09       	sbc	r30, r14
     608:	74 9c       	mul	r7, r4
     60a:	28 89       	ldd	r18, Y+16	; 0x10
     60c:	b2 68       	ori	r27, 0x82	; 130
     60e:	05 ef       	ldi	r16, 0xF5	; 245
     610:	08 74       	andi	r16, 0x48	; 72
     612:	8c 24       	eor	r8, r12
     614:	d5 a2       	std	Z+37, r13	; 0x25
     616:	15 f0       	brhs	.+4      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     618:	09 74       	andi	r16, 0x49	; 73
     61a:	8c 24       	eor	r8, r12
     61c:	ca 94       	dec	r12
     61e:	52 0c       	add	r5, r2
     620:	f1 09       	sbc	r31, r1
     622:	74 9c       	mul	r7, r4
     624:	44 49       	sbci	r20, 0x94	; 148
     626:	a4 a4       	ldd	r10, Z+44	; 0x2c
     628:	15 f2       	brhs	.-124    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     62a:	09 74       	andi	r16, 0x49	; 73
     62c:	8c 30       	cpi	r24, 0x0C	; 12
     62e:	8b 92       	.word	0x928b	; ????
     630:	28 06       	cpc	r2, r24
     632:	f3 09       	sbc	r31, r3
     634:	74 ac       	ldd	r7, Z+60	; 0x3c
     636:	5a 94       	dec	r5
     638:	44 31       	cpi	r20, 0x14	; 20
     63a:	00 f4       	brcc	.+0      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     63c:	09 74       	andi	r16, 0x49	; 73
     63e:	9c 1c       	adc	r9, r12
     640:	88 92       	.word	0x9288	; ????
     642:	28 06       	cpc	r2, r24
     644:	f5 08       	sbc	r15, r5
     646:	74 8c       	ldd	r7, Z+28	; 0x1c
     648:	39 4a       	sbci	r19, 0xA9	; 169
     64a:	a2 18       	sub	r10, r2
     64c:	f6 09       	sbc	r31, r6
     64e:	74 8c       	ldd	r7, Z+28	; 0x1c
     650:	24 8e       	std	Z+28, r2	; 0x1c
     652:	92 28       	or	r9, r2
     654:	06 f7       	brtc	.-64     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     656:	07 74       	andi	r16, 0x47	; 71
     658:	9c 78       	andi	r25, 0x8C	; 140
     65a:	8e 01       	movw	r16, r28
     65c:	f8 07       	cpc	r31, r24
     65e:	74 5c       	subi	r23, 0xC4	; 196
     660:	a5 8b       	std	Z+21, r26	; 0x15
     662:	0c f9       	.word	0xf90c	; ????
     664:	09 74       	andi	r16, 0x49	; 73
     666:	8c 30       	cpi	r24, 0x0C	; 12
     668:	4a 9a       	sbi	0x09, 2	; 9
     66a:	54 00       	.word	0x0054	; ????
     66c:	fa 07       	cpc	r31, r26
     66e:	74 ac       	ldd	r7, Z+60	; 0x3c
     670:	96 26       	eor	r9, r22
     672:	15 fb       	bst	r17, 5
     674:	08 74       	andi	r16, 0x48	; 72
     676:	9c 38       	cpi	r25, 0x8C	; 140
     678:	69 52       	subi	r22, 0x29	; 41
     67a:	01 fc       	sbrc	r0, 1
     67c:	09 74       	andi	r16, 0x49	; 73
     67e:	8c 24       	eor	r8, r12
     680:	4d 9a       	sbi	0x09, 5	; 9
     682:	54 00       	.word	0x0054	; ????
     684:	fd 09       	sbc	r31, r13
     686:	74 ac       	ldd	r7, Z+60	; 0x3c
     688:	96 64       	ori	r25, 0x46	; 70
     68a:	4b 24       	eor	r4, r11
     68c:	00 fe       	sbrs	r0, 0
     68e:	0a 74       	andi	r16, 0x4A	; 74
     690:	8c 2c       	mov	r8, r12
     692:	93 92       	.word	0x9293	; ????
     694:	44 ca       	rjmp	.-2936   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     696:	00 ff       	sbrs	r16, 0
     698:	0a 74       	andi	r16, 0x4A	; 74
     69a:	8c 24       	eor	r8, r12
     69c:	4d 92       	st	X+, r4
     69e:	2d 91       	ld	r18, X+
     6a0:	00 00       	nop
     6a2:	00 00       	nop
     6a4:	04 ff       	sbrs	r16, 4
     6a6:	ff 00       	.word	0x00ff	; ????
	...

000006aa <__ctors_end>:
     6aa:	11 24       	eor	r1, r1
     6ac:	1f be       	out	0x3f, r1	; 63
     6ae:	cf ef       	ldi	r28, 0xFF	; 255
     6b0:	d8 e0       	ldi	r29, 0x08	; 8
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	cd bf       	out	0x3d, r28	; 61

000006b6 <__do_copy_data>:
     6b6:	11 e0       	ldi	r17, 0x01	; 1
     6b8:	a0 e0       	ldi	r26, 0x00	; 0
     6ba:	b1 e0       	ldi	r27, 0x01	; 1
     6bc:	e8 e6       	ldi	r30, 0x68	; 104
     6be:	f0 e3       	ldi	r31, 0x30	; 48
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <__do_copy_data+0x10>
     6c2:	05 90       	lpm	r0, Z+
     6c4:	0d 92       	st	X+, r0
     6c6:	a4 39       	cpi	r26, 0x94	; 148
     6c8:	b1 07       	cpc	r27, r17
     6ca:	d9 f7       	brne	.-10     	; 0x6c2 <__do_copy_data+0xc>

000006cc <__do_clear_bss>:
     6cc:	27 e0       	ldi	r18, 0x07	; 7
     6ce:	a4 e9       	ldi	r26, 0x94	; 148
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <.do_clear_bss_start>

000006d4 <.do_clear_bss_loop>:
     6d4:	1d 92       	st	X+, r1

000006d6 <.do_clear_bss_start>:
     6d6:	af 33       	cpi	r26, 0x3F	; 63
     6d8:	b2 07       	cpc	r27, r18
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <.do_clear_bss_loop>
     6dc:	0e 94 7f 07 	call	0xefe	; 0xefe <main>
     6e0:	0c 94 32 18 	jmp	0x3064	; 0x3064 <_exit>

000006e4 <__bad_interrupt>:
     6e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006e8 <app_adc_init>:
context_t *contextPtr;

/*** Apps ***/
void app_adc_init(void *pvParameters){
	// Get Context Pointer
	contextPtr = (context_t * )pvParameters;
     6e8:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <contextPtr+0x1>
     6ec:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <contextPtr>
     6f0:	08 95       	ret

000006f2 <app_adc>:
	if(contextPtr == NULL){
		return;
	}
}

void app_adc(){
     6f2:	ef 92       	push	r14
     6f4:	ff 92       	push	r15
     6f6:	0f 93       	push	r16
     6f8:	1f 93       	push	r17
     6fa:	cf 93       	push	r28
     6fc:	df 93       	push	r29
     6fe:	00 d0       	rcall	.+0      	; 0x700 <app_adc+0xe>
     700:	00 d0       	rcall	.+0      	; 0x702 <app_adc+0x10>
     702:	00 d0       	rcall	.+0      	; 0x704 <app_adc+0x12>
     704:	cd b7       	in	r28, 0x3d	; 61
     706:	de b7       	in	r29, 0x3e	; 62
	adc_data_t adc_buffer;
	
	// Set ADC Params
	adc_set_refs(AVcc);
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	0e 94 da 06 	call	0xdb4	; 0xdb4 <adc_set_refs>
	adc_set_adps(DIV32);
     70e:	85 e0       	ldi	r24, 0x05	; 5
     710:	0e 94 e5 06 	call	0xdca	; 0xdca <adc_set_adps>
	adc_enable();
     714:	0e 94 f6 06 	call	0xdec	; 0xdec <adc_enable>
	
	// Get reading for X axis
	adc_set_channel(ADC0);
     718:	80 e0       	ldi	r24, 0x00	; 0
     71a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <adc_set_channel>
	while(adc_is_converting());
     71e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <adc_is_converting>
     722:	81 11       	cpse	r24, r1
     724:	fc cf       	rjmp	.-8      	; 0x71e <app_adc+0x2c>
	adc_start_single();
     726:	0e 94 ed 06 	call	0xdda	; 0xdda <adc_start_single>
	while(!adc_is_finished());
     72a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <adc_is_finished>
     72e:	88 23       	and	r24, r24
     730:	e1 f3       	breq	.-8      	; 0x72a <app_adc+0x38>
	adc_buffer.x = adc_get_value();
     732:	0e 94 05 07 	call	0xe0a	; 0xe0a <adc_get_value>
     736:	7c 01       	movw	r14, r24
	
	// Get reading for Y axis
	adc_set_channel(ADC1);
     738:	81 e0       	ldi	r24, 0x01	; 1
     73a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <adc_set_channel>
	while(adc_is_converting());
     73e:	0e 94 ff 06 	call	0xdfe	; 0xdfe <adc_is_converting>
     742:	81 11       	cpse	r24, r1
     744:	fc cf       	rjmp	.-8      	; 0x73e <app_adc+0x4c>
	adc_start_single();
     746:	0e 94 ed 06 	call	0xdda	; 0xdda <adc_start_single>
	while(!adc_is_finished());
     74a:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <adc_is_finished>
     74e:	88 23       	and	r24, r24
     750:	e1 f3       	breq	.-8      	; 0x74a <app_adc+0x58>
	adc_buffer.y = adc_get_value();
     752:	0e 94 05 07 	call	0xe0a	; 0xe0a <adc_get_value>
     756:	8c 01       	movw	r16, r24
	 * Get reading for Vcc
	 * 
	 * Need to wait after switching to 1V1 before getting useful data.
	 * https://www.avrfreaks.net/forum/avrs-measure-their-own-vcc-do-it-badly
	 */
	adc_set_channel(C1V1);
     758:	8e e0       	ldi	r24, 0x0E	; 14
     75a:	0e 94 c5 06 	call	0xd8a	; 0xd8a <adc_set_channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     75e:	8f e9       	ldi	r24, 0x9F	; 159
     760:	9f e0       	ldi	r25, 0x0F	; 15
     762:	01 97       	sbiw	r24, 0x01	; 1
     764:	f1 f7       	brne	.-4      	; 0x762 <app_adc+0x70>
     766:	00 c0       	rjmp	.+0      	; 0x768 <app_adc+0x76>
     768:	00 00       	nop
	_delay_ms(1);
	adc_start_single();
     76a:	0e 94 ed 06 	call	0xdda	; 0xdda <adc_start_single>
	while(!adc_is_finished());
     76e:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <adc_is_finished>
     772:	88 23       	and	r24, r24
     774:	e1 f3       	breq	.-8      	; 0x76e <app_adc+0x7c>
	adc_buffer.vin = adc_get_value();
     776:	0e 94 05 07 	call	0xe0a	; 0xe0a <adc_get_value>
	
	// Send or cancel a test alarm
	if(PIND & (1 << PIND2)){
     77a:	4a 99       	sbic	0x09, 2	; 9
     77c:	21 c0       	rjmp	.+66     	; 0x7c0 <app_adc+0xce>
		contextPtr->persistant_alarms[1] = alarm_sound2;
	}else{
		contextPtr->persistant_alarms[1] = alarm_stop;
     77e:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <contextPtr>
     782:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <contextPtr+0x1>
     786:	1b 96       	adiw	r26, 0x0b	; 11
     788:	1c 92       	st	X, r1
     78a:	1b 97       	sbiw	r26, 0x0b	; 11
	}
	
	// Send the adc values to buffer
	contextPtr->buf_adc_data = adc_buffer;
     78c:	fa 82       	std	Y+2, r15	; 0x02
     78e:	e9 82       	std	Y+1, r14	; 0x01
     790:	1c 83       	std	Y+4, r17	; 0x04
     792:	0b 83       	std	Y+3, r16	; 0x03
     794:	9e 83       	std	Y+6, r25	; 0x06
     796:	8d 83       	std	Y+5, r24	; 0x05
     798:	86 e0       	ldi	r24, 0x06	; 6
     79a:	fe 01       	movw	r30, r28
     79c:	31 96       	adiw	r30, 0x01	; 1
     79e:	01 90       	ld	r0, Z+
     7a0:	0d 92       	st	X+, r0
     7a2:	8a 95       	dec	r24
     7a4:	e1 f7       	brne	.-8      	; 0x79e <app_adc+0xac>
}
     7a6:	26 96       	adiw	r28, 0x06	; 6
     7a8:	0f b6       	in	r0, 0x3f	; 63
     7aa:	f8 94       	cli
     7ac:	de bf       	out	0x3e, r29	; 62
     7ae:	0f be       	out	0x3f, r0	; 63
     7b0:	cd bf       	out	0x3d, r28	; 61
     7b2:	df 91       	pop	r29
     7b4:	cf 91       	pop	r28
     7b6:	1f 91       	pop	r17
     7b8:	0f 91       	pop	r16
     7ba:	ff 90       	pop	r15
     7bc:	ef 90       	pop	r14
     7be:	08 95       	ret
	while(!adc_is_finished());
	adc_buffer.vin = adc_get_value();
	
	// Send or cancel a test alarm
	if(PIND & (1 << PIND2)){
		contextPtr->persistant_alarms[1] = alarm_sound2;
     7c0:	a0 91 95 05 	lds	r26, 0x0595	; 0x800595 <contextPtr>
     7c4:	b0 91 96 05 	lds	r27, 0x0596	; 0x800596 <contextPtr+0x1>
     7c8:	20 e1       	ldi	r18, 0x10	; 16
     7ca:	1b 96       	adiw	r26, 0x0b	; 11
     7cc:	2c 93       	st	X, r18
     7ce:	1b 97       	sbiw	r26, 0x0b	; 11
     7d0:	dd cf       	rjmp	.-70     	; 0x78c <app_adc+0x9a>

000007d2 <app_gui_init>:

context_t *contextPtr;
u8g2_t u8g2;

/*** Apps ***/
void app_gui_init(void * pvParameters){
     7d2:	cf 93       	push	r28
     7d4:	df 93       	push	r29
     7d6:	cd b7       	in	r28, 0x3d	; 61
     7d8:	de b7       	in	r29, 0x3e	; 62
     7da:	69 97       	sbiw	r28, 0x19	; 25
     7dc:	0f b6       	in	r0, 0x3f	; 63
     7de:	f8 94       	cli
     7e0:	de bf       	out	0x3e, r29	; 62
     7e2:	0f be       	out	0x3f, r0	; 63
     7e4:	cd bf       	out	0x3d, r28	; 61
	// Get Context Pointer
	contextPtr = (context_t * )pvParameters;
     7e6:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <contextPtr+0x1>
     7ea:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <contextPtr>
	if(contextPtr == NULL){
     7ee:	89 2b       	or	r24, r25
     7f0:	01 f1       	breq	.+64     	; 0x832 <app_gui_init+0x60>
		return;
	}
	
	// U8G2 Setup
	u8x8_conf_t u8x8_conf= {
     7f2:	89 e1       	ldi	r24, 0x19	; 25
     7f4:	e0 e0       	ldi	r30, 0x00	; 0
     7f6:	f1 e0       	ldi	r31, 0x01	; 1
     7f8:	de 01       	movw	r26, r28
     7fa:	11 96       	adiw	r26, 0x01	; 1
     7fc:	01 90       	ld	r0, Z+
     7fe:	0d 92       	st	X+, r0
     800:	8a 95       	dec	r24
     802:	e1 f7       	brne	.-8      	; 0x7fc <app_gui_init+0x2a>
		
		.ddr_rst = &DDRB,
		.port_rst = &PORTB,
		.pin_rst = 0
	};
	u8x8_init_conf(&u8x8_conf);
     804:	ce 01       	movw	r24, r28
     806:	01 96       	adiw	r24, 0x01	; 1
     808:	0e 94 f4 10 	call	0x21e8	; 0x21e8 <u8x8_init_conf>
	//u8g2_Setup_ise97002ks_gu128x64_1(&u8g2, U8G2_R0, u8x8_byte_avr_hw_spi, u8x8_gpio_and_delay);
	u8g2_Setup_ise97002ks_gu128x64_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_spi, u8x8_gpio_and_delay);
     80c:	2d ee       	ldi	r18, 0xED	; 237
     80e:	31 e1       	ldi	r19, 0x11	; 17
     810:	4d ef       	ldi	r20, 0xFD	; 253
     812:	50 e1       	ldi	r21, 0x10	; 16
     814:	65 e7       	ldi	r22, 0x75	; 117
     816:	71 e0       	ldi	r23, 0x01	; 1
     818:	8d ee       	ldi	r24, 0xED	; 237
     81a:	95 e0       	ldi	r25, 0x05	; 5
     81c:	0e 94 22 09 	call	0x1244	; 0x1244 <u8g2_Setup_ise97002ks_gu128x64_f>
	
	// Start Display
	u8g2_InitDisplay(&u8g2);
     820:	8d ee       	ldi	r24, 0xED	; 237
     822:	95 e0       	ldi	r25, 0x05	; 5
     824:	0e 94 94 13 	call	0x2728	; 0x2728 <u8x8_InitDisplay>
	u8g2_SetContrast(&u8g2, 0);
     828:	60 e0       	ldi	r22, 0x00	; 0
     82a:	8d ee       	ldi	r24, 0xED	; 237
     82c:	95 e0       	ldi	r25, 0x05	; 5
     82e:	0e 94 9e 13 	call	0x273c	; 0x273c <u8x8_SetContrast>
}
     832:	69 96       	adiw	r28, 0x19	; 25
     834:	0f b6       	in	r0, 0x3f	; 63
     836:	f8 94       	cli
     838:	de bf       	out	0x3e, r29	; 62
     83a:	0f be       	out	0x3f, r0	; 63
     83c:	cd bf       	out	0x3d, r28	; 61
     83e:	df 91       	pop	r29
     840:	cf 91       	pop	r28
     842:	08 95       	ret

00000844 <app_gui>:

draw_data_t draw_data;
void app_gui(){
     844:	9f 92       	push	r9
     846:	af 92       	push	r10
     848:	bf 92       	push	r11
     84a:	cf 92       	push	r12
     84c:	df 92       	push	r13
     84e:	ef 92       	push	r14
     850:	ff 92       	push	r15
     852:	0f 93       	push	r16
     854:	1f 93       	push	r17
     856:	cf 93       	push	r28
     858:	df 93       	push	r29
     85a:	00 d0       	rcall	.+0      	; 0x85c <app_gui+0x18>
     85c:	00 d0       	rcall	.+0      	; 0x85e <app_gui+0x1a>
     85e:	00 d0       	rcall	.+0      	; 0x860 <app_gui+0x1c>
     860:	cd b7       	in	r28, 0x3d	; 61
     862:	de b7       	in	r29, 0x3e	; 62
	/*** Calculate data for UI elements ***/
	// Get the latest ADC data
	adc_data_t adc_buffer = contextPtr->buf_adc_data;
     864:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <contextPtr>
     868:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <contextPtr+0x1>
     86c:	86 e0       	ldi	r24, 0x06	; 6
     86e:	de 01       	movw	r26, r28
     870:	11 96       	adiw	r26, 0x01	; 1
     872:	01 90       	ld	r0, Z+
     874:	0d 92       	st	X+, r0
     876:	8a 95       	dec	r24
     878:	e1 f7       	brne	.-8      	; 0x872 <app_gui+0x2e>
     87a:	09 81       	ldd	r16, Y+1	; 0x01
     87c:	1a 81       	ldd	r17, Y+2	; 0x02
     87e:	eb 80       	ldd	r14, Y+3	; 0x03
     880:	fc 80       	ldd	r15, Y+4	; 0x04
     882:	cd 80       	ldd	r12, Y+5	; 0x05
     884:	de 80       	ldd	r13, Y+6	; 0x06
	
	uint16_t x_calc = abs((adc_buffer.x / 2) - 255);
     886:	c8 01       	movw	r24, r16
     888:	96 95       	lsr	r25
     88a:	87 95       	ror	r24
     88c:	8f 5f       	subi	r24, 0xFF	; 255
     88e:	91 09       	sbc	r25, r1
     890:	97 fd       	sbrc	r25, 7
     892:	e1 c1       	rjmp	.+962    	; 0xc56 <__stack+0x357>
	if(x_calc > 255){
     894:	8f 3f       	cpi	r24, 0xFF	; 255
     896:	91 05       	cpc	r25, r1
     898:	11 f0       	breq	.+4      	; 0x89e <app_gui+0x5a>
     89a:	0c f0       	brlt	.+2      	; 0x89e <app_gui+0x5a>
     89c:	af c1       	rjmp	.+862    	; 0xbfc <__stack+0x2fd>
void app_gui(){
	/*** Calculate data for UI elements ***/
	// Get the latest ADC data
	adc_data_t adc_buffer = contextPtr->buf_adc_data;
	
	uint16_t x_calc = abs((adc_buffer.x / 2) - 255);
     89e:	ac 01       	movw	r20, r24
	if(x_calc > 255){
		x_calc = 255;
	}
	uint16_t y_calc = abs((adc_buffer.y / 2) - 255);
     8a0:	97 01       	movw	r18, r14
     8a2:	36 95       	lsr	r19
     8a4:	27 95       	ror	r18
     8a6:	2f 5f       	subi	r18, 0xFF	; 255
     8a8:	31 09       	sbc	r19, r1
     8aa:	37 fd       	sbrc	r19, 7
     8ac:	b0 c1       	rjmp	.+864    	; 0xc0e <__stack+0x30f>
	if(y_calc > 255){
     8ae:	2f 3f       	cpi	r18, 0xFF	; 255
     8b0:	31 05       	cpc	r19, r1
     8b2:	11 f0       	breq	.+4      	; 0x8b8 <app_gui+0x74>
     8b4:	0c f0       	brlt	.+2      	; 0x8b8 <app_gui+0x74>
     8b6:	9e c1       	rjmp	.+828    	; 0xbf4 <__stack+0x2f5>
	
	uint16_t x_calc = abs((adc_buffer.x / 2) - 255);
	if(x_calc > 255){
		x_calc = 255;
	}
	uint16_t y_calc = abs((adc_buffer.y / 2) - 255);
     8b8:	a2 2e       	mov	r10, r18
     8ba:	93 2e       	mov	r9, r19
     8bc:	bb 24       	eor	r11, r11
     8be:	b3 94       	inc	r11
		y_calc = 255;
	}
	bool x_dir = adc_buffer.x > 511;
	bool y_dir = adc_buffer.y > 511;
	
	bool move = (abs((adc_buffer.x / 2) - 255) >= 10) || (abs((adc_buffer.y / 2) - 255) >= 10);
     8c0:	0a 97       	sbiw	r24, 0x0a	; 10
     8c2:	24 f4       	brge	.+8      	; 0x8cc <app_gui+0x88>
     8c4:	2a 30       	cpi	r18, 0x0A	; 10
     8c6:	31 05       	cpc	r19, r1
     8c8:	0c f4       	brge	.+2      	; 0x8cc <app_gui+0x88>
     8ca:	be c1       	rjmp	.+892    	; 0xc48 <__stack+0x349>
	
	snprintf(draw_data.buf3, BUF3_SIZE, "L/R:%3d, DIR:%c", x_calc, x_dir ? 'R' : 'L');
     8cc:	01 15       	cp	r16, r1
     8ce:	22 e0       	ldi	r18, 0x02	; 2
     8d0:	12 07       	cpc	r17, r18
     8d2:	08 f4       	brcc	.+2      	; 0x8d6 <app_gui+0x92>
     8d4:	b7 c1       	rjmp	.+878    	; 0xc44 <__stack+0x345>
     8d6:	82 e5       	ldi	r24, 0x52	; 82
     8d8:	1f 92       	push	r1
     8da:	8f 93       	push	r24
     8dc:	5f 93       	push	r21
     8de:	4f 93       	push	r20
     8e0:	89 e1       	ldi	r24, 0x19	; 25
     8e2:	91 e0       	ldi	r25, 0x01	; 1
     8e4:	9f 93       	push	r25
     8e6:	8f 93       	push	r24
     8e8:	1f 92       	push	r1
     8ea:	84 e1       	ldi	r24, 0x14	; 20
     8ec:	8f 93       	push	r24
     8ee:	8b eb       	ldi	r24, 0xBB	; 187
     8f0:	95 e0       	ldi	r25, 0x05	; 5
     8f2:	9f 93       	push	r25
     8f4:	8f 93       	push	r24
     8f6:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <snprintf>
	snprintf(draw_data.buf4, BUF4_SIZE, "F/B:%3d, DIR:%c", y_calc, y_dir ? 'B' : 'F');
     8fa:	0f b6       	in	r0, 0x3f	; 63
     8fc:	f8 94       	cli
     8fe:	de bf       	out	0x3e, r29	; 62
     900:	0f be       	out	0x3f, r0	; 63
     902:	cd bf       	out	0x3d, r28	; 61
     904:	e1 14       	cp	r14, r1
     906:	92 e0       	ldi	r25, 0x02	; 2
     908:	f9 06       	cpc	r15, r25
     90a:	08 f4       	brcc	.+2      	; 0x90e <__stack+0xf>
     90c:	99 c1       	rjmp	.+818    	; 0xc40 <__stack+0x341>
     90e:	82 e4       	ldi	r24, 0x42	; 66
     910:	1f 92       	push	r1
     912:	8f 93       	push	r24
     914:	9f 92       	push	r9
     916:	af 92       	push	r10
     918:	89 e2       	ldi	r24, 0x29	; 41
     91a:	91 e0       	ldi	r25, 0x01	; 1
     91c:	9f 93       	push	r25
     91e:	8f 93       	push	r24
     920:	1f 92       	push	r1
     922:	84 e1       	ldi	r24, 0x14	; 20
     924:	8f 93       	push	r24
     926:	8f ec       	ldi	r24, 0xCF	; 207
     928:	95 e0       	ldi	r25, 0x05	; 5
     92a:	9f 93       	push	r25
     92c:	8f 93       	push	r24
     92e:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <snprintf>
	
	snprintf(draw_data.buf5, BUF5_SIZE, "MOVE: %c", move ? 'Y' : 'N');
     932:	0f b6       	in	r0, 0x3f	; 63
     934:	f8 94       	cli
     936:	de bf       	out	0x3e, r29	; 62
     938:	0f be       	out	0x3f, r0	; 63
     93a:	cd bf       	out	0x3d, r28	; 61
     93c:	bb 20       	and	r11, r11
     93e:	09 f4       	brne	.+2      	; 0x942 <__stack+0x43>
     940:	7d c1       	rjmp	.+762    	; 0xc3c <__stack+0x33d>
     942:	89 e5       	ldi	r24, 0x59	; 89
     944:	1f 92       	push	r1
     946:	8f 93       	push	r24
     948:	89 e3       	ldi	r24, 0x39	; 57
     94a:	91 e0       	ldi	r25, 0x01	; 1
     94c:	9f 93       	push	r25
     94e:	8f 93       	push	r24
     950:	1f 92       	push	r1
     952:	8a e0       	ldi	r24, 0x0A	; 10
     954:	8f 93       	push	r24
     956:	83 ee       	ldi	r24, 0xE3	; 227
     958:	95 e0       	ldi	r25, 0x05	; 5
     95a:	9f 93       	push	r25
     95c:	8f 93       	push	r24
     95e:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <snprintf>
	
	// Joystick Indicator
	draw_data.line1_x1 = (adc_buffer.x / 32) - 4 + 10 + 50;
     962:	16 95       	lsr	r17
     964:	07 95       	ror	r16
     966:	12 95       	swap	r17
     968:	02 95       	swap	r16
     96a:	0f 70       	andi	r16, 0x0F	; 15
     96c:	01 27       	eor	r16, r17
     96e:	1f 70       	andi	r17, 0x0F	; 15
     970:	01 27       	eor	r16, r17
     972:	88 e3       	ldi	r24, 0x38	; 56
     974:	80 0f       	add	r24, r16
     976:	80 93 97 05 	sts	0x0597, r24	; 0x800597 <draw_data>
	draw_data.line1_y1 = (adc_buffer.y / 32) + 10;
     97a:	c7 01       	movw	r24, r14
     97c:	96 95       	lsr	r25
     97e:	87 95       	ror	r24
     980:	92 95       	swap	r25
     982:	82 95       	swap	r24
     984:	8f 70       	andi	r24, 0x0F	; 15
     986:	89 27       	eor	r24, r25
     988:	9f 70       	andi	r25, 0x0F	; 15
     98a:	89 27       	eor	r24, r25
     98c:	9a e0       	ldi	r25, 0x0A	; 10
     98e:	98 0f       	add	r25, r24
     990:	90 93 98 05 	sts	0x0598, r25	; 0x800598 <draw_data+0x1>
	draw_data.line1_x2 = (adc_buffer.x / 32) + 4 + 10 + 50;
     994:	20 e4       	ldi	r18, 0x40	; 64
     996:	20 0f       	add	r18, r16
     998:	20 93 99 05 	sts	0x0599, r18	; 0x800599 <draw_data+0x2>
	draw_data.line1_y2 = (adc_buffer.y / 32) + 10;
     99c:	90 93 9a 05 	sts	0x059A, r25	; 0x80059a <draw_data+0x3>
	
	draw_data.line2_x1 = (adc_buffer.x / 32) + 10 + 50;
     9a0:	04 5c       	subi	r16, 0xC4	; 196
     9a2:	00 93 9b 05 	sts	0x059B, r16	; 0x80059b <draw_data+0x4>
	draw_data.line2_y1 = (adc_buffer.y / 32) - 4 + 10;
     9a6:	26 e0       	ldi	r18, 0x06	; 6
     9a8:	28 0f       	add	r18, r24
     9aa:	20 93 9c 05 	sts	0x059C, r18	; 0x80059c <draw_data+0x5>
	draw_data.line2_x2 = (adc_buffer.x / 32) + 10 + 50;
     9ae:	00 93 9d 05 	sts	0x059D, r16	; 0x80059d <draw_data+0x6>
	draw_data.line2_y2 = (adc_buffer.y / 32) + 4 + 10;
     9b2:	82 5f       	subi	r24, 0xF2	; 242
     9b4:	80 93 9e 05 	sts	0x059E, r24	; 0x80059e <draw_data+0x7>
	
	draw_data.circle1_x = (adc_buffer.x / 32) + 10 + 50;
     9b8:	00 93 9f 05 	sts	0x059F, r16	; 0x80059f <draw_data+0x8>
	draw_data.circle1_y = (adc_buffer.y / 32) + 10;
     9bc:	90 93 a0 05 	sts	0x05A0, r25	; 0x8005a0 <draw_data+0x9>
	draw_data.circle1_r = 2;
     9c0:	82 e0       	ldi	r24, 0x02	; 2
     9c2:	80 93 a1 05 	sts	0x05A1, r24	; 0x8005a1 <draw_data+0xa>
	draw_data.circle1_m = U8G2_DRAW_ALL;
     9c6:	8f e0       	ldi	r24, 0x0F	; 15
     9c8:	80 93 a2 05 	sts	0x05A2, r24	; 0x8005a2 <draw_data+0xb>
	
	// Input Voltage Indicator
	draw_data.box1_w = 4;
     9cc:	84 e0       	ldi	r24, 0x04	; 4
     9ce:	80 93 a5 05 	sts	0x05A5, r24	; 0x8005a5 <draw_data+0xe>
	draw_data.box1_h = 11594l / adc_buffer.vin;
     9d2:	96 01       	movw	r18, r12
     9d4:	40 e0       	ldi	r20, 0x00	; 0
     9d6:	50 e0       	ldi	r21, 0x00	; 0
     9d8:	6a e4       	ldi	r22, 0x4A	; 74
     9da:	7d e2       	ldi	r23, 0x2D	; 45
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	0e 94 05 15 	call	0x2a0a	; 0x2a0a <__divmodsi4>
     9e4:	20 93 a6 05 	sts	0x05A6, r18	; 0x8005a6 <draw_data+0xf>
	draw_data.box1_x = 123;
     9e8:	8b e7       	ldi	r24, 0x7B	; 123
     9ea:	80 93 a3 05 	sts	0x05A3, r24	; 0x8005a3 <draw_data+0xc>
	draw_data.box1_y = 1 + 62 - draw_data.box1_h;
     9ee:	8f e3       	ldi	r24, 0x3F	; 63
     9f0:	82 1b       	sub	r24, r18
     9f2:	80 93 a4 05 	sts	0x05A4, r24	; 0x8005a4 <draw_data+0xd>
	}while(u8g2_NextPage(&u8g2));*/
	
	
	
	
	u8g2_ClearBuffer(&u8g2);
     9f6:	8d ee       	ldi	r24, 0xED	; 237
     9f8:	95 e0       	ldi	r25, 0x05	; 5
     9fa:	0e 94 50 08 	call	0x10a0	; 0x10a0 <u8g2_ClearBuffer>
	
	
	u8g2_SetFontMode(&u8g2, 0);
     9fe:	60 e0       	ldi	r22, 0x00	; 0
     a00:	8d ee       	ldi	r24, 0xED	; 237
     a02:	95 e0       	ldi	r25, 0x05	; 5
     a04:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&u8g2, 1);
     a08:	61 e0       	ldi	r22, 0x01	; 1
     a0a:	8d ee       	ldi	r24, 0xED	; 237
     a0c:	95 e0       	ldi	r25, 0x05	; 5
     a0e:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <u8g2_SetDrawColor>
	
	u8g2_DrawLine(&u8g2, draw_data.line1_x1, draw_data.line1_y1, draw_data.line1_x2, draw_data.line1_y2);
     a12:	00 91 9a 05 	lds	r16, 0x059A	; 0x80059a <draw_data+0x3>
     a16:	20 91 99 05 	lds	r18, 0x0599	; 0x800599 <draw_data+0x2>
     a1a:	40 91 98 05 	lds	r20, 0x0598	; 0x800598 <draw_data+0x1>
     a1e:	60 91 97 05 	lds	r22, 0x0597	; 0x800597 <draw_data>
     a22:	8d ee       	ldi	r24, 0xED	; 237
     a24:	95 e0       	ldi	r25, 0x05	; 5
     a26:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <u8g2_DrawLine>
	u8g2_DrawLine(&u8g2, draw_data.line2_x1, draw_data.line2_y1, draw_data.line2_x2, draw_data.line2_y2);
     a2a:	00 91 9e 05 	lds	r16, 0x059E	; 0x80059e <draw_data+0x7>
     a2e:	20 91 9d 05 	lds	r18, 0x059D	; 0x80059d <draw_data+0x6>
     a32:	40 91 9c 05 	lds	r20, 0x059C	; 0x80059c <draw_data+0x5>
     a36:	60 91 9b 05 	lds	r22, 0x059B	; 0x80059b <draw_data+0x4>
     a3a:	8d ee       	ldi	r24, 0xED	; 237
     a3c:	95 e0       	ldi	r25, 0x05	; 5
     a3e:	0e 94 41 0f 	call	0x1e82	; 0x1e82 <u8g2_DrawLine>
	u8g2_DrawCircle(&u8g2, draw_data.circle1_x, draw_data.circle1_y, draw_data.circle1_r, draw_data.circle1_m);
     a42:	00 91 a2 05 	lds	r16, 0x05A2	; 0x8005a2 <draw_data+0xb>
     a46:	20 91 a1 05 	lds	r18, 0x05A1	; 0x8005a1 <draw_data+0xa>
     a4a:	40 91 a0 05 	lds	r20, 0x05A0	; 0x8005a0 <draw_data+0x9>
     a4e:	60 91 9f 05 	lds	r22, 0x059F	; 0x80059f <draw_data+0x8>
     a52:	8d ee       	ldi	r24, 0xED	; 237
     a54:	95 e0       	ldi	r25, 0x05	; 5
     a56:	0e 94 cb 08 	call	0x1196	; 0x1196 <u8g2_DrawCircle>
	u8g2_DrawFrame(&u8g2, 10 + 50, 10, 32, 32);
     a5a:	00 e2       	ldi	r16, 0x20	; 32
     a5c:	20 e2       	ldi	r18, 0x20	; 32
     a5e:	4a e0       	ldi	r20, 0x0A	; 10
     a60:	6c e3       	ldi	r22, 0x3C	; 60
     a62:	8d ee       	ldi	r24, 0xED	; 237
     a64:	95 e0       	ldi	r25, 0x05	; 5
     a66:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_DrawFrame>
	
	u8g2_DrawFrame(&u8g2, 122, 0, 6, 64);
     a6a:	00 e4       	ldi	r16, 0x40	; 64
     a6c:	26 e0       	ldi	r18, 0x06	; 6
     a6e:	40 e0       	ldi	r20, 0x00	; 0
     a70:	6a e7       	ldi	r22, 0x7A	; 122
     a72:	8d ee       	ldi	r24, 0xED	; 237
     a74:	95 e0       	ldi	r25, 0x05	; 5
     a76:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_DrawFrame>
	u8g2_DrawBox(&u8g2, draw_data.box1_x, draw_data.box1_y, draw_data.box1_w, draw_data.box1_h);
     a7a:	00 91 a6 05 	lds	r16, 0x05A6	; 0x8005a6 <draw_data+0xf>
     a7e:	20 91 a5 05 	lds	r18, 0x05A5	; 0x8005a5 <draw_data+0xe>
     a82:	40 91 a4 05 	lds	r20, 0x05A4	; 0x8005a4 <draw_data+0xd>
     a86:	60 91 a3 05 	lds	r22, 0x05A3	; 0x8005a3 <draw_data+0xc>
     a8a:	8d ee       	ldi	r24, 0xED	; 237
     a8c:	95 e0       	ldi	r25, 0x05	; 5
     a8e:	0e 94 99 07 	call	0xf32	; 0xf32 <u8g2_DrawBox>
	
	u8g2_SetFont(&u8g2, u8g2_font_4x6_mf);
     a92:	68 e6       	ldi	r22, 0x68	; 104
     a94:	70 e0       	ldi	r23, 0x00	; 0
     a96:	8d ee       	ldi	r24, 0xED	; 237
     a98:	95 e0       	ldi	r25, 0x05	; 5
     a9a:	0e 94 96 0d 	call	0x1b2c	; 0x1b2c <u8g2_SetFont>
	
	u8g2_DrawStr(&u8g2, 0, 5, draw_data.buf1);
     a9e:	27 ea       	ldi	r18, 0xA7	; 167
     aa0:	35 e0       	ldi	r19, 0x05	; 5
     aa2:	45 e0       	ldi	r20, 0x05	; 5
     aa4:	60 e0       	ldi	r22, 0x00	; 0
     aa6:	8d ee       	ldi	r24, 0xED	; 237
     aa8:	95 e0       	ldi	r25, 0x05	; 5
     aaa:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, 11, draw_data.buf2);
     aae:	21 eb       	ldi	r18, 0xB1	; 177
     ab0:	35 e0       	ldi	r19, 0x05	; 5
     ab2:	4b e0       	ldi	r20, 0x0B	; 11
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	8d ee       	ldi	r24, 0xED	; 237
     ab8:	95 e0       	ldi	r25, 0x05	; 5
     aba:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, 17, draw_data.buf3);
     abe:	2b eb       	ldi	r18, 0xBB	; 187
     ac0:	35 e0       	ldi	r19, 0x05	; 5
     ac2:	41 e1       	ldi	r20, 0x11	; 17
     ac4:	60 e0       	ldi	r22, 0x00	; 0
     ac6:	8d ee       	ldi	r24, 0xED	; 237
     ac8:	95 e0       	ldi	r25, 0x05	; 5
     aca:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, 23, draw_data.buf4);
     ace:	2f ec       	ldi	r18, 0xCF	; 207
     ad0:	35 e0       	ldi	r19, 0x05	; 5
     ad2:	47 e1       	ldi	r20, 0x17	; 23
     ad4:	60 e0       	ldi	r22, 0x00	; 0
     ad6:	8d ee       	ldi	r24, 0xED	; 237
     ad8:	95 e0       	ldi	r25, 0x05	; 5
     ada:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 0, 29, draw_data.buf5);
     ade:	23 ee       	ldi	r18, 0xE3	; 227
     ae0:	35 e0       	ldi	r19, 0x05	; 5
     ae2:	4d e1       	ldi	r20, 0x1D	; 29
     ae4:	60 e0       	ldi	r22, 0x00	; 0
     ae6:	8d ee       	ldi	r24, 0xED	; 237
     ae8:	95 e0       	ldi	r25, 0x05	; 5
     aea:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	
	if(contextPtr->persistant_alarms[0] != alarm_stop){
     aee:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <contextPtr>
     af2:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <contextPtr+0x1>
     af6:	82 85       	ldd	r24, Z+10	; 0x0a
     af8:	0f b6       	in	r0, 0x3f	; 63
     afa:	f8 94       	cli
     afc:	de bf       	out	0x3e, r29	; 62
     afe:	0f be       	out	0x3f, r0	; 63
     b00:	cd bf       	out	0x3d, r28	; 61
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
     b02:	09 e0       	ldi	r16, 0x09	; 9
     b04:	27 e1       	ldi	r18, 0x17	; 23
     b06:	4f e1       	ldi	r20, 0x1F	; 31
     b08:	60 e0       	ldi	r22, 0x00	; 0
	u8g2_DrawStr(&u8g2, 0, 11, draw_data.buf2);
	u8g2_DrawStr(&u8g2, 0, 17, draw_data.buf3);
	u8g2_DrawStr(&u8g2, 0, 23, draw_data.buf4);
	u8g2_DrawStr(&u8g2, 0, 29, draw_data.buf5);
	
	if(contextPtr->persistant_alarms[0] != alarm_stop){
     b0a:	88 23       	and	r24, r24
     b0c:	09 f4       	brne	.+2      	; 0xb10 <__stack+0x211>
     b0e:	91 c0       	rjmp	.+290    	; 0xc32 <__stack+0x333>
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
     b10:	8d ee       	ldi	r24, 0xED	; 237
     b12:	95 e0       	ldi	r25, 0x05	; 5
     b14:	0e 94 99 07 	call	0xf32	; 0xf32 <u8g2_DrawBox>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 31, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[1] != alarm_stop){
     b18:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <contextPtr>
     b1c:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <contextPtr+0x1>
     b20:	83 85       	ldd	r24, Z+11	; 0x0b
		u8g2_DrawBox(&u8g2, 0, 39, 23, 9);
     b22:	09 e0       	ldi	r16, 0x09	; 9
     b24:	27 e1       	ldi	r18, 0x17	; 23
     b26:	47 e2       	ldi	r20, 0x27	; 39
     b28:	60 e0       	ldi	r22, 0x00	; 0
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 31, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[1] != alarm_stop){
     b2a:	88 23       	and	r24, r24
     b2c:	09 f4       	brne	.+2      	; 0xb30 <__stack+0x231>
     b2e:	7c c0       	rjmp	.+248    	; 0xc28 <__stack+0x329>
		u8g2_DrawBox(&u8g2, 0, 39, 23, 9);
     b30:	8d ee       	ldi	r24, 0xED	; 237
     b32:	95 e0       	ldi	r25, 0x05	; 5
     b34:	0e 94 99 07 	call	0xf32	; 0xf32 <u8g2_DrawBox>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 39, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[2] != alarm_stop){
     b38:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <contextPtr>
     b3c:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <contextPtr+0x1>
     b40:	84 85       	ldd	r24, Z+12	; 0x0c
     b42:	88 23       	and	r24, r24
     b44:	09 f4       	brne	.+2      	; 0xb48 <__stack+0x249>
     b46:	67 c0       	rjmp	.+206    	; 0xc16 <__stack+0x317>
		u8g2_DrawBox(&u8g2, 0, 47, 23, 8);
     b48:	08 e0       	ldi	r16, 0x08	; 8
     b4a:	27 e1       	ldi	r18, 0x17	; 23
     b4c:	4f e2       	ldi	r20, 0x2F	; 47
     b4e:	60 e0       	ldi	r22, 0x00	; 0
     b50:	8d ee       	ldi	r24, 0xED	; 237
     b52:	95 e0       	ldi	r25, 0x05	; 5
     b54:	0e 94 99 07 	call	0xf32	; 0xf32 <u8g2_DrawBox>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[3] != alarm_stop){
     b58:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <contextPtr>
     b5c:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <contextPtr+0x1>
     b60:	85 85       	ldd	r24, Z+13	; 0x0d
		u8g2_DrawBox(&u8g2, 0, 55, 23, 9);
     b62:	09 e0       	ldi	r16, 0x09	; 9
     b64:	27 e1       	ldi	r18, 0x17	; 23
     b66:	47 e3       	ldi	r20, 0x37	; 55
     b68:	60 e0       	ldi	r22, 0x00	; 0
		u8g2_DrawBox(&u8g2, 0, 47, 23, 8);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[3] != alarm_stop){
     b6a:	81 11       	cpse	r24, r1
     b6c:	6f c0       	rjmp	.+222    	; 0xc4c <__stack+0x34d>
		u8g2_DrawBox(&u8g2, 0, 55, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 55, 23, 9);
     b6e:	8d ee       	ldi	r24, 0xED	; 237
     b70:	95 e0       	ldi	r25, 0x05	; 5
     b72:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_DrawFrame>
	}
	
	u8g2_SetFontMode(&u8g2, 1);
     b76:	61 e0       	ldi	r22, 0x01	; 1
     b78:	8d ee       	ldi	r24, 0xED	; 237
     b7a:	95 e0       	ldi	r25, 0x05	; 5
     b7c:	0e 94 82 0d 	call	0x1b04	; 0x1b04 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&u8g2, 2);
     b80:	62 e0       	ldi	r22, 0x02	; 2
     b82:	8d ee       	ldi	r24, 0xED	; 237
     b84:	95 e0       	ldi	r25, 0x05	; 5
     b86:	0e 94 18 0f 	call	0x1e30	; 0x1e30 <u8g2_SetDrawColor>
	
	u8g2_DrawStr(&u8g2, 2, 38, "TEST0");
     b8a:	22 e4       	ldi	r18, 0x42	; 66
     b8c:	31 e0       	ldi	r19, 0x01	; 1
     b8e:	46 e2       	ldi	r20, 0x26	; 38
     b90:	62 e0       	ldi	r22, 0x02	; 2
     b92:	8d ee       	ldi	r24, 0xED	; 237
     b94:	95 e0       	ldi	r25, 0x05	; 5
     b96:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 2, 46, "TEST1");
     b9a:	28 e4       	ldi	r18, 0x48	; 72
     b9c:	31 e0       	ldi	r19, 0x01	; 1
     b9e:	4e e2       	ldi	r20, 0x2E	; 46
     ba0:	62 e0       	ldi	r22, 0x02	; 2
     ba2:	8d ee       	ldi	r24, 0xED	; 237
     ba4:	95 e0       	ldi	r25, 0x05	; 5
     ba6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 2, 54, "TEST2");
     baa:	2e e4       	ldi	r18, 0x4E	; 78
     bac:	31 e0       	ldi	r19, 0x01	; 1
     bae:	46 e3       	ldi	r20, 0x36	; 54
     bb0:	62 e0       	ldi	r22, 0x02	; 2
     bb2:	8d ee       	ldi	r24, 0xED	; 237
     bb4:	95 e0       	ldi	r25, 0x05	; 5
     bb6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 2, 62, "TEST3");
     bba:	24 e5       	ldi	r18, 0x54	; 84
     bbc:	31 e0       	ldi	r19, 0x01	; 1
     bbe:	4e e3       	ldi	r20, 0x3E	; 62
     bc0:	62 e0       	ldi	r22, 0x02	; 2
     bc2:	8d ee       	ldi	r24, 0xED	; 237
     bc4:	95 e0       	ldi	r25, 0x05	; 5
     bc6:	0e 94 87 0d 	call	0x1b0e	; 0x1b0e <u8g2_DrawStr>
	
	
	
	u8g2_SendBuffer(&u8g2);
     bca:	8d ee       	ldi	r24, 0xED	; 237
     bcc:	95 e0       	ldi	r25, 0x05	; 5
	
	
     bce:	26 96       	adiw	r28, 0x06	; 6
     bd0:	0f b6       	in	r0, 0x3f	; 63
     bd2:	f8 94       	cli
     bd4:	de bf       	out	0x3e, r29	; 62
     bd6:	0f be       	out	0x3f, r0	; 63
     bd8:	cd bf       	out	0x3d, r28	; 61
     bda:	df 91       	pop	r29
     bdc:	cf 91       	pop	r28
     bde:	1f 91       	pop	r17
     be0:	0f 91       	pop	r16
     be2:	ff 90       	pop	r15
     be4:	ef 90       	pop	r14
     be6:	df 90       	pop	r13
     be8:	cf 90       	pop	r12
     bea:	bf 90       	pop	r11
     bec:	af 90       	pop	r10
     bee:	9f 90       	pop	r9
	u8g2_DrawStr(&u8g2, 2, 54, "TEST2");
	u8g2_DrawStr(&u8g2, 2, 62, "TEST3");
	
	
	
	u8g2_SendBuffer(&u8g2);
     bf0:	0c 94 65 08 	jmp	0x10ca	; 0x10ca <u8g2_SendBuffer>
	if(x_calc > 255){
		x_calc = 255;
	}
	uint16_t y_calc = abs((adc_buffer.y / 2) - 255);
	if(y_calc > 255){
		y_calc = 255;
     bf4:	aa 24       	eor	r10, r10
     bf6:	aa 94       	dec	r10
     bf8:	91 2c       	mov	r9, r1
     bfa:	60 ce       	rjmp	.-832    	; 0x8bc <app_gui+0x78>
	// Get the latest ADC data
	adc_data_t adc_buffer = contextPtr->buf_adc_data;
	
	uint16_t x_calc = abs((adc_buffer.x / 2) - 255);
	if(x_calc > 255){
		x_calc = 255;
     bfc:	4f ef       	ldi	r20, 0xFF	; 255
     bfe:	50 e0       	ldi	r21, 0x00	; 0
	}
	uint16_t y_calc = abs((adc_buffer.y / 2) - 255);
     c00:	97 01       	movw	r18, r14
     c02:	36 95       	lsr	r19
     c04:	27 95       	ror	r18
     c06:	2f 5f       	subi	r18, 0xFF	; 255
     c08:	31 09       	sbc	r19, r1
     c0a:	37 ff       	sbrs	r19, 7
     c0c:	50 ce       	rjmp	.-864    	; 0x8ae <app_gui+0x6a>
     c0e:	31 95       	neg	r19
     c10:	21 95       	neg	r18
     c12:	31 09       	sbc	r19, r1
     c14:	4c ce       	rjmp	.-872    	; 0x8ae <app_gui+0x6a>
	}
	
	if(contextPtr->persistant_alarms[2] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 47, 23, 8);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
     c16:	09 e0       	ldi	r16, 0x09	; 9
     c18:	27 e1       	ldi	r18, 0x17	; 23
     c1a:	4f e2       	ldi	r20, 0x2F	; 47
     c1c:	60 e0       	ldi	r22, 0x00	; 0
     c1e:	8d ee       	ldi	r24, 0xED	; 237
     c20:	95 e0       	ldi	r25, 0x05	; 5
     c22:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_DrawFrame>
     c26:	98 cf       	rjmp	.-208    	; 0xb58 <__stack+0x259>
	}
	
	if(contextPtr->persistant_alarms[1] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 39, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 39, 23, 9);
     c28:	8d ee       	ldi	r24, 0xED	; 237
     c2a:	95 e0       	ldi	r25, 0x05	; 5
     c2c:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_DrawFrame>
     c30:	83 cf       	rjmp	.-250    	; 0xb38 <__stack+0x239>
	u8g2_DrawStr(&u8g2, 0, 29, draw_data.buf5);
	
	if(contextPtr->persistant_alarms[0] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 31, 23, 9);
     c32:	8d ee       	ldi	r24, 0xED	; 237
     c34:	95 e0       	ldi	r25, 0x05	; 5
     c36:	0e 94 c1 07 	call	0xf82	; 0xf82 <u8g2_DrawFrame>
     c3a:	6e cf       	rjmp	.-292    	; 0xb18 <__stack+0x219>
	bool move = (abs((adc_buffer.x / 2) - 255) >= 10) || (abs((adc_buffer.y / 2) - 255) >= 10);
	
	snprintf(draw_data.buf3, BUF3_SIZE, "L/R:%3d, DIR:%c", x_calc, x_dir ? 'R' : 'L');
	snprintf(draw_data.buf4, BUF4_SIZE, "F/B:%3d, DIR:%c", y_calc, y_dir ? 'B' : 'F');
	
	snprintf(draw_data.buf5, BUF5_SIZE, "MOVE: %c", move ? 'Y' : 'N');
     c3c:	8e e4       	ldi	r24, 0x4E	; 78
     c3e:	82 ce       	rjmp	.-764    	; 0x944 <__stack+0x45>
	bool y_dir = adc_buffer.y > 511;
	
	bool move = (abs((adc_buffer.x / 2) - 255) >= 10) || (abs((adc_buffer.y / 2) - 255) >= 10);
	
	snprintf(draw_data.buf3, BUF3_SIZE, "L/R:%3d, DIR:%c", x_calc, x_dir ? 'R' : 'L');
	snprintf(draw_data.buf4, BUF4_SIZE, "F/B:%3d, DIR:%c", y_calc, y_dir ? 'B' : 'F');
     c40:	86 e4       	ldi	r24, 0x46	; 70
     c42:	66 ce       	rjmp	.-820    	; 0x910 <__stack+0x11>
	bool x_dir = adc_buffer.x > 511;
	bool y_dir = adc_buffer.y > 511;
	
	bool move = (abs((adc_buffer.x / 2) - 255) >= 10) || (abs((adc_buffer.y / 2) - 255) >= 10);
	
	snprintf(draw_data.buf3, BUF3_SIZE, "L/R:%3d, DIR:%c", x_calc, x_dir ? 'R' : 'L');
     c44:	8c e4       	ldi	r24, 0x4C	; 76
     c46:	48 ce       	rjmp	.-880    	; 0x8d8 <app_gui+0x94>
     c48:	b1 2c       	mov	r11, r1
     c4a:	40 ce       	rjmp	.-896    	; 0x8cc <app_gui+0x88>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[3] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 55, 23, 9);
     c4c:	8d ee       	ldi	r24, 0xED	; 237
     c4e:	95 e0       	ldi	r25, 0x05	; 5
     c50:	0e 94 99 07 	call	0xf32	; 0xf32 <u8g2_DrawBox>
     c54:	90 cf       	rjmp	.-224    	; 0xb76 <__stack+0x277>
void app_gui(){
	/*** Calculate data for UI elements ***/
	// Get the latest ADC data
	adc_data_t adc_buffer = contextPtr->buf_adc_data;
	
	uint16_t x_calc = abs((adc_buffer.x / 2) - 255);
     c56:	91 95       	neg	r25
     c58:	81 95       	neg	r24
     c5a:	91 09       	sbc	r25, r1
     c5c:	1b ce       	rjmp	.-970    	; 0x894 <app_gui+0x50>

00000c5e <app_serial_init>:
context_t *contextPtr;

/*** Apps ***/
void app_serial_init(void *pvParameters){
	// Get Context Pointer
	contextPtr = (context_t * )pvParameters;
     c5e:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <contextPtr+0x1>
     c62:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <contextPtr>
	if(contextPtr == NULL){
     c66:	89 2b       	or	r24, r25
     c68:	71 f0       	breq	.+28     	; 0xc86 <app_serial_init+0x28>
	}
	
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) __attribute__((always_inline));
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) // UCSRC_reg can be used to set other than 8n1 transmission
	{
		UCSR0C_REGISTER = UCSRC_reg;
     c6a:	86 e0       	ldi	r24, 0x06	; 6
     c6c:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     c70:	80 e1       	ldi	r24, 0x10	; 16
     c72:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     c76:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
		
	#ifdef USART0_U2X_SPEED
		#ifdef USART0_MPCM_MODE
			UCSR0A_REGISTER = (1<<U2X0_BIT)|(1<<MPCM0_BIT);
		#else
			UCSR0A_REGISTER = (1<<U2X0_BIT); // enable double speed
     c7a:	82 e0       	ldi	r24, 0x02	; 2
     c7c:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     c80:	88 e9       	ldi	r24, 0x98	; 152
     c82:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     c86:	08 95       	ret

00000c88 <app_serial>:
	// Init Serial Driver
	uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE);
	uart_init(DOUBLE_BAUD_CALC(115200));
};

void app_serial(){
     c88:	0f 93       	push	r16
     c8a:	1f 93       	push	r17
     c8c:	cf 93       	push	r28
     c8e:	df 93       	push	r29
     c90:	cd b7       	in	r28, 0x3d	; 61
     c92:	de b7       	in	r29, 0x3e	; 62
     c94:	e8 97       	sbiw	r28, 0x38	; 56
     c96:	0f b6       	in	r0, 0x3f	; 63
     c98:	f8 94       	cli
     c9a:	de bf       	out	0x3e, r29	; 62
     c9c:	0f be       	out	0x3f, r0	; 63
     c9e:	cd bf       	out	0x3d, r28	; 61
	// Utility Buffers
	char buffer[50];
	
	// Receive ADC data buffer
	adc_data_t adc_buffer = contextPtr->buf_adc_data;
     ca0:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <contextPtr>
     ca4:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <contextPtr+0x1>
     ca8:	86 e0       	ldi	r24, 0x06	; 6
     caa:	de 01       	movw	r26, r28
     cac:	d3 96       	adiw	r26, 0x33	; 51
     cae:	01 90       	ld	r0, Z+
     cb0:	0d 92       	st	X+, r0
     cb2:	8a 95       	dec	r24
     cb4:	e1 f7       	brne	.-8      	; 0xcae <app_serial+0x26>
	snprintf(buffer, 50, "Vin: %4d, X: %4d, Y: %4d\n\r", adc_buffer.vin, adc_buffer.x, adc_buffer.y);
     cb6:	8e a9       	ldd	r24, Y+54	; 0x36
     cb8:	8f 93       	push	r24
     cba:	8d a9       	ldd	r24, Y+53	; 0x35
     cbc:	8f 93       	push	r24
     cbe:	8c a9       	ldd	r24, Y+52	; 0x34
     cc0:	8f 93       	push	r24
     cc2:	8b a9       	ldd	r24, Y+51	; 0x33
     cc4:	8f 93       	push	r24
     cc6:	88 ad       	ldd	r24, Y+56	; 0x38
     cc8:	8f 93       	push	r24
     cca:	8f a9       	ldd	r24, Y+55	; 0x37
     ccc:	8f 93       	push	r24
     cce:	8a e5       	ldi	r24, 0x5A	; 90
     cd0:	91 e0       	ldi	r25, 0x01	; 1
     cd2:	9f 93       	push	r25
     cd4:	8f 93       	push	r24
     cd6:	1f 92       	push	r1
     cd8:	82 e3       	ldi	r24, 0x32	; 50
     cda:	8f 93       	push	r24
     cdc:	8e 01       	movw	r16, r28
     cde:	0f 5f       	subi	r16, 0xFF	; 255
     ce0:	1f 4f       	sbci	r17, 0xFF	; 255
     ce2:	1f 93       	push	r17
     ce4:	0f 93       	push	r16
     ce6:	0e 94 3a 15 	call	0x2a74	; 0x2a74 <snprintf>
	uart_puts(buffer);
     cea:	c8 01       	movw	r24, r16
     cec:	0e 94 25 07 	call	0xe4a	; 0xe4a <uart0_putstr>
     cf0:	0f b6       	in	r0, 0x3f	; 63
     cf2:	f8 94       	cli
     cf4:	de bf       	out	0x3e, r29	; 62
     cf6:	0f be       	out	0x3f, r0	; 63
     cf8:	cd bf       	out	0x3d, r28	; 61
     cfa:	e8 96       	adiw	r28, 0x38	; 56
     cfc:	0f b6       	in	r0, 0x3f	; 63
     cfe:	f8 94       	cli
     d00:	de bf       	out	0x3e, r29	; 62
     d02:	0f be       	out	0x3f, r0	; 63
     d04:	cd bf       	out	0x3d, r28	; 61
     d06:	df 91       	pop	r29
     d08:	cf 91       	pop	r28
     d0a:	1f 91       	pop	r17
     d0c:	0f 91       	pop	r16
     d0e:	08 95       	ret

00000d10 <app_speaker_init>:
}

/*** Apps ***/
void app_speaker_init(void *pvParameters){
	// Get Context Pointer
	contextPtr = (context_t * )pvParameters;
     d10:	90 93 96 05 	sts	0x0596, r25	; 0x800596 <contextPtr+0x1>
     d14:	80 93 95 05 	sts	0x0595, r24	; 0x800595 <contextPtr>
     d18:	08 95       	ret

00000d1a <app_speaker>:
	if(contextPtr == NULL){
		return;
	}
}

void app_speaker(){
     d1a:	e0 91 95 05 	lds	r30, 0x0595	; 0x800595 <contextPtr>
     d1e:	f0 91 96 05 	lds	r31, 0x0596	; 0x800596 <contextPtr+0x1>
	// Check for alarms
	bool alarm_present;
	for(uint8_t varLoop = 0; varLoop < PERSISTANT_ALARMS_SIZE; varLoop++){
		if(contextPtr->persistant_alarms[varLoop] != alarm_stop){
     d22:	82 85       	ldd	r24, Z+10	; 0x0a
     d24:	81 11       	cpse	r24, r1
     d26:	0c c0       	rjmp	.+24     	; 0xd40 <app_speaker+0x26>
     d28:	83 85       	ldd	r24, Z+11	; 0x0b
     d2a:	81 11       	cpse	r24, r1
     d2c:	25 c0       	rjmp	.+74     	; 0xd78 <app_speaker+0x5e>
     d2e:	84 85       	ldd	r24, Z+12	; 0x0c
     d30:	81 11       	cpse	r24, r1
     d32:	25 c0       	rjmp	.+74     	; 0xd7e <app_speaker+0x64>
     d34:	85 85       	ldd	r24, Z+13	; 0x0d
     d36:	81 11       	cpse	r24, r1
     d38:	25 c0       	rjmp	.+74     	; 0xd84 <app_speaker+0x6a>
		TCNT2 = 0;
		TIMSK2 = 0;
		TCCR2A = 0b00100011;
		TCCR2B = 0b00001110;
		}else{
		TCCR2B = 0;
     d3a:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     d3e:	08 95       	ret

void app_speaker(){
	// Check for alarms
	bool alarm_present;
	for(uint8_t varLoop = 0; varLoop < PERSISTANT_ALARMS_SIZE; varLoop++){
		if(contextPtr->persistant_alarms[varLoop] != alarm_stop){
     d40:	80 e0       	ldi	r24, 0x00	; 0
     d42:	90 e0       	ldi	r25, 0x00	; 0
			alarm_present = true;
			setBuzzer(contextPtr->persistant_alarms[varLoop]);
     d44:	e8 0f       	add	r30, r24
     d46:	f9 1f       	adc	r31, r25
     d48:	82 85       	ldd	r24, Z+10	; 0x0a
context_t *contextPtr;

/*** Support Functions ***/
// Set timer 2 to output a waveform
void setBuzzer(uint16_t val){
	val = val * 2;
     d4a:	90 e0       	ldi	r25, 0x00	; 0
     d4c:	88 0f       	add	r24, r24
     d4e:	99 1f       	adc	r25, r25
	if(val > 0){
     d50:	00 97       	sbiw	r24, 0x00	; 0
     d52:	99 f3       	breq	.-26     	; 0xd3a <app_speaker+0x20>
		DDRD |= (1 << DDD3);
     d54:	53 9a       	sbi	0x0a, 3	; 10
		OCR2A = val;
     d56:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		OCR2B = val / 2;
     d5a:	96 95       	lsr	r25
     d5c:	87 95       	ror	r24
     d5e:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
		TCNT2 = 0;
     d62:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
		TIMSK2 = 0;
     d66:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
		TCCR2A = 0b00100011;
     d6a:	83 e2       	ldi	r24, 0x23	; 35
     d6c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
		TCCR2B = 0b00001110;
     d70:	8e e0       	ldi	r24, 0x0E	; 14
     d72:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>
     d76:	08 95       	ret

void app_speaker(){
	// Check for alarms
	bool alarm_present;
	for(uint8_t varLoop = 0; varLoop < PERSISTANT_ALARMS_SIZE; varLoop++){
		if(contextPtr->persistant_alarms[varLoop] != alarm_stop){
     d78:	81 e0       	ldi	r24, 0x01	; 1
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	e3 cf       	rjmp	.-58     	; 0xd44 <app_speaker+0x2a>
     d7e:	82 e0       	ldi	r24, 0x02	; 2
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	e0 cf       	rjmp	.-64     	; 0xd44 <app_speaker+0x2a>
     d84:	83 e0       	ldi	r24, 0x03	; 3
     d86:	90 e0       	ldi	r25, 0x00	; 0
     d88:	dd cf       	rjmp	.-70     	; 0xd44 <app_speaker+0x2a>

00000d8a <adc_set_channel>:
	adc_finish = false;
}

// Enable the ADC
void adc_disable(){
	ADCSRA |= 1 << ADEN;
     d8a:	ec e7       	ldi	r30, 0x7C	; 124
     d8c:	f0 e0       	ldi	r31, 0x00	; 0
     d8e:	90 81       	ld	r25, Z
     d90:	90 7f       	andi	r25, 0xF0	; 240
     d92:	28 2f       	mov	r18, r24
     d94:	2f 70       	andi	r18, 0x0F	; 15
     d96:	92 2b       	or	r25, r18
     d98:	90 83       	st	Z, r25
     d9a:	21 e0       	ldi	r18, 0x01	; 1
     d9c:	30 e0       	ldi	r19, 0x00	; 0
     d9e:	a9 01       	movw	r20, r18
     da0:	02 c0       	rjmp	.+4      	; 0xda6 <adc_set_channel+0x1c>
     da2:	44 0f       	add	r20, r20
     da4:	55 1f       	adc	r21, r21
     da6:	8a 95       	dec	r24
     da8:	e2 f7       	brpl	.-8      	; 0xda2 <adc_set_channel+0x18>
     daa:	ca 01       	movw	r24, r20
     dac:	8f 73       	andi	r24, 0x3F	; 63
     dae:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     db2:	08 95       	ret

00000db4 <adc_set_refs>:
     db4:	ec e7       	ldi	r30, 0x7C	; 124
     db6:	f0 e0       	ldi	r31, 0x00	; 0
     db8:	20 81       	ld	r18, Z
     dba:	20 7c       	andi	r18, 0xC0	; 192
     dbc:	30 e4       	ldi	r19, 0x40	; 64
     dbe:	83 9f       	mul	r24, r19
     dc0:	c0 01       	movw	r24, r0
     dc2:	11 24       	eor	r1, r1
     dc4:	82 2b       	or	r24, r18
     dc6:	80 83       	st	Z, r24
     dc8:	08 95       	ret

00000dca <adc_set_adps>:
     dca:	ea e7       	ldi	r30, 0x7A	; 122
     dcc:	f0 e0       	ldi	r31, 0x00	; 0
     dce:	90 81       	ld	r25, Z
     dd0:	98 7f       	andi	r25, 0xF8	; 248
     dd2:	87 70       	andi	r24, 0x07	; 7
     dd4:	89 2b       	or	r24, r25
     dd6:	80 83       	st	Z, r24
     dd8:	08 95       	ret

00000dda <adc_start_single>:
     dda:	ea e7       	ldi	r30, 0x7A	; 122
     ddc:	f0 e0       	ldi	r31, 0x00	; 0
     dde:	80 81       	ld	r24, Z
     de0:	87 70       	andi	r24, 0x07	; 7
     de2:	88 6c       	ori	r24, 0xC8	; 200
     de4:	80 83       	st	Z, r24
     de6:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
     dea:	08 95       	ret

00000dec <adc_enable>:
}

// Disable the ADC
void adc_enable(){
	ADCSRA &= ~(1 << ADEN);
     dec:	ea e7       	ldi	r30, 0x7A	; 122
     dee:	f0 e0       	ldi	r31, 0x00	; 0
     df0:	80 81       	ld	r24, Z
     df2:	8f 77       	andi	r24, 0x7F	; 127
     df4:	80 83       	st	Z, r24
     df6:	08 95       	ret

00000df8 <adc_is_finished>:
}

// Get if a conversion has finished
bool adc_is_finished(){
	return adc_finish;
     df8:	80 91 94 01 	lds	r24, 0x0194	; 0x800194 <__data_end>
}
     dfc:	08 95       	ret

00000dfe <adc_is_converting>:

// Get if a conversion is in progress
bool adc_is_converting(){
	return ADCSRA & (1 << ADSC);
     dfe:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
}
     e02:	86 fb       	bst	r24, 6
     e04:	88 27       	eor	r24, r24
     e06:	80 f9       	bld	r24, 0
     e08:	08 95       	ret

00000e0a <adc_get_value>:

// Get the current ADC value.
uint16_t adc_get_value(){
	adc_finish = false;	// Reset the flag
     e0a:	10 92 94 01 	sts	0x0194, r1	; 0x800194 <__data_end>
	return adc_value;	// Return the ADC Value
     e0e:	80 91 52 06 	lds	r24, 0x0652	; 0x800652 <adc_value>
     e12:	90 91 53 06 	lds	r25, 0x0653	; 0x800653 <adc_value+0x1>
}
     e16:	08 95       	ret

00000e18 <__vector_21>:

// ISRs
ISR(ADC_vect){	// ADC Interrupt
     e18:	1f 92       	push	r1
     e1a:	0f 92       	push	r0
     e1c:	0f b6       	in	r0, 0x3f	; 63
     e1e:	0f 92       	push	r0
     e20:	11 24       	eor	r1, r1
     e22:	8f 93       	push	r24
     e24:	9f 93       	push	r25
	adc_value = ADC;
     e26:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     e2a:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     e2e:	90 93 53 06 	sts	0x0653, r25	; 0x800653 <adc_value+0x1>
     e32:	80 93 52 06 	sts	0x0652, r24	; 0x800652 <adc_value>
	adc_finish = true;
     e36:	81 e0       	ldi	r24, 0x01	; 1
     e38:	80 93 94 01 	sts	0x0194, r24	; 0x800194 <__data_end>
     e3c:	9f 91       	pop	r25
     e3e:	8f 91       	pop	r24
     e40:	0f 90       	pop	r0
     e42:	0f be       	out	0x3f, r0	; 63
     e44:	0f 90       	pop	r0
     e46:	1f 90       	pop	r1
     e48:	18 95       	reti

00000e4a <uart0_putstr>:
//Return    : Next byte in buffer.
//******************************************************************
	uint8_t uart0_peek(void)
	{
		return rx0_buffer[(rx0_Tail+1) & RX0_BUFFER_MASK];
	}
     e4a:	fc 01       	movw	r30, r24
     e4c:	20 81       	ld	r18, Z
     e4e:	22 23       	and	r18, r18
     e50:	e1 f0       	breq	.+56     	; 0xe8a <uart0_putstr+0x40>
     e52:	dc 01       	movw	r26, r24
     e54:	11 96       	adiw	r26, 0x01	; 1
     e56:	90 91 96 06 	lds	r25, 0x0696	; 0x800696 <tx0_Head>
     e5a:	9f 5f       	subi	r25, 0xFF	; 255
     e5c:	9f 73       	andi	r25, 0x3F	; 63
     e5e:	80 91 95 06 	lds	r24, 0x0695	; 0x800695 <tx0_Tail>
     e62:	98 17       	cp	r25, r24
     e64:	e1 f3       	breq	.-8      	; 0xe5e <uart0_putstr+0x14>
     e66:	e9 2f       	mov	r30, r25
     e68:	f0 e0       	ldi	r31, 0x00	; 0
     e6a:	eb 5a       	subi	r30, 0xAB	; 171
     e6c:	f9 4f       	sbci	r31, 0xF9	; 249
     e6e:	20 83       	st	Z, r18
     e70:	8f b7       	in	r24, 0x3f	; 63
     e72:	f8 94       	cli
     e74:	90 93 96 06 	sts	0x0696, r25	; 0x800696 <tx0_Head>
     e78:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     e7c:	90 62       	ori	r25, 0x20	; 32
     e7e:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     e82:	8f bf       	out	0x3f, r24	; 63
     e84:	2d 91       	ld	r18, X+
     e86:	21 11       	cpse	r18, r1
     e88:	e6 cf       	rjmp	.-52     	; 0xe56 <uart0_putstr+0xc>
     e8a:	08 95       	ret

00000e8c <__vector_19>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     e8c:	0f 93       	push	r16
     e8e:	0f b7       	in	r16, 0x3f	; 63
     e90:	ef 93       	push	r30
     e92:	ff 93       	push	r31
     e94:	e0 91 95 06 	lds	r30, 0x0695	; 0x800695 <tx0_Tail>
     e98:	f0 91 96 06 	lds	r31, 0x0696	; 0x800696 <tx0_Head>
     e9c:	e3 95       	inc	r30
     e9e:	ef 73       	andi	r30, 0x3F	; 63
     ea0:	ef 13       	cpse	r30, r31
     ea2:	05 c0       	rjmp	.+10     	; 0xeae <USART0_TX_CONTINUE>
     ea4:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     ea8:	ff 7d       	andi	r31, 0xDF	; 223
     eaa:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

00000eae <USART0_TX_CONTINUE>:
     eae:	e0 93 95 06 	sts	0x0695, r30	; 0x800695 <tx0_Tail>
     eb2:	f0 e0       	ldi	r31, 0x00	; 0
     eb4:	eb 5a       	subi	r30, 0xAB	; 171
     eb6:	f9 4f       	sbci	r31, 0xF9	; 249
     eb8:	e0 81       	ld	r30, Z
     eba:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

00000ebe <USART0_TX_EXIT>:
     ebe:	ff 91       	pop	r31
     ec0:	ef 91       	pop	r30
     ec2:	0f bf       	out	0x3f, r16	; 63
     ec4:	0f 91       	pop	r16
     ec6:	18 95       	reti

00000ec8 <__vector_18>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     ec8:	0f 93       	push	r16
     eca:	0f b7       	in	r16, 0x3f	; 63
     ecc:	9f 93       	push	r25
     ece:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     ed2:	ef 93       	push	r30
     ed4:	ff 93       	push	r31
     ed6:	e0 91 54 06 	lds	r30, 0x0654	; 0x800654 <rx0_Head>
     eda:	f0 91 17 07 	lds	r31, 0x0717	; 0x800717 <rx0_Tail>
     ede:	e3 95       	inc	r30
     ee0:	ef 77       	andi	r30, 0x7F	; 127
     ee2:	fe 17       	cp	r31, r30
     ee4:	31 f0       	breq	.+12     	; 0xef2 <USART0_RX_EXIT>
     ee6:	e0 93 54 06 	sts	0x0654, r30	; 0x800654 <rx0_Head>
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	e9 56       	subi	r30, 0x69	; 105
     eee:	f9 4f       	sbci	r31, 0xF9	; 249
     ef0:	90 83       	st	Z, r25

00000ef2 <USART0_RX_EXIT>:
     ef2:	ff 91       	pop	r31
     ef4:	ef 91       	pop	r30
     ef6:	9f 91       	pop	r25
     ef8:	0f bf       	out	0x3f, r16	; 63
     efa:	0f 91       	pop	r16
     efc:	18 95       	reti

00000efe <main>:
#include "apps.h"

context_t contextInst;

int main(void){
	app_adc_init(&contextInst);
     efe:	88 e1       	ldi	r24, 0x18	; 24
     f00:	97 e0       	ldi	r25, 0x07	; 7
     f02:	0e 94 74 03 	call	0x6e8	; 0x6e8 <app_adc_init>
	app_gui_init(&contextInst);
     f06:	88 e1       	ldi	r24, 0x18	; 24
     f08:	97 e0       	ldi	r25, 0x07	; 7
     f0a:	0e 94 e9 03 	call	0x7d2	; 0x7d2 <app_gui_init>
	app_speaker_init(&contextInst);
     f0e:	88 e1       	ldi	r24, 0x18	; 24
     f10:	97 e0       	ldi	r25, 0x07	; 7
     f12:	0e 94 88 06 	call	0xd10	; 0xd10 <app_speaker_init>
	app_serial_init(&contextInst);
     f16:	88 e1       	ldi	r24, 0x18	; 24
     f18:	97 e0       	ldi	r25, 0x07	; 7
     f1a:	0e 94 2f 06 	call	0xc5e	; 0xc5e <app_serial_init>
	
	sei();
     f1e:	78 94       	sei
	
	while(true){
		app_adc();
     f20:	0e 94 79 03 	call	0x6f2	; 0x6f2 <app_adc>
		app_gui();
     f24:	0e 94 22 04 	call	0x844	; 0x844 <app_gui>
		app_speaker();
     f28:	0e 94 8d 06 	call	0xd1a	; 0xd1a <app_speaker>
		app_serial();
     f2c:	0e 94 44 06 	call	0xc88	; 0xc88 <app_serial>
     f30:	f7 cf       	rjmp	.-18     	; 0xf20 <main+0x22>

00000f32 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
     f32:	df 92       	push	r13
     f34:	ef 92       	push	r14
     f36:	ff 92       	push	r15
     f38:	0f 93       	push	r16
     f3a:	1f 93       	push	r17
     f3c:	cf 93       	push	r28
     f3e:	df 93       	push	r29
     f40:	7c 01       	movw	r14, r24
     f42:	16 2f       	mov	r17, r22
     f44:	c4 2f       	mov	r28, r20
     f46:	d2 2e       	mov	r13, r18
     f48:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
     f4a:	04 2f       	mov	r16, r20
     f4c:	0d 0f       	add	r16, r29
     f4e:	26 2f       	mov	r18, r22
     f50:	2d 0d       	add	r18, r13
     f52:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <u8g2_IsIntersection>
     f56:	81 11       	cpse	r24, r1
     f58:	0a c0       	rjmp	.+20     	; 0xf6e <u8g2_DrawBox+0x3c>
     f5a:	0b c0       	rjmp	.+22     	; 0xf72 <u8g2_DrawBox+0x40>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
     f5c:	00 e0       	ldi	r16, 0x00	; 0
     f5e:	2d 2d       	mov	r18, r13
     f60:	4c 2f       	mov	r20, r28
     f62:	61 2f       	mov	r22, r17
     f64:	c7 01       	movw	r24, r14
     f66:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
    y++;    
     f6a:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
     f6c:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
     f6e:	d1 11       	cpse	r29, r1
     f70:	f5 cf       	rjmp	.-22     	; 0xf5c <u8g2_DrawBox+0x2a>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
     f72:	df 91       	pop	r29
     f74:	cf 91       	pop	r28
     f76:	1f 91       	pop	r17
     f78:	0f 91       	pop	r16
     f7a:	ff 90       	pop	r15
     f7c:	ef 90       	pop	r14
     f7e:	df 90       	pop	r13
     f80:	08 95       	ret

00000f82 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
     f82:	cf 92       	push	r12
     f84:	df 92       	push	r13
     f86:	ef 92       	push	r14
     f88:	ff 92       	push	r15
     f8a:	0f 93       	push	r16
     f8c:	1f 93       	push	r17
     f8e:	cf 93       	push	r28
     f90:	df 93       	push	r29
     f92:	7c 01       	movw	r14, r24
     f94:	d6 2f       	mov	r29, r22
     f96:	c4 2f       	mov	r28, r20
     f98:	d2 2e       	mov	r13, r18
     f9a:	10 2f       	mov	r17, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
     f9c:	c6 2e       	mov	r12, r22
     f9e:	c2 0e       	add	r12, r18
     fa0:	04 2f       	mov	r16, r20
     fa2:	01 0f       	add	r16, r17
     fa4:	2c 2d       	mov	r18, r12
     fa6:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <u8g2_IsIntersection>
     faa:	81 11       	cpse	r24, r1
     fac:	09 c0       	rjmp	.+18     	; 0xfc0 <u8g2_DrawFrame+0x3e>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
      y+=h;
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
  }
}
     fae:	df 91       	pop	r29
     fb0:	cf 91       	pop	r28
     fb2:	1f 91       	pop	r17
     fb4:	0f 91       	pop	r16
     fb6:	ff 90       	pop	r15
     fb8:	ef 90       	pop	r14
     fba:	df 90       	pop	r13
     fbc:	cf 90       	pop	r12
     fbe:	08 95       	ret
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
     fc0:	00 e0       	ldi	r16, 0x00	; 0
     fc2:	2d 2d       	mov	r18, r13
     fc4:	4c 2f       	mov	r20, r28
     fc6:	6d 2f       	mov	r22, r29
     fc8:	c7 01       	movw	r24, r14
     fca:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
  if (h >= 2) {
     fce:	12 30       	cpi	r17, 0x02	; 2
     fd0:	70 f3       	brcs	.-36     	; 0xfae <u8g2_DrawFrame+0x2c>
    h-=2;
     fd2:	12 50       	subi	r17, 0x02	; 2
    y++;
     fd4:	cf 5f       	subi	r28, 0xFF	; 255
    if (h > 0) {
     fd6:	11 11       	cpse	r17, r1
     fd8:	08 c0       	rjmp	.+16     	; 0xfea <u8g2_DrawFrame+0x68>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
      y+=h;
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
     fda:	00 e0       	ldi	r16, 0x00	; 0
     fdc:	2d 2d       	mov	r18, r13
     fde:	4c 2f       	mov	r20, r28
     fe0:	6d 2f       	mov	r22, r29
     fe2:	c7 01       	movw	r24, r14
     fe4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
     fe8:	e2 cf       	rjmp	.-60     	; 0xfae <u8g2_DrawFrame+0x2c>
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
  if (h >= 2) {
    h-=2;
    y++;
    if (h > 0) {
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
     fea:	01 e0       	ldi	r16, 0x01	; 1
     fec:	21 2f       	mov	r18, r17
     fee:	4c 2f       	mov	r20, r28
     ff0:	6d 2f       	mov	r22, r29
     ff2:	c7 01       	movw	r24, r14
     ff4:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
     ff8:	6f ef       	ldi	r22, 0xFF	; 255
     ffa:	6c 0d       	add	r22, r12
     ffc:	21 2f       	mov	r18, r17
     ffe:	4c 2f       	mov	r20, r28
    1000:	c7 01       	movw	r24, r14
    1002:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
      y+=h;
    1006:	c1 0f       	add	r28, r17
    1008:	e8 cf       	rjmp	.-48     	; 0xfda <u8g2_DrawFrame+0x58>

0000100a <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    100a:	af 92       	push	r10
    100c:	bf 92       	push	r11
    100e:	cf 92       	push	r12
    1010:	df 92       	push	r13
    1012:	ef 92       	push	r14
    1014:	ff 92       	push	r15
    1016:	0f 93       	push	r16
    1018:	1f 93       	push	r17
    101a:	cf 93       	push	r28
    101c:	df 93       	push	r29
    101e:	6c 01       	movw	r12, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    1020:	dc 01       	movw	r26, r24
    1022:	94 96       	adiw	r26, 0x24	; 36
    1024:	bc 90       	ld	r11, X
    1026:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    1028:	95 96       	adiw	r26, 0x25	; 37
    102a:	dc 91       	ld	r29, X
    102c:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    102e:	ed 91       	ld	r30, X+
    1030:	fc 91       	ld	r31, X
    1032:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    1034:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    1036:	e1 2c       	mov	r14, r1
    1038:	f1 2c       	mov	r15, r1
    103a:	08 c0       	rjmp	.+16     	; 0x104c <u8g2_send_buffer+0x42>
    103c:	ff ef       	ldi	r31, 0xFF	; 255
    103e:	ef 1a       	sub	r14, r31
    1040:	ff 0a       	sbc	r15, r31
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
    1042:	ca 15       	cp	r28, r10
    1044:	10 f5       	brcc	.+68     	; 0x108a <u8g2_send_buffer+0x80>
    1046:	d6 01       	movw	r26, r12
    1048:	ed 91       	ld	r30, X+
    104a:	fc 91       	ld	r31, X
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    104c:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    104e:	f6 01       	movw	r30, r12
    1050:	02 a1       	ldd	r16, Z+34	; 0x22
    1052:	13 a1       	ldd	r17, Z+35	; 0x23
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    1054:	42 2f       	mov	r20, r18
    1056:	50 e0       	ldi	r21, 0x00	; 0
    1058:	44 0f       	add	r20, r20
    105a:	55 1f       	adc	r21, r21
    105c:	44 0f       	add	r20, r20
    105e:	55 1f       	adc	r21, r21
    1060:	44 0f       	add	r20, r20
    1062:	55 1f       	adc	r21, r21
    1064:	4e 9d       	mul	r20, r14
    1066:	c0 01       	movw	r24, r0
    1068:	4f 9d       	mul	r20, r15
    106a:	90 0d       	add	r25, r0
    106c:	5e 9d       	mul	r21, r14
    106e:	90 0d       	add	r25, r0
    1070:	11 24       	eor	r1, r1
    1072:	08 0f       	add	r16, r24
    1074:	19 1f       	adc	r17, r25
    1076:	4c 2f       	mov	r20, r28
    1078:	60 e0       	ldi	r22, 0x00	; 0
    107a:	c6 01       	movw	r24, r12
    107c:	0e 94 67 13 	call	0x26ce	; 0x26ce <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    1080:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    1082:	8c 2f       	mov	r24, r28
    1084:	8d 1b       	sub	r24, r29
    1086:	8b 15       	cp	r24, r11
    1088:	c8 f2       	brcs	.-78     	; 0x103c <u8g2_send_buffer+0x32>
}
    108a:	df 91       	pop	r29
    108c:	cf 91       	pop	r28
    108e:	1f 91       	pop	r17
    1090:	0f 91       	pop	r16
    1092:	ff 90       	pop	r15
    1094:	ef 90       	pop	r14
    1096:	df 90       	pop	r13
    1098:	cf 90       	pop	r12
    109a:	bf 90       	pop	r11
    109c:	af 90       	pop	r10
    109e:	08 95       	ret

000010a0 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    10a0:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    10a2:	a0 81       	ld	r26, Z
    10a4:	b1 81       	ldd	r27, Z+1	; 0x01
    10a6:	50 96       	adiw	r26, 0x10	; 16
    10a8:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    10aa:	44 a1       	ldd	r20, Z+36	; 0x24
    10ac:	94 9f       	mul	r25, r20
    10ae:	a0 01       	movw	r20, r0
    10b0:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    10b2:	44 0f       	add	r20, r20
    10b4:	55 1f       	adc	r21, r21
    10b6:	44 0f       	add	r20, r20
    10b8:	55 1f       	adc	r21, r21
    10ba:	44 0f       	add	r20, r20
    10bc:	55 1f       	adc	r21, r21
    10be:	60 e0       	ldi	r22, 0x00	; 0
    10c0:	70 e0       	ldi	r23, 0x00	; 0
    10c2:	82 a1       	ldd	r24, Z+34	; 0x22
    10c4:	93 a1       	ldd	r25, Z+35	; 0x23
    10c6:	0c 94 33 15 	jmp	0x2a66	; 0x2a66 <memset>

000010ca <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    10ca:	cf 93       	push	r28
    10cc:	df 93       	push	r29
    10ce:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    10d0:	0e 94 05 08 	call	0x100a	; 0x100a <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    10d4:	ce 01       	movw	r24, r28
}
    10d6:	df 91       	pop	r29
    10d8:	cf 91       	pop	r28

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    10da:	0c 94 a8 13 	jmp	0x2750	; 0x2750 <u8x8_RefreshDisplay>

000010de <u8g2_draw_circle_section>:
static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
    10de:	cf 92       	push	r12
    10e0:	df 92       	push	r13
    10e2:	ef 92       	push	r14
    10e4:	0f 93       	push	r16
    10e6:	1f 93       	push	r17
    10e8:	cf 93       	push	r28
    10ea:	df 93       	push	r29
    10ec:	6c 01       	movw	r12, r24
    10ee:	d6 2f       	mov	r29, r22
    10f0:	14 2f       	mov	r17, r20
    10f2:	c2 2f       	mov	r28, r18
    10f4:	e0 fc       	sbrc	r14, 0
    10f6:	41 c0       	rjmp	.+130    	; 0x117a <u8g2_draw_circle_section+0x9c>
    10f8:	e1 fc       	sbrc	r14, 1
    10fa:	30 c0       	rjmp	.+96     	; 0x115c <u8g2_draw_circle_section+0x7e>
    10fc:	e3 fc       	sbrc	r14, 3
    10fe:	1f c0       	rjmp	.+62     	; 0x113e <u8g2_draw_circle_section+0x60>
    1100:	e2 fc       	sbrc	r14, 2
    1102:	08 c0       	rjmp	.+16     	; 0x1114 <u8g2_draw_circle_section+0x36>
    1104:	df 91       	pop	r29
    1106:	cf 91       	pop	r28
    1108:	1f 91       	pop	r17
    110a:	0f 91       	pop	r16
    110c:	ef 90       	pop	r14
    110e:	df 90       	pop	r13
    1110:	cf 90       	pop	r12
    1112:	08 95       	ret
    1114:	40 2f       	mov	r20, r16
    1116:	41 0f       	add	r20, r17
    1118:	6c 2f       	mov	r22, r28
    111a:	6d 1b       	sub	r22, r29
    111c:	c6 01       	movw	r24, r12
    111e:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    1122:	40 2f       	mov	r20, r16
    1124:	4d 0f       	add	r20, r29
    1126:	6c 2f       	mov	r22, r28
    1128:	61 1b       	sub	r22, r17
    112a:	c6 01       	movw	r24, r12
    112c:	df 91       	pop	r29
    112e:	cf 91       	pop	r28
    1130:	1f 91       	pop	r17
    1132:	0f 91       	pop	r16
    1134:	ef 90       	pop	r14
    1136:	df 90       	pop	r13
    1138:	cf 90       	pop	r12
    113a:	0c 94 e7 0e 	jmp	0x1dce	; 0x1dce <u8g2_DrawPixel>
    113e:	40 2f       	mov	r20, r16
    1140:	41 0f       	add	r20, r17
    1142:	6c 2f       	mov	r22, r28
    1144:	6d 0f       	add	r22, r29
    1146:	c6 01       	movw	r24, r12
    1148:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    114c:	40 2f       	mov	r20, r16
    114e:	4d 0f       	add	r20, r29
    1150:	61 2f       	mov	r22, r17
    1152:	6c 0f       	add	r22, r28
    1154:	c6 01       	movw	r24, r12
    1156:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    115a:	d2 cf       	rjmp	.-92     	; 0x1100 <u8g2_draw_circle_section+0x22>
    115c:	40 2f       	mov	r20, r16
    115e:	41 1b       	sub	r20, r17
    1160:	6c 2f       	mov	r22, r28
    1162:	6d 1b       	sub	r22, r29
    1164:	c6 01       	movw	r24, r12
    1166:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    116a:	40 2f       	mov	r20, r16
    116c:	4d 1b       	sub	r20, r29
    116e:	6c 2f       	mov	r22, r28
    1170:	61 1b       	sub	r22, r17
    1172:	c6 01       	movw	r24, r12
    1174:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    1178:	c1 cf       	rjmp	.-126    	; 0x10fc <u8g2_draw_circle_section+0x1e>
    117a:	40 2f       	mov	r20, r16
    117c:	41 1b       	sub	r20, r17
    117e:	62 2f       	mov	r22, r18
    1180:	6d 0f       	add	r22, r29
    1182:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    1186:	40 2f       	mov	r20, r16
    1188:	4d 1b       	sub	r20, r29
    118a:	61 2f       	mov	r22, r17
    118c:	6c 0f       	add	r22, r28
    118e:	c6 01       	movw	r24, r12
    1190:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    1194:	b1 cf       	rjmp	.-158    	; 0x10f8 <u8g2_draw_circle_section+0x1a>

00001196 <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    1196:	8f 92       	push	r8
    1198:	9f 92       	push	r9
    119a:	af 92       	push	r10
    119c:	bf 92       	push	r11
    119e:	cf 92       	push	r12
    11a0:	df 92       	push	r13
    11a2:	ef 92       	push	r14
    11a4:	ff 92       	push	r15
    11a6:	0f 93       	push	r16
    11a8:	1f 93       	push	r17
    11aa:	cf 93       	push	r28
    11ac:	df 93       	push	r29
    11ae:	5c 01       	movw	r10, r24
    11b0:	c6 2e       	mov	r12, r22
    11b2:	94 2e       	mov	r9, r20
    11b4:	c2 2f       	mov	r28, r18
    11b6:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    11b8:	01 e0       	ldi	r16, 0x01	; 1
    11ba:	02 0f       	add	r16, r18
    11bc:	04 0f       	add	r16, r20
    11be:	21 e0       	ldi	r18, 0x01	; 1
    11c0:	26 0f       	add	r18, r22
    11c2:	2c 0f       	add	r18, r28
    11c4:	4c 1b       	sub	r20, r28
    11c6:	6c 1b       	sub	r22, r28
    11c8:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <u8g2_IsIntersection>
    11cc:	81 11       	cpse	r24, r1
    11ce:	0d c0       	rjmp	.+26     	; 0x11ea <u8g2_DrawCircle+0x54>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    11d0:	df 91       	pop	r29
    11d2:	cf 91       	pop	r28
    11d4:	1f 91       	pop	r17
    11d6:	0f 91       	pop	r16
    11d8:	ff 90       	pop	r15
    11da:	ef 90       	pop	r14
    11dc:	df 90       	pop	r13
    11de:	cf 90       	pop	r12
    11e0:	bf 90       	pop	r11
    11e2:	af 90       	pop	r10
    11e4:	9f 90       	pop	r9
    11e6:	8f 90       	pop	r8
    11e8:	08 95       	ret
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    11ea:	d1 e0       	ldi	r29, 0x01	; 1
    11ec:	dc 1b       	sub	r29, r28
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    11ee:	dc 2e       	mov	r13, r28
    11f0:	d1 94       	neg	r13
    11f2:	dd 0c       	add	r13, r13
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    11f4:	e8 2c       	mov	r14, r8
    11f6:	09 2d       	mov	r16, r9
    11f8:	2c 2d       	mov	r18, r12
    11fa:	4c 2f       	mov	r20, r28
    11fc:	60 e0       	ldi	r22, 0x00	; 0
    11fe:	c5 01       	movw	r24, r10
    1200:	0e 94 6f 08 	call	0x10de	; 0x10de <u8g2_draw_circle_section>
    
    while ( x < y )
    1204:	cc 23       	and	r28, r28
    1206:	21 f3       	breq	.-56     	; 0x11d0 <u8g2_DrawCircle+0x3a>
    1208:	83 e0       	ldi	r24, 0x03	; 3
    120a:	f8 2e       	mov	r15, r24
    120c:	10 e0       	ldi	r17, 0x00	; 0
    {
      if (f >= 0) 
    120e:	d7 fd       	sbrc	r29, 7
    1210:	04 c0       	rjmp	.+8      	; 0x121a <u8g2_DrawCircle+0x84>
      {
        y--;
    1212:	c1 50       	subi	r28, 0x01	; 1
        ddF_y += 2;
    1214:	d3 94       	inc	r13
    1216:	d3 94       	inc	r13
        f += ddF_y;
    1218:	dd 0d       	add	r29, r13
      }
      x++;
    121a:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;
    121c:	df 0d       	add	r29, r15

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    121e:	e8 2c       	mov	r14, r8
    1220:	09 2d       	mov	r16, r9
    1222:	2c 2d       	mov	r18, r12
    1224:	4c 2f       	mov	r20, r28
    1226:	61 2f       	mov	r22, r17
    1228:	c5 01       	movw	r24, r10
    122a:	0e 94 6f 08 	call	0x10de	; 0x10de <u8g2_draw_circle_section>
    122e:	f3 94       	inc	r15
    1230:	f3 94       	inc	r15
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    1232:	1c 17       	cp	r17, r28
    1234:	60 f3       	brcs	.-40     	; 0x120e <u8g2_DrawCircle+0x78>
    1236:	cc cf       	rjmp	.-104    	; 0x11d0 <u8g2_DrawCircle+0x3a>

00001238 <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    1238:	28 e0       	ldi	r18, 0x08	; 8
    123a:	fc 01       	movw	r30, r24
    123c:	20 83       	st	Z, r18
  return buf;
  #endif
}
    123e:	85 e9       	ldi	r24, 0x95	; 149
    1240:	91 e0       	ldi	r25, 0x01	; 1
    1242:	08 95       	ret

00001244 <u8g2_Setup_ise97002ks_gu128x64_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ise97002ks f */
void u8g2_Setup_ise97002ks_gu128x64_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1244:	cf 92       	push	r12
    1246:	df 92       	push	r13
    1248:	ef 92       	push	r14
    124a:	ff 92       	push	r15
    124c:	0f 93       	push	r16
    124e:	1f 93       	push	r17
    1250:	cf 93       	push	r28
    1252:	df 93       	push	r29
    1254:	1f 92       	push	r1
    1256:	cd b7       	in	r28, 0x3d	; 61
    1258:	de b7       	in	r29, 0x3e	; 62
    125a:	7c 01       	movw	r14, r24
    125c:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ise97002ks_gu128x64, u8x8_cad_110, byte_cb, gpio_and_delay_cb);
    125e:	89 01       	movw	r16, r18
    1260:	9a 01       	movw	r18, r20
    1262:	47 ee       	ldi	r20, 0xE7	; 231
    1264:	52 e1       	ldi	r21, 0x12	; 18
    1266:	62 eb       	ldi	r22, 0xB2	; 178
    1268:	73 e1       	ldi	r23, 0x13	; 19
    126a:	0e 94 c8 14 	call	0x2990	; 0x2990 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    126e:	ce 01       	movw	r24, r28
    1270:	01 96       	adiw	r24, 0x01	; 1
    1272:	0e 94 1c 09 	call	0x1238	; 0x1238 <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    1276:	86 01       	movw	r16, r12
    1278:	2d ed       	ldi	r18, 0xDD	; 221
    127a:	3f e0       	ldi	r19, 0x0F	; 15
    127c:	49 81       	ldd	r20, Y+1	; 0x01
    127e:	bc 01       	movw	r22, r24
    1280:	c7 01       	movw	r24, r14
    1282:	0e 94 b1 10 	call	0x2162	; 0x2162 <u8g2_SetupBuffer>
}
    1286:	0f 90       	pop	r0
    1288:	df 91       	pop	r29
    128a:	cf 91       	pop	r28
    128c:	1f 91       	pop	r17
    128e:	0f 91       	pop	r16
    1290:	ff 90       	pop	r15
    1292:	ef 90       	pop	r14
    1294:	df 90       	pop	r13
    1296:	cf 90       	pop	r12
    1298:	08 95       	ret

0000129a <u8g2_font_get_word>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
    129a:	fc 01       	movw	r30, r24
    129c:	e6 0f       	add	r30, r22
    129e:	f1 1d       	adc	r31, r1
    12a0:	84 91       	lpm	r24, Z
    12a2:	90 e0       	ldi	r25, 0x00	; 0
    12a4:	98 2f       	mov	r25, r24
    12a6:	88 27       	eor	r24, r24
    12a8:	31 96       	adiw	r30, 0x01	; 1
    12aa:	e4 91       	lpm	r30, Z
    12ac:	8e 0f       	add	r24, r30
    12ae:	91 1d       	adc	r25, r1
    12b0:	08 95       	ret

000012b2 <u8g2_font_calc_vref_font>:
    12b2:	80 e0       	ldi	r24, 0x00	; 0
    12b4:	08 95       	ret

000012b6 <u8g2_font_get_word.constprop.2>:
    12b6:	fc 01       	movw	r30, r24
    12b8:	84 91       	lpm	r24, Z
    12ba:	90 e0       	ldi	r25, 0x00	; 0
    12bc:	98 2f       	mov	r25, r24
    12be:	88 27       	eor	r24, r24
    12c0:	31 96       	adiw	r30, 0x01	; 1
    12c2:	e4 91       	lpm	r30, Z
    12c4:	8e 0f       	add	r24, r30
    12c6:	91 1d       	adc	r25, r1
    12c8:	08 95       	ret

000012ca <u8g2_font_get_word.constprop.3>:
    12ca:	fc 01       	movw	r30, r24
    12cc:	32 96       	adiw	r30, 0x02	; 2
    12ce:	24 91       	lpm	r18, Z
    12d0:	30 e0       	ldi	r19, 0x00	; 0
    12d2:	32 2f       	mov	r19, r18
    12d4:	22 27       	eor	r18, r18
    12d6:	31 96       	adiw	r30, 0x01	; 1
    12d8:	84 91       	lpm	r24, Z
    12da:	a9 01       	movw	r20, r18
    12dc:	48 0f       	add	r20, r24
    12de:	51 1d       	adc	r21, r1
    12e0:	ca 01       	movw	r24, r20
    12e2:	08 95       	ret

000012e4 <u8g2_add_vector_y>:
    12e4:	21 30       	cpi	r18, 0x01	; 1
    12e6:	49 f0       	breq	.+18     	; 0x12fa <u8g2_add_vector_y+0x16>
    12e8:	30 f0       	brcs	.+12     	; 0x12f6 <u8g2_add_vector_y+0x12>
    12ea:	22 30       	cpi	r18, 0x02	; 2
    12ec:	11 f4       	brne	.+4      	; 0x12f2 <u8g2_add_vector_y+0xe>
    12ee:	84 1b       	sub	r24, r20
    12f0:	08 95       	ret
    12f2:	86 1b       	sub	r24, r22
    12f4:	08 95       	ret
    12f6:	84 0f       	add	r24, r20
    12f8:	08 95       	ret
    12fa:	86 0f       	add	r24, r22
    12fc:	08 95       	ret

000012fe <u8g2_add_vector_x>:
    12fe:	21 30       	cpi	r18, 0x01	; 1
    1300:	49 f0       	breq	.+18     	; 0x1314 <u8g2_add_vector_x+0x16>
    1302:	30 f0       	brcs	.+12     	; 0x1310 <u8g2_add_vector_x+0x12>
    1304:	22 30       	cpi	r18, 0x02	; 2
    1306:	11 f4       	brne	.+4      	; 0x130c <u8g2_add_vector_x+0xe>
    1308:	86 1b       	sub	r24, r22
    130a:	08 95       	ret
    130c:	84 0f       	add	r24, r20
    130e:	08 95       	ret
    1310:	86 0f       	add	r24, r22
    1312:	08 95       	ret
    1314:	84 1b       	sub	r24, r20
    1316:	08 95       	ret

00001318 <u8g2_font_decode_glyph>:
    1318:	2f 92       	push	r2
    131a:	3f 92       	push	r3
    131c:	4f 92       	push	r4
    131e:	5f 92       	push	r5
    1320:	6f 92       	push	r6
    1322:	7f 92       	push	r7
    1324:	8f 92       	push	r8
    1326:	9f 92       	push	r9
    1328:	af 92       	push	r10
    132a:	bf 92       	push	r11
    132c:	cf 92       	push	r12
    132e:	df 92       	push	r13
    1330:	ef 92       	push	r14
    1332:	ff 92       	push	r15
    1334:	0f 93       	push	r16
    1336:	1f 93       	push	r17
    1338:	cf 93       	push	r28
    133a:	df 93       	push	r29
    133c:	cd b7       	in	r28, 0x3d	; 61
    133e:	de b7       	in	r29, 0x3e	; 62
    1340:	61 97       	sbiw	r28, 0x11	; 17
    1342:	0f b6       	in	r0, 0x3f	; 63
    1344:	f8 94       	cli
    1346:	de bf       	out	0x3e, r29	; 62
    1348:	0f be       	out	0x3f, r0	; 63
    134a:	cd bf       	out	0x3d, r28	; 61
    134c:	dc 01       	movw	r26, r24
    134e:	da 96       	adiw	r26, 0x3a	; 58
    1350:	7c 93       	st	X, r23
    1352:	6e 93       	st	-X, r22
    1354:	d9 97       	sbiw	r26, 0x39	; 57
    1356:	9c 01       	movw	r18, r24
    1358:	2f 5b       	subi	r18, 0xBF	; 191
    135a:	3f 4f       	sbci	r19, 0xFF	; 255
    135c:	3c 83       	std	Y+4, r19	; 0x04
    135e:	2b 83       	std	Y+3, r18	; 0x03
    1360:	f9 01       	movw	r30, r18
    1362:	10 82       	st	Z, r1
    1364:	39 96       	adiw	r30, 0x09	; 9
    1366:	40 81       	ld	r20, Z
    1368:	fb 01       	movw	r30, r22
    136a:	c4 90       	lpm	r12, Z
    136c:	48 30       	cpi	r20, 0x08	; 8
    136e:	08 f4       	brcc	.+2      	; 0x1372 <u8g2_font_decode_glyph+0x5a>
    1370:	82 c2       	rjmp	.+1284   	; 0x1876 <u8g2_font_decode_glyph+0x55e>
    1372:	9b 01       	movw	r18, r22
    1374:	2f 5f       	subi	r18, 0xFF	; 255
    1376:	3f 4f       	sbci	r19, 0xFF	; 255
    1378:	da 96       	adiw	r26, 0x3a	; 58
    137a:	3c 93       	st	X, r19
    137c:	2e 93       	st	-X, r18
    137e:	d9 97       	sbiw	r26, 0x39	; 57
    1380:	f9 01       	movw	r30, r18
    1382:	84 91       	lpm	r24, Z
    1384:	68 ef       	ldi	r22, 0xF8	; 248
    1386:	64 0f       	add	r22, r20
    1388:	79 01       	movw	r14, r18
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	01 c0       	rjmp	.+2      	; 0x1392 <u8g2_font_decode_glyph+0x7a>
    1390:	88 0f       	add	r24, r24
    1392:	4a 95       	dec	r20
    1394:	ea f7       	brpl	.-6      	; 0x1390 <u8g2_font_decode_glyph+0x78>
    1396:	81 50       	subi	r24, 0x01	; 1
    1398:	c8 22       	and	r12, r24
    139a:	eb 81       	ldd	r30, Y+3	; 0x03
    139c:	fc 81       	ldd	r31, Y+4	; 0x04
    139e:	60 83       	st	Z, r22
    13a0:	df 96       	adiw	r26, 0x3f	; 63
    13a2:	cc 92       	st	X, r12
    13a4:	df 97       	sbiw	r26, 0x3f	; 63
    13a6:	cd 01       	movw	r24, r26
    13a8:	85 5b       	subi	r24, 0xB5	; 181
    13aa:	9f 4f       	sbci	r25, 0xFF	; 255
    13ac:	fc 01       	movw	r30, r24
    13ae:	70 81       	ld	r23, Z
    13b0:	f7 01       	movw	r30, r14
    13b2:	84 91       	lpm	r24, Z
    13b4:	90 e0       	ldi	r25, 0x00	; 0
    13b6:	06 2e       	mov	r0, r22
    13b8:	02 c0       	rjmp	.+4      	; 0x13be <u8g2_font_decode_glyph+0xa6>
    13ba:	95 95       	asr	r25
    13bc:	87 95       	ror	r24
    13be:	0a 94       	dec	r0
    13c0:	e2 f7       	brpl	.-8      	; 0x13ba <u8g2_font_decode_glyph+0xa2>
    13c2:	16 2f       	mov	r17, r22
    13c4:	17 0f       	add	r17, r23
    13c6:	18 30       	cpi	r17, 0x08	; 8
    13c8:	88 f0       	brcs	.+34     	; 0x13ec <u8g2_font_decode_glyph+0xd4>
    13ca:	2f 5f       	subi	r18, 0xFF	; 255
    13cc:	3f 4f       	sbci	r19, 0xFF	; 255
    13ce:	da 96       	adiw	r26, 0x3a	; 58
    13d0:	3c 93       	st	X, r19
    13d2:	2e 93       	st	-X, r18
    13d4:	d9 97       	sbiw	r26, 0x39	; 57
    13d6:	f9 01       	movw	r30, r18
    13d8:	44 91       	lpm	r20, Z
    13da:	98 e0       	ldi	r25, 0x08	; 8
    13dc:	96 1b       	sub	r25, r22
    13de:	01 c0       	rjmp	.+2      	; 0x13e2 <u8g2_font_decode_glyph+0xca>
    13e0:	44 0f       	add	r20, r20
    13e2:	9a 95       	dec	r25
    13e4:	ea f7       	brpl	.-6      	; 0x13e0 <u8g2_font_decode_glyph+0xc8>
    13e6:	84 2b       	or	r24, r20
    13e8:	18 50       	subi	r17, 0x08	; 8
    13ea:	79 01       	movw	r14, r18
    13ec:	41 e0       	ldi	r20, 0x01	; 1
    13ee:	50 e0       	ldi	r21, 0x00	; 0
    13f0:	01 c0       	rjmp	.+2      	; 0x13f4 <u8g2_font_decode_glyph+0xdc>
    13f2:	44 0f       	add	r20, r20
    13f4:	7a 95       	dec	r23
    13f6:	ea f7       	brpl	.-6      	; 0x13f2 <u8g2_font_decode_glyph+0xda>
    13f8:	41 50       	subi	r20, 0x01	; 1
    13fa:	48 23       	and	r20, r24
    13fc:	49 87       	std	Y+9, r20	; 0x09
    13fe:	eb 81       	ldd	r30, Y+3	; 0x03
    1400:	fc 81       	ldd	r31, Y+4	; 0x04
    1402:	10 83       	st	Z, r17
    1404:	cd 01       	movw	r24, r26
    1406:	80 5c       	subi	r24, 0xC0	; 192
    1408:	9f 4f       	sbci	r25, 0xFF	; 255
    140a:	fc 01       	movw	r30, r24
    140c:	40 83       	st	Z, r20
    140e:	4d 01       	movw	r8, r26
    1410:	f3 e6       	ldi	r31, 0x63	; 99
    1412:	8f 0e       	add	r8, r31
    1414:	91 1c       	adc	r9, r1
    1416:	f4 01       	movw	r30, r8
    1418:	90 81       	ld	r25, Z
    141a:	1d 01       	movw	r2, r26
    141c:	f3 e4       	ldi	r31, 0x43	; 67
    141e:	2f 0e       	add	r2, r31
    1420:	31 1c       	adc	r3, r1
    1422:	f1 01       	movw	r30, r2
    1424:	90 83       	st	Z, r25
    1426:	ad 01       	movw	r20, r26
    1428:	4c 5b       	subi	r20, 0xBC	; 188
    142a:	5f 4f       	sbci	r21, 0xFF	; 255
    142c:	5e 83       	std	Y+6, r21	; 0x06
    142e:	4d 83       	std	Y+5, r20	; 0x05
    1430:	81 e0       	ldi	r24, 0x01	; 1
    1432:	91 11       	cpse	r25, r1
    1434:	80 e0       	ldi	r24, 0x00	; 0
    1436:	ed 81       	ldd	r30, Y+5	; 0x05
    1438:	fe 81       	ldd	r31, Y+6	; 0x06
    143a:	80 83       	st	Z, r24
    143c:	cd 01       	movw	r24, r26
    143e:	84 5b       	subi	r24, 0xB4	; 180
    1440:	9f 4f       	sbci	r25, 0xFF	; 255
    1442:	fc 01       	movw	r30, r24
    1444:	70 81       	ld	r23, Z
    1446:	f7 01       	movw	r30, r14
    1448:	84 91       	lpm	r24, Z
    144a:	90 e0       	ldi	r25, 0x00	; 0
    144c:	01 2e       	mov	r0, r17
    144e:	02 c0       	rjmp	.+4      	; 0x1454 <u8g2_font_decode_glyph+0x13c>
    1450:	95 95       	asr	r25
    1452:	87 95       	ror	r24
    1454:	0a 94       	dec	r0
    1456:	e2 f7       	brpl	.-8      	; 0x1450 <u8g2_font_decode_glyph+0x138>
    1458:	61 2f       	mov	r22, r17
    145a:	67 0f       	add	r22, r23
    145c:	68 30       	cpi	r22, 0x08	; 8
    145e:	88 f0       	brcs	.+34     	; 0x1482 <u8g2_font_decode_glyph+0x16a>
    1460:	2f 5f       	subi	r18, 0xFF	; 255
    1462:	3f 4f       	sbci	r19, 0xFF	; 255
    1464:	da 96       	adiw	r26, 0x3a	; 58
    1466:	3c 93       	st	X, r19
    1468:	2e 93       	st	-X, r18
    146a:	d9 97       	sbiw	r26, 0x39	; 57
    146c:	f9 01       	movw	r30, r18
    146e:	44 91       	lpm	r20, Z
    1470:	98 e0       	ldi	r25, 0x08	; 8
    1472:	91 1b       	sub	r25, r17
    1474:	01 c0       	rjmp	.+2      	; 0x1478 <u8g2_font_decode_glyph+0x160>
    1476:	44 0f       	add	r20, r20
    1478:	9a 95       	dec	r25
    147a:	ea f7       	brpl	.-6      	; 0x1476 <u8g2_font_decode_glyph+0x15e>
    147c:	84 2b       	or	r24, r20
    147e:	68 50       	subi	r22, 0x08	; 8
    1480:	79 01       	movw	r14, r18
    1482:	eb 81       	ldd	r30, Y+3	; 0x03
    1484:	fc 81       	ldd	r31, Y+4	; 0x04
    1486:	60 83       	st	Z, r22
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	50 e0       	ldi	r21, 0x00	; 0
    148c:	8a 01       	movw	r16, r20
    148e:	07 2e       	mov	r0, r23
    1490:	01 c0       	rjmp	.+2      	; 0x1494 <u8g2_font_decode_glyph+0x17c>
    1492:	00 0f       	add	r16, r16
    1494:	0a 94       	dec	r0
    1496:	ea f7       	brpl	.-6      	; 0x1492 <u8g2_font_decode_glyph+0x17a>
    1498:	01 50       	subi	r16, 0x01	; 1
    149a:	80 23       	and	r24, r16
    149c:	9f ef       	ldi	r25, 0xFF	; 255
    149e:	97 0f       	add	r25, r23
    14a0:	01 c0       	rjmp	.+2      	; 0x14a4 <u8g2_font_decode_glyph+0x18c>
    14a2:	44 0f       	add	r20, r20
    14a4:	9a 95       	dec	r25
    14a6:	ea f7       	brpl	.-6      	; 0x14a2 <u8g2_font_decode_glyph+0x18a>
    14a8:	78 2e       	mov	r7, r24
    14aa:	74 1a       	sub	r7, r20
    14ac:	cd 01       	movw	r24, r26
    14ae:	83 5b       	subi	r24, 0xB3	; 179
    14b0:	9f 4f       	sbci	r25, 0xFF	; 255
    14b2:	fc 01       	movw	r30, r24
    14b4:	00 81       	ld	r16, Z
    14b6:	f7 01       	movw	r30, r14
    14b8:	84 91       	lpm	r24, Z
    14ba:	90 e0       	ldi	r25, 0x00	; 0
    14bc:	06 2e       	mov	r0, r22
    14be:	02 c0       	rjmp	.+4      	; 0x14c4 <u8g2_font_decode_glyph+0x1ac>
    14c0:	95 95       	asr	r25
    14c2:	87 95       	ror	r24
    14c4:	0a 94       	dec	r0
    14c6:	e2 f7       	brpl	.-8      	; 0x14c0 <u8g2_font_decode_glyph+0x1a8>
    14c8:	10 2f       	mov	r17, r16
    14ca:	16 0f       	add	r17, r22
    14cc:	18 30       	cpi	r17, 0x08	; 8
    14ce:	88 f0       	brcs	.+34     	; 0x14f2 <u8g2_font_decode_glyph+0x1da>
    14d0:	2f 5f       	subi	r18, 0xFF	; 255
    14d2:	3f 4f       	sbci	r19, 0xFF	; 255
    14d4:	da 96       	adiw	r26, 0x3a	; 58
    14d6:	3c 93       	st	X, r19
    14d8:	2e 93       	st	-X, r18
    14da:	d9 97       	sbiw	r26, 0x39	; 57
    14dc:	f9 01       	movw	r30, r18
    14de:	44 91       	lpm	r20, Z
    14e0:	98 e0       	ldi	r25, 0x08	; 8
    14e2:	96 1b       	sub	r25, r22
    14e4:	01 c0       	rjmp	.+2      	; 0x14e8 <u8g2_font_decode_glyph+0x1d0>
    14e6:	44 0f       	add	r20, r20
    14e8:	9a 95       	dec	r25
    14ea:	ea f7       	brpl	.-6      	; 0x14e6 <u8g2_font_decode_glyph+0x1ce>
    14ec:	84 2b       	or	r24, r20
    14ee:	18 50       	subi	r17, 0x08	; 8
    14f0:	79 01       	movw	r14, r18
    14f2:	41 e0       	ldi	r20, 0x01	; 1
    14f4:	50 e0       	ldi	r21, 0x00	; 0
    14f6:	ba 01       	movw	r22, r20
    14f8:	00 2e       	mov	r0, r16
    14fa:	01 c0       	rjmp	.+2      	; 0x14fe <u8g2_font_decode_glyph+0x1e6>
    14fc:	66 0f       	add	r22, r22
    14fe:	0a 94       	dec	r0
    1500:	ea f7       	brpl	.-6      	; 0x14fc <u8g2_font_decode_glyph+0x1e4>
    1502:	61 50       	subi	r22, 0x01	; 1
    1504:	86 23       	and	r24, r22
    1506:	eb 81       	ldd	r30, Y+3	; 0x03
    1508:	fc 81       	ldd	r31, Y+4	; 0x04
    150a:	10 83       	st	Z, r17
    150c:	01 50       	subi	r16, 0x01	; 1
    150e:	01 c0       	rjmp	.+2      	; 0x1512 <u8g2_font_decode_glyph+0x1fa>
    1510:	44 0f       	add	r20, r20
    1512:	0a 95       	dec	r16
    1514:	ea f7       	brpl	.-6      	; 0x1510 <u8g2_font_decode_glyph+0x1f8>
    1516:	99 85       	ldd	r25, Y+9	; 0x09
    1518:	94 1b       	sub	r25, r20
    151a:	ad 01       	movw	r20, r26
    151c:	42 5b       	subi	r20, 0xB2	; 178
    151e:	5f 4f       	sbci	r21, 0xFF	; 255
    1520:	fa 01       	movw	r30, r20
    1522:	60 81       	ld	r22, Z
    1524:	f7 01       	movw	r30, r14
    1526:	44 91       	lpm	r20, Z
    1528:	50 e0       	ldi	r21, 0x00	; 0
    152a:	01 2e       	mov	r0, r17
    152c:	02 c0       	rjmp	.+4      	; 0x1532 <u8g2_font_decode_glyph+0x21a>
    152e:	55 95       	asr	r21
    1530:	47 95       	ror	r20
    1532:	0a 94       	dec	r0
    1534:	e2 f7       	brpl	.-8      	; 0x152e <u8g2_font_decode_glyph+0x216>
    1536:	76 2f       	mov	r23, r22
    1538:	71 0f       	add	r23, r17
    153a:	78 30       	cpi	r23, 0x08	; 8
    153c:	78 f0       	brcs	.+30     	; 0x155c <u8g2_font_decode_glyph+0x244>
    153e:	f9 01       	movw	r30, r18
    1540:	31 96       	adiw	r30, 0x01	; 1
    1542:	da 96       	adiw	r26, 0x3a	; 58
    1544:	fc 93       	st	X, r31
    1546:	ee 93       	st	-X, r30
    1548:	d9 97       	sbiw	r26, 0x39	; 57
    154a:	24 91       	lpm	r18, Z
    154c:	58 e0       	ldi	r21, 0x08	; 8
    154e:	51 1b       	sub	r21, r17
    1550:	01 c0       	rjmp	.+2      	; 0x1554 <u8g2_font_decode_glyph+0x23c>
    1552:	22 0f       	add	r18, r18
    1554:	5a 95       	dec	r21
    1556:	ea f7       	brpl	.-6      	; 0x1552 <u8g2_font_decode_glyph+0x23a>
    1558:	42 2b       	or	r20, r18
    155a:	78 50       	subi	r23, 0x08	; 8
    155c:	eb 81       	ldd	r30, Y+3	; 0x03
    155e:	fc 81       	ldd	r31, Y+4	; 0x04
    1560:	70 83       	st	Z, r23
    1562:	21 e0       	ldi	r18, 0x01	; 1
    1564:	30 e0       	ldi	r19, 0x00	; 0
    1566:	f9 01       	movw	r30, r18
    1568:	06 2e       	mov	r0, r22
    156a:	01 c0       	rjmp	.+2      	; 0x156e <u8g2_font_decode_glyph+0x256>
    156c:	ee 0f       	add	r30, r30
    156e:	0a 94       	dec	r0
    1570:	ea f7       	brpl	.-6      	; 0x156c <u8g2_font_decode_glyph+0x254>
    1572:	e1 50       	subi	r30, 0x01	; 1
    1574:	4e 23       	and	r20, r30
    1576:	61 50       	subi	r22, 0x01	; 1
    1578:	01 c0       	rjmp	.+2      	; 0x157c <u8g2_font_decode_glyph+0x264>
    157a:	22 0f       	add	r18, r18
    157c:	6a 95       	dec	r22
    157e:	ea f7       	brpl	.-6      	; 0x157a <u8g2_font_decode_glyph+0x262>
    1580:	42 1b       	sub	r20, r18
    1582:	48 8b       	std	Y+16, r20	; 0x10
    1584:	1c 14       	cp	r1, r12
    1586:	0c f0       	brlt	.+2      	; 0x158a <u8g2_font_decode_glyph+0x272>
    1588:	5c c1       	rjmp	.+696    	; 0x1842 <u8g2_font_decode_glyph+0x52a>
    158a:	7d 01       	movw	r14, r26
    158c:	5d 01       	movw	r10, r26
    158e:	f5 e4       	ldi	r31, 0x45	; 69
    1590:	af 0e       	add	r10, r31
    1592:	b1 1c       	adc	r11, r1
    1594:	d5 01       	movw	r26, r10
    1596:	1c 91       	ld	r17, X
    1598:	89 0f       	add	r24, r25
    159a:	08 2f       	mov	r16, r24
    159c:	01 95       	neg	r16
    159e:	21 2f       	mov	r18, r17
    15a0:	40 2f       	mov	r20, r16
    15a2:	67 2d       	mov	r22, r7
    15a4:	f7 01       	movw	r30, r14
    15a6:	83 ad       	ldd	r24, Z+59	; 0x3b
    15a8:	0e 94 7f 09 	call	0x12fe	; 0x12fe <u8g2_add_vector_x>
    15ac:	d8 2e       	mov	r13, r24
    15ae:	d7 01       	movw	r26, r14
    15b0:	db 96       	adiw	r26, 0x3b	; 59
    15b2:	8c 93       	st	X, r24
    15b4:	db 97       	sbiw	r26, 0x3b	; 59
    15b6:	21 2f       	mov	r18, r17
    15b8:	40 2f       	mov	r20, r16
    15ba:	67 2d       	mov	r22, r7
    15bc:	dc 96       	adiw	r26, 0x3c	; 60
    15be:	8c 91       	ld	r24, X
    15c0:	0e 94 72 09 	call	0x12e4	; 0x12e4 <u8g2_add_vector_y>
    15c4:	f7 01       	movw	r30, r14
    15c6:	84 af       	std	Z+60, r24	; 0x3c
    15c8:	11 30       	cpi	r17, 0x01	; 1
    15ca:	09 f4       	brne	.+2      	; 0x15ce <u8g2_font_decode_glyph+0x2b6>
    15cc:	8a c1       	rjmp	.+788    	; 0x18e2 <u8g2_font_decode_glyph+0x5ca>
    15ce:	08 f4       	brcc	.+2      	; 0x15d2 <u8g2_font_decode_glyph+0x2ba>
    15d0:	90 c1       	rjmp	.+800    	; 0x18f2 <u8g2_font_decode_glyph+0x5da>
    15d2:	12 30       	cpi	r17, 0x02	; 2
    15d4:	09 f4       	brne	.+2      	; 0x15d8 <u8g2_font_decode_glyph+0x2c0>
    15d6:	79 c1       	rjmp	.+754    	; 0x18ca <u8g2_font_decode_glyph+0x5b2>
    15d8:	13 30       	cpi	r17, 0x03	; 3
    15da:	09 f0       	breq	.+2      	; 0x15de <u8g2_font_decode_glyph+0x2c6>
    15dc:	8f c1       	rjmp	.+798    	; 0x18fc <u8g2_font_decode_glyph+0x5e4>
    15de:	29 85       	ldd	r18, Y+9	; 0x09
    15e0:	2d 0d       	add	r18, r13
    15e2:	98 2f       	mov	r25, r24
    15e4:	9c 19       	sub	r25, r12
    15e6:	01 e0       	ldi	r16, 0x01	; 1
    15e8:	08 0f       	add	r16, r24
    15ea:	81 e0       	ldi	r24, 0x01	; 1
    15ec:	89 0f       	add	r24, r25
    15ee:	48 2f       	mov	r20, r24
    15f0:	6d 2d       	mov	r22, r13
    15f2:	c7 01       	movw	r24, r14
    15f4:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <u8g2_IsIntersection>
    15f8:	88 23       	and	r24, r24
    15fa:	09 f4       	brne	.+2      	; 0x15fe <u8g2_font_decode_glyph+0x2e6>
    15fc:	22 c1       	rjmp	.+580    	; 0x1842 <u8g2_font_decode_glyph+0x52a>
    15fe:	d7 01       	movw	r26, r14
    1600:	dd 96       	adiw	r26, 0x3d	; 61
    1602:	1c 92       	st	X, r1
    1604:	dd 97       	sbiw	r26, 0x3d	; 61
    1606:	de 96       	adiw	r26, 0x3e	; 62
    1608:	1c 92       	st	X, r1
    160a:	de 97       	sbiw	r26, 0x3e	; 62
    160c:	eb 81       	ldd	r30, Y+3	; 0x03
    160e:	fc 81       	ldd	r31, Y+4	; 0x04
    1610:	30 81       	ld	r19, Z
    1612:	d9 96       	adiw	r26, 0x39	; 57
    1614:	ed 91       	ld	r30, X+
    1616:	fc 91       	ld	r31, X
    1618:	da 97       	sbiw	r26, 0x3a	; 58
    161a:	a7 01       	movw	r20, r14
    161c:	48 5b       	subi	r20, 0xB8	; 184
    161e:	5f 4f       	sbci	r21, 0xFF	; 255
    1620:	5d 87       	std	Y+13, r21	; 0x0d
    1622:	4c 87       	std	Y+12, r20	; 0x0c
    1624:	b7 01       	movw	r22, r14
    1626:	67 5b       	subi	r22, 0xB7	; 183
    1628:	7f 4f       	sbci	r23, 0xFF	; 255
    162a:	7f 87       	std	Y+15, r23	; 0x0f
    162c:	6e 87       	std	Y+14, r22	; 0x0e
    162e:	c7 01       	movw	r24, r14
    1630:	8e 5b       	subi	r24, 0xBE	; 190
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	9b 87       	std	Y+11, r25	; 0x0b
    1636:	8a 87       	std	Y+10, r24	; 0x0a
    1638:	88 e0       	ldi	r24, 0x08	; 8
    163a:	58 2e       	mov	r5, r24
    163c:	23 2f       	mov	r18, r19
    163e:	3a 82       	std	Y+2, r3	; 0x02
    1640:	29 82       	std	Y+1, r2	; 0x01
    1642:	ac 85       	ldd	r26, Y+12	; 0x0c
    1644:	bd 85       	ldd	r27, Y+13	; 0x0d
    1646:	4c 91       	ld	r20, X
    1648:	84 91       	lpm	r24, Z
    164a:	90 e0       	ldi	r25, 0x00	; 0
    164c:	02 2e       	mov	r0, r18
    164e:	02 c0       	rjmp	.+4      	; 0x1654 <u8g2_font_decode_glyph+0x33c>
    1650:	95 95       	asr	r25
    1652:	87 95       	ror	r24
    1654:	0a 94       	dec	r0
    1656:	e2 f7       	brpl	.-8      	; 0x1650 <u8g2_font_decode_glyph+0x338>
    1658:	34 2f       	mov	r19, r20
    165a:	32 0f       	add	r19, r18
    165c:	38 30       	cpi	r19, 0x08	; 8
    165e:	78 f0       	brcs	.+30     	; 0x167e <u8g2_font_decode_glyph+0x366>
    1660:	31 96       	adiw	r30, 0x01	; 1
    1662:	d7 01       	movw	r26, r14
    1664:	da 96       	adiw	r26, 0x3a	; 58
    1666:	fc 93       	st	X, r31
    1668:	ee 93       	st	-X, r30
    166a:	d9 97       	sbiw	r26, 0x39	; 57
    166c:	64 91       	lpm	r22, Z
    166e:	95 2d       	mov	r25, r5
    1670:	92 1b       	sub	r25, r18
    1672:	01 c0       	rjmp	.+2      	; 0x1676 <u8g2_font_decode_glyph+0x35e>
    1674:	66 0f       	add	r22, r22
    1676:	9a 95       	dec	r25
    1678:	ea f7       	brpl	.-6      	; 0x1674 <u8g2_font_decode_glyph+0x35c>
    167a:	86 2b       	or	r24, r22
    167c:	38 50       	subi	r19, 0x08	; 8
    167e:	61 e0       	ldi	r22, 0x01	; 1
    1680:	70 e0       	ldi	r23, 0x00	; 0
    1682:	02 c0       	rjmp	.+4      	; 0x1688 <u8g2_font_decode_glyph+0x370>
    1684:	66 0f       	add	r22, r22
    1686:	77 1f       	adc	r23, r23
    1688:	4a 95       	dec	r20
    168a:	e2 f7       	brpl	.-8      	; 0x1684 <u8g2_font_decode_glyph+0x36c>
    168c:	ab 01       	movw	r20, r22
    168e:	41 50       	subi	r20, 0x01	; 1
    1690:	48 23       	and	r20, r24
    1692:	48 87       	std	Y+8, r20	; 0x08
    1694:	ab 81       	ldd	r26, Y+3	; 0x03
    1696:	bc 81       	ldd	r27, Y+4	; 0x04
    1698:	3c 93       	st	X, r19
    169a:	ae 85       	ldd	r26, Y+14	; 0x0e
    169c:	bf 85       	ldd	r27, Y+15	; 0x0f
    169e:	7c 91       	ld	r23, X
    16a0:	84 91       	lpm	r24, Z
    16a2:	90 e0       	ldi	r25, 0x00	; 0
    16a4:	03 2e       	mov	r0, r19
    16a6:	02 c0       	rjmp	.+4      	; 0x16ac <u8g2_font_decode_glyph+0x394>
    16a8:	95 95       	asr	r25
    16aa:	87 95       	ror	r24
    16ac:	0a 94       	dec	r0
    16ae:	e2 f7       	brpl	.-8      	; 0x16a8 <u8g2_font_decode_glyph+0x390>
    16b0:	67 2f       	mov	r22, r23
    16b2:	63 0f       	add	r22, r19
    16b4:	68 30       	cpi	r22, 0x08	; 8
    16b6:	90 f0       	brcs	.+36     	; 0x16dc <u8g2_font_decode_glyph+0x3c4>
    16b8:	31 96       	adiw	r30, 0x01	; 1
    16ba:	d7 01       	movw	r26, r14
    16bc:	da 96       	adiw	r26, 0x3a	; 58
    16be:	fc 93       	st	X, r31
    16c0:	ee 93       	st	-X, r30
    16c2:	d9 97       	sbiw	r26, 0x39	; 57
    16c4:	24 91       	lpm	r18, Z
    16c6:	42 2f       	mov	r20, r18
    16c8:	50 e0       	ldi	r21, 0x00	; 0
    16ca:	95 2d       	mov	r25, r5
    16cc:	93 1b       	sub	r25, r19
    16ce:	9a 01       	movw	r18, r20
    16d0:	01 c0       	rjmp	.+2      	; 0x16d4 <u8g2_font_decode_glyph+0x3bc>
    16d2:	22 0f       	add	r18, r18
    16d4:	9a 95       	dec	r25
    16d6:	ea f7       	brpl	.-6      	; 0x16d2 <u8g2_font_decode_glyph+0x3ba>
    16d8:	82 2b       	or	r24, r18
    16da:	68 50       	subi	r22, 0x08	; 8
    16dc:	21 e0       	ldi	r18, 0x01	; 1
    16de:	30 e0       	ldi	r19, 0x00	; 0
    16e0:	01 c0       	rjmp	.+2      	; 0x16e4 <u8g2_font_decode_glyph+0x3cc>
    16e2:	22 0f       	add	r18, r18
    16e4:	7a 95       	dec	r23
    16e6:	ea f7       	brpl	.-6      	; 0x16e2 <u8g2_font_decode_glyph+0x3ca>
    16e8:	21 50       	subi	r18, 0x01	; 1
    16ea:	28 23       	and	r18, r24
    16ec:	2f 83       	std	Y+7, r18	; 0x07
    16ee:	eb 81       	ldd	r30, Y+3	; 0x03
    16f0:	fc 81       	ldd	r31, Y+4	; 0x04
    16f2:	60 83       	st	Z, r22
    16f4:	d7 01       	movw	r26, r14
    16f6:	dd 96       	adiw	r26, 0x3d	; 61
    16f8:	bc 91       	ld	r27, X
    16fa:	b9 8b       	std	Y+17, r27	; 0x11
    16fc:	f7 01       	movw	r30, r14
    16fe:	d6 ac       	ldd	r13, Z+62	; 0x3e
    1700:	7b 2e       	mov	r7, r27
    1702:	1d 2d       	mov	r17, r13
    1704:	68 84       	ldd	r6, Y+8	; 0x08
    1706:	d7 01       	movw	r26, r14
    1708:	df 96       	adiw	r26, 0x3f	; 63
    170a:	4c 90       	ld	r4, X
    170c:	df 97       	sbiw	r26, 0x3f	; 63
    170e:	db 96       	adiw	r26, 0x3b	; 59
    1710:	cc 90       	ld	r12, X
    1712:	db 97       	sbiw	r26, 0x3b	; 59
    1714:	dc 96       	adiw	r26, 0x3c	; 60
    1716:	0c 91       	ld	r16, X
    1718:	30 2e       	mov	r3, r16
    171a:	05 c0       	rjmp	.+10     	; 0x1726 <u8g2_font_decode_glyph+0x40e>
    171c:	6d 14       	cp	r6, r13
    171e:	68 f1       	brcs	.+90     	; 0x177a <u8g2_font_decode_glyph+0x462>
    1720:	6d 18       	sub	r6, r13
    1722:	1f 5f       	subi	r17, 0xFF	; 255
    1724:	71 2c       	mov	r7, r1
    1726:	d4 2c       	mov	r13, r4
    1728:	d7 18       	sub	r13, r7
    172a:	f5 01       	movw	r30, r10
    172c:	00 81       	ld	r16, Z
    172e:	20 2f       	mov	r18, r16
    1730:	41 2f       	mov	r20, r17
    1732:	67 2d       	mov	r22, r7
    1734:	8c 2d       	mov	r24, r12
    1736:	0e 94 7f 09 	call	0x12fe	; 0x12fe <u8g2_add_vector_x>
    173a:	28 2e       	mov	r2, r24
    173c:	20 2f       	mov	r18, r16
    173e:	41 2f       	mov	r20, r17
    1740:	67 2d       	mov	r22, r7
    1742:	83 2d       	mov	r24, r3
    1744:	0e 94 72 09 	call	0x12e4	; 0x12e4 <u8g2_add_vector_y>
    1748:	aa 85       	ldd	r26, Y+10	; 0x0a
    174a:	bb 85       	ldd	r27, Y+11	; 0x0b
    174c:	9c 91       	ld	r25, X
    174e:	91 11       	cpse	r25, r1
    1750:	e5 cf       	rjmp	.-54     	; 0x171c <u8g2_font_decode_glyph+0x404>
    1752:	ed 81       	ldd	r30, Y+5	; 0x05
    1754:	fe 81       	ldd	r31, Y+6	; 0x06
    1756:	90 81       	ld	r25, Z
    1758:	d4 01       	movw	r26, r8
    175a:	9c 93       	st	X, r25
    175c:	2d 2d       	mov	r18, r13
    175e:	6d 14       	cp	r6, r13
    1760:	08 f4       	brcc	.+2      	; 0x1764 <u8g2_font_decode_glyph+0x44c>
    1762:	26 2d       	mov	r18, r6
    1764:	48 2f       	mov	r20, r24
    1766:	62 2d       	mov	r22, r2
    1768:	c7 01       	movw	r24, r14
    176a:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
    176e:	f7 01       	movw	r30, r14
    1770:	47 ac       	ldd	r4, Z+63	; 0x3f
    1772:	c3 ac       	ldd	r12, Z+59	; 0x3b
    1774:	34 ac       	ldd	r3, Z+60	; 0x3c
    1776:	6d 14       	cp	r6, r13
    1778:	98 f6       	brcc	.-90     	; 0x1720 <u8g2_font_decode_glyph+0x408>
    177a:	76 0c       	add	r7, r6
    177c:	d7 01       	movw	r26, r14
    177e:	dd 96       	adiw	r26, 0x3d	; 61
    1780:	7c 92       	st	X, r7
    1782:	dd 97       	sbiw	r26, 0x3d	; 61
    1784:	de 96       	adiw	r26, 0x3e	; 62
    1786:	1c 93       	st	X, r17
    1788:	6f 80       	ldd	r6, Y+7	; 0x07
    178a:	8c 2d       	mov	r24, r12
    178c:	d3 2c       	mov	r13, r3
    178e:	47 18       	sub	r4, r7
    1790:	64 14       	cp	r6, r4
    1792:	08 f0       	brcs	.+2      	; 0x1796 <u8g2_font_decode_glyph+0x47e>
    1794:	74 c0       	rjmp	.+232    	; 0x187e <u8g2_font_decode_glyph+0x566>
    1796:	0d 2d       	mov	r16, r13
    1798:	f5 01       	movw	r30, r10
    179a:	40 80       	ld	r4, Z
    179c:	d1 2e       	mov	r13, r17
    179e:	24 2d       	mov	r18, r4
    17a0:	41 2f       	mov	r20, r17
    17a2:	67 2d       	mov	r22, r7
    17a4:	0e 94 7f 09 	call	0x12fe	; 0x12fe <u8g2_add_vector_x>
    17a8:	c8 2e       	mov	r12, r24
    17aa:	24 2d       	mov	r18, r4
    17ac:	41 2f       	mov	r20, r17
    17ae:	67 2d       	mov	r22, r7
    17b0:	80 2f       	mov	r24, r16
    17b2:	0e 94 72 09 	call	0x12e4	; 0x12e4 <u8g2_add_vector_y>
    17b6:	a9 81       	ldd	r26, Y+1	; 0x01
    17b8:	ba 81       	ldd	r27, Y+2	; 0x02
    17ba:	9c 91       	ld	r25, X
    17bc:	f4 01       	movw	r30, r8
    17be:	90 83       	st	Z, r25
    17c0:	04 2d       	mov	r16, r4
    17c2:	26 2d       	mov	r18, r6
    17c4:	48 2f       	mov	r20, r24
    17c6:	6c 2d       	mov	r22, r12
    17c8:	c7 01       	movw	r24, r14
    17ca:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
    17ce:	76 0c       	add	r7, r6
    17d0:	d7 01       	movw	r26, r14
    17d2:	dd 96       	adiw	r26, 0x3d	; 61
    17d4:	7c 92       	st	X, r7
    17d6:	dd 97       	sbiw	r26, 0x3d	; 61
    17d8:	de 96       	adiw	r26, 0x3e	; 62
    17da:	1c 93       	st	X, r17
    17dc:	de 97       	sbiw	r26, 0x3e	; 62
    17de:	eb 81       	ldd	r30, Y+3	; 0x03
    17e0:	fc 81       	ldd	r31, Y+4	; 0x04
    17e2:	30 81       	ld	r19, Z
    17e4:	d9 96       	adiw	r26, 0x39	; 57
    17e6:	ed 91       	ld	r30, X+
    17e8:	fc 91       	ld	r31, X
    17ea:	da 97       	sbiw	r26, 0x3a	; 58
    17ec:	84 91       	lpm	r24, Z
    17ee:	90 e0       	ldi	r25, 0x00	; 0
    17f0:	03 2e       	mov	r0, r19
    17f2:	02 c0       	rjmp	.+4      	; 0x17f8 <u8g2_font_decode_glyph+0x4e0>
    17f4:	95 95       	asr	r25
    17f6:	87 95       	ror	r24
    17f8:	0a 94       	dec	r0
    17fa:	e2 f7       	brpl	.-8      	; 0x17f4 <u8g2_font_decode_glyph+0x4dc>
    17fc:	21 e0       	ldi	r18, 0x01	; 1
    17fe:	23 0f       	add	r18, r19
    1800:	28 30       	cpi	r18, 0x08	; 8
    1802:	80 f0       	brcs	.+32     	; 0x1824 <u8g2_font_decode_glyph+0x50c>
    1804:	31 96       	adiw	r30, 0x01	; 1
    1806:	d7 01       	movw	r26, r14
    1808:	da 96       	adiw	r26, 0x3a	; 58
    180a:	fc 93       	st	X, r31
    180c:	ee 93       	st	-X, r30
    180e:	d9 97       	sbiw	r26, 0x39	; 57
    1810:	44 91       	lpm	r20, Z
    1812:	95 2d       	mov	r25, r5
    1814:	93 1b       	sub	r25, r19
    1816:	01 c0       	rjmp	.+2      	; 0x181a <u8g2_font_decode_glyph+0x502>
    1818:	44 0f       	add	r20, r20
    181a:	9a 95       	dec	r25
    181c:	ea f7       	brpl	.-6      	; 0x1818 <u8g2_font_decode_glyph+0x500>
    181e:	84 2b       	or	r24, r20
    1820:	29 ef       	ldi	r18, 0xF9	; 249
    1822:	23 0f       	add	r18, r19
    1824:	ab 81       	ldd	r26, Y+3	; 0x03
    1826:	bc 81       	ldd	r27, Y+4	; 0x04
    1828:	2c 93       	st	X, r18
    182a:	80 fd       	sbrc	r24, 0
    182c:	6a cf       	rjmp	.-300    	; 0x1702 <u8g2_font_decode_glyph+0x3ea>
    182e:	b9 85       	ldd	r27, Y+9	; 0x09
    1830:	1b 17       	cp	r17, r27
    1832:	0c f4       	brge	.+2      	; 0x1836 <u8g2_font_decode_glyph+0x51e>
    1834:	06 cf       	rjmp	.-500    	; 0x1642 <u8g2_font_decode_glyph+0x32a>
    1836:	29 80       	ldd	r2, Y+1	; 0x01
    1838:	3a 80       	ldd	r3, Y+2	; 0x02
    183a:	f1 01       	movw	r30, r2
    183c:	80 81       	ld	r24, Z
    183e:	d4 01       	movw	r26, r8
    1840:	8c 93       	st	X, r24
    1842:	88 89       	ldd	r24, Y+16	; 0x10
    1844:	61 96       	adiw	r28, 0x11	; 17
    1846:	0f b6       	in	r0, 0x3f	; 63
    1848:	f8 94       	cli
    184a:	de bf       	out	0x3e, r29	; 62
    184c:	0f be       	out	0x3f, r0	; 63
    184e:	cd bf       	out	0x3d, r28	; 61
    1850:	df 91       	pop	r29
    1852:	cf 91       	pop	r28
    1854:	1f 91       	pop	r17
    1856:	0f 91       	pop	r16
    1858:	ff 90       	pop	r15
    185a:	ef 90       	pop	r14
    185c:	df 90       	pop	r13
    185e:	cf 90       	pop	r12
    1860:	bf 90       	pop	r11
    1862:	af 90       	pop	r10
    1864:	9f 90       	pop	r9
    1866:	8f 90       	pop	r8
    1868:	7f 90       	pop	r7
    186a:	6f 90       	pop	r6
    186c:	5f 90       	pop	r5
    186e:	4f 90       	pop	r4
    1870:	3f 90       	pop	r3
    1872:	2f 90       	pop	r2
    1874:	08 95       	ret
    1876:	7b 01       	movw	r14, r22
    1878:	9b 01       	movw	r18, r22
    187a:	64 2f       	mov	r22, r20
    187c:	86 cd       	rjmp	.-1268   	; 0x138a <u8g2_font_decode_glyph+0x72>
    187e:	f5 01       	movw	r30, r10
    1880:	00 81       	ld	r16, Z
    1882:	20 2f       	mov	r18, r16
    1884:	41 2f       	mov	r20, r17
    1886:	67 2d       	mov	r22, r7
    1888:	0e 94 7f 09 	call	0x12fe	; 0x12fe <u8g2_add_vector_x>
    188c:	c8 2e       	mov	r12, r24
    188e:	20 2f       	mov	r18, r16
    1890:	41 2f       	mov	r20, r17
    1892:	67 2d       	mov	r22, r7
    1894:	8d 2d       	mov	r24, r13
    1896:	0e 94 72 09 	call	0x12e4	; 0x12e4 <u8g2_add_vector_y>
    189a:	a9 81       	ldd	r26, Y+1	; 0x01
    189c:	ba 81       	ldd	r27, Y+2	; 0x02
    189e:	9c 91       	ld	r25, X
    18a0:	f4 01       	movw	r30, r8
    18a2:	90 83       	st	Z, r25
    18a4:	24 2d       	mov	r18, r4
    18a6:	48 2f       	mov	r20, r24
    18a8:	6c 2d       	mov	r22, r12
    18aa:	c7 01       	movw	r24, r14
    18ac:	0e 94 78 0e 	call	0x1cf0	; 0x1cf0 <u8g2_DrawHVLine>
    18b0:	64 18       	sub	r6, r4
    18b2:	1f 5f       	subi	r17, 0xFF	; 255
    18b4:	71 2c       	mov	r7, r1
    18b6:	d7 01       	movw	r26, r14
    18b8:	df 96       	adiw	r26, 0x3f	; 63
    18ba:	4c 90       	ld	r4, X
    18bc:	df 97       	sbiw	r26, 0x3f	; 63
    18be:	db 96       	adiw	r26, 0x3b	; 59
    18c0:	8c 91       	ld	r24, X
    18c2:	db 97       	sbiw	r26, 0x3b	; 59
    18c4:	dc 96       	adiw	r26, 0x3c	; 60
    18c6:	dc 90       	ld	r13, X
    18c8:	62 cf       	rjmp	.-316    	; 0x178e <u8g2_font_decode_glyph+0x476>
    18ca:	91 e0       	ldi	r25, 0x01	; 1
    18cc:	39 2f       	mov	r19, r25
    18ce:	3c 19       	sub	r19, r12
    18d0:	21 e0       	ldi	r18, 0x01	; 1
    18d2:	2d 0d       	add	r18, r13
    18d4:	49 85       	ldd	r20, Y+9	; 0x09
    18d6:	94 1b       	sub	r25, r20
    18d8:	01 e0       	ldi	r16, 0x01	; 1
    18da:	08 0f       	add	r16, r24
    18dc:	89 0f       	add	r24, r25
    18de:	d3 0e       	add	r13, r19
    18e0:	86 ce       	rjmp	.-756    	; 0x15ee <u8g2_font_decode_glyph+0x2d6>
    18e2:	f9 85       	ldd	r31, Y+9	; 0x09
    18e4:	1f 1b       	sub	r17, r31
    18e6:	21 e0       	ldi	r18, 0x01	; 1
    18e8:	2d 0d       	add	r18, r13
    18ea:	0c 2d       	mov	r16, r12
    18ec:	08 0f       	add	r16, r24
    18ee:	d1 0e       	add	r13, r17
    18f0:	7e ce       	rjmp	.-772    	; 0x15ee <u8g2_font_decode_glyph+0x2d6>
    18f2:	2c 2d       	mov	r18, r12
    18f4:	2d 0d       	add	r18, r13
    18f6:	09 85       	ldd	r16, Y+9	; 0x09
    18f8:	08 0f       	add	r16, r24
    18fa:	79 ce       	rjmp	.-782    	; 0x15ee <u8g2_font_decode_glyph+0x2d6>
    18fc:	08 2f       	mov	r16, r24
    18fe:	2d 2d       	mov	r18, r13
    1900:	76 ce       	rjmp	.-788    	; 0x15ee <u8g2_font_decode_glyph+0x2d6>

00001902 <u8g2_font_get_glyph_data>:
    1902:	ef 92       	push	r14
    1904:	ff 92       	push	r15
    1906:	0f 93       	push	r16
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	fc 01       	movw	r30, r24
    1910:	c5 a9       	ldd	r28, Z+53	; 0x35
    1912:	d6 a9       	ldd	r29, Z+54	; 0x36
    1914:	67 96       	adiw	r28, 0x17	; 23
    1916:	6f 3f       	cpi	r22, 0xFF	; 255
    1918:	71 05       	cpc	r23, r1
    191a:	09 f0       	breq	.+2      	; 0x191e <u8g2_font_get_glyph_data+0x1c>
    191c:	58 f4       	brcc	.+22     	; 0x1934 <u8g2_font_get_glyph_data+0x32>
    191e:	61 36       	cpi	r22, 0x61	; 97
    1920:	71 05       	cpc	r23, r1
    1922:	08 f4       	brcc	.+2      	; 0x1926 <u8g2_font_get_glyph_data+0x24>
    1924:	3b c0       	rjmp	.+118    	; 0x199c <u8g2_font_get_glyph_data+0x9a>
    1926:	e7 5a       	subi	r30, 0xA7	; 167
    1928:	ff 4f       	sbci	r31, 0xFF	; 255
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	c8 0f       	add	r28, r24
    1930:	d9 1f       	adc	r29, r25
    1932:	49 c0       	rjmp	.+146    	; 0x19c6 <u8g2_font_get_glyph_data+0xc4>
    1934:	8b 01       	movw	r16, r22
    1936:	fc 01       	movw	r30, r24
    1938:	e5 5a       	subi	r30, 0xA5	; 165
    193a:	ff 4f       	sbci	r31, 0xFF	; 255
    193c:	80 81       	ld	r24, Z
    193e:	91 81       	ldd	r25, Z+1	; 0x01
    1940:	c8 0f       	add	r28, r24
    1942:	d9 1f       	adc	r29, r25
    1944:	7e 01       	movw	r14, r28
    1946:	c7 01       	movw	r24, r14
    1948:	0e 94 5b 09 	call	0x12b6	; 0x12b6 <u8g2_font_get_word.constprop.2>
    194c:	c8 0f       	add	r28, r24
    194e:	d9 1f       	adc	r29, r25
    1950:	c7 01       	movw	r24, r14
    1952:	0e 94 65 09 	call	0x12ca	; 0x12ca <u8g2_font_get_word.constprop.3>
    1956:	f4 e0       	ldi	r31, 0x04	; 4
    1958:	ef 0e       	add	r14, r31
    195a:	f1 1c       	adc	r15, r1
    195c:	80 17       	cp	r24, r16
    195e:	91 07       	cpc	r25, r17
    1960:	90 f3       	brcs	.-28     	; 0x1946 <u8g2_font_get_glyph_data+0x44>
    1962:	09 c0       	rjmp	.+18     	; 0x1976 <u8g2_font_get_glyph_data+0x74>
    1964:	08 17       	cp	r16, r24
    1966:	19 07       	cpc	r17, r25
    1968:	09 f4       	brne	.+2      	; 0x196c <u8g2_font_get_glyph_data+0x6a>
    196a:	34 c0       	rjmp	.+104    	; 0x19d4 <u8g2_font_get_glyph_data+0xd2>
    196c:	fe 01       	movw	r30, r28
    196e:	32 96       	adiw	r30, 0x02	; 2
    1970:	e4 91       	lpm	r30, Z
    1972:	ce 0f       	add	r28, r30
    1974:	d1 1d       	adc	r29, r1
    1976:	fe 01       	movw	r30, r28
    1978:	84 91       	lpm	r24, Z
    197a:	90 e0       	ldi	r25, 0x00	; 0
    197c:	98 2f       	mov	r25, r24
    197e:	88 27       	eor	r24, r24
    1980:	31 96       	adiw	r30, 0x01	; 1
    1982:	e4 91       	lpm	r30, Z
    1984:	8e 2b       	or	r24, r30
    1986:	00 97       	sbiw	r24, 0x00	; 0
    1988:	69 f7       	brne	.-38     	; 0x1964 <u8g2_font_get_glyph_data+0x62>
    198a:	80 e0       	ldi	r24, 0x00	; 0
    198c:	90 e0       	ldi	r25, 0x00	; 0
    198e:	df 91       	pop	r29
    1990:	cf 91       	pop	r28
    1992:	1f 91       	pop	r17
    1994:	0f 91       	pop	r16
    1996:	ff 90       	pop	r15
    1998:	ef 90       	pop	r14
    199a:	08 95       	ret
    199c:	61 34       	cpi	r22, 0x41	; 65
    199e:	71 05       	cpc	r23, r1
    19a0:	90 f0       	brcs	.+36     	; 0x19c6 <u8g2_font_get_glyph_data+0xc4>
    19a2:	fc 01       	movw	r30, r24
    19a4:	e9 5a       	subi	r30, 0xA9	; 169
    19a6:	ff 4f       	sbci	r31, 0xFF	; 255
    19a8:	80 81       	ld	r24, Z
    19aa:	91 81       	ldd	r25, Z+1	; 0x01
    19ac:	c8 0f       	add	r28, r24
    19ae:	d9 1f       	adc	r29, r25
    19b0:	0a c0       	rjmp	.+20     	; 0x19c6 <u8g2_font_get_glyph_data+0xc4>
    19b2:	fe 01       	movw	r30, r28
    19b4:	24 91       	lpm	r18, Z
    19b6:	30 e0       	ldi	r19, 0x00	; 0
    19b8:	62 17       	cp	r22, r18
    19ba:	73 07       	cpc	r23, r19
    19bc:	a1 f0       	breq	.+40     	; 0x19e6 <u8g2_font_get_glyph_data+0xe4>
    19be:	fc 01       	movw	r30, r24
    19c0:	84 91       	lpm	r24, Z
    19c2:	c8 0f       	add	r28, r24
    19c4:	d1 1d       	adc	r29, r1
    19c6:	ce 01       	movw	r24, r28
    19c8:	01 96       	adiw	r24, 0x01	; 1
    19ca:	fc 01       	movw	r30, r24
    19cc:	24 91       	lpm	r18, Z
    19ce:	21 11       	cpse	r18, r1
    19d0:	f0 cf       	rjmp	.-32     	; 0x19b2 <u8g2_font_get_glyph_data+0xb0>
    19d2:	db cf       	rjmp	.-74     	; 0x198a <u8g2_font_get_glyph_data+0x88>
    19d4:	ce 01       	movw	r24, r28
    19d6:	03 96       	adiw	r24, 0x03	; 3
    19d8:	df 91       	pop	r29
    19da:	cf 91       	pop	r28
    19dc:	1f 91       	pop	r17
    19de:	0f 91       	pop	r16
    19e0:	ff 90       	pop	r15
    19e2:	ef 90       	pop	r14
    19e4:	08 95       	ret
    19e6:	ce 01       	movw	r24, r28
    19e8:	02 96       	adiw	r24, 0x02	; 2
    19ea:	df 91       	pop	r29
    19ec:	cf 91       	pop	r28
    19ee:	1f 91       	pop	r17
    19f0:	0f 91       	pop	r16
    19f2:	ff 90       	pop	r15
    19f4:	ef 90       	pop	r14
    19f6:	08 95       	ret

000019f8 <u8g2_draw_string>:
    19f8:	9f 92       	push	r9
    19fa:	af 92       	push	r10
    19fc:	bf 92       	push	r11
    19fe:	cf 92       	push	r12
    1a00:	df 92       	push	r13
    1a02:	ef 92       	push	r14
    1a04:	ff 92       	push	r15
    1a06:	0f 93       	push	r16
    1a08:	1f 93       	push	r17
    1a0a:	cf 93       	push	r28
    1a0c:	df 93       	push	r29
    1a0e:	ec 01       	movw	r28, r24
    1a10:	96 2e       	mov	r9, r22
    1a12:	a4 2e       	mov	r10, r20
    1a14:	89 01       	movw	r16, r18
    1a16:	0e 94 f1 10 	call	0x21e2	; 0x21e2 <u8x8_utf8_init>
    1a1a:	78 01       	movw	r14, r16
    1a1c:	b1 2c       	mov	r11, r1
    1a1e:	6e 01       	movw	r12, r28
    1a20:	85 e4       	ldi	r24, 0x45	; 69
    1a22:	c8 0e       	add	r12, r24
    1a24:	d1 1c       	adc	r13, r1
    1a26:	f7 01       	movw	r30, r14
    1a28:	61 91       	ld	r22, Z+
    1a2a:	7f 01       	movw	r14, r30
    1a2c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a2e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a30:	ce 01       	movw	r24, r28
    1a32:	09 95       	icall
    1a34:	8c 01       	movw	r16, r24
    1a36:	01 96       	adiw	r24, 0x01	; 1
    1a38:	09 f4       	brne	.+2      	; 0x1a3c <u8g2_draw_string+0x44>
    1a3a:	57 c0       	rjmp	.+174    	; 0x1aea <u8g2_draw_string+0xf2>
    1a3c:	0e 3f       	cpi	r16, 0xFE	; 254
    1a3e:	8f ef       	ldi	r24, 0xFF	; 255
    1a40:	18 07       	cpc	r17, r24
    1a42:	89 f3       	breq	.-30     	; 0x1a26 <u8g2_draw_string+0x2e>
    1a44:	f6 01       	movw	r30, r12
    1a46:	80 81       	ld	r24, Z
    1a48:	81 30       	cpi	r24, 0x01	; 1
    1a4a:	09 f4       	brne	.+2      	; 0x1a4e <u8g2_draw_string+0x56>
    1a4c:	46 c0       	rjmp	.+140    	; 0x1ada <u8g2_draw_string+0xe2>
    1a4e:	f0 f1       	brcs	.+124    	; 0x1acc <u8g2_draw_string+0xd4>
    1a50:	82 30       	cpi	r24, 0x02	; 2
    1a52:	99 f1       	breq	.+102    	; 0x1aba <u8g2_draw_string+0xc2>
    1a54:	83 30       	cpi	r24, 0x03	; 3
    1a56:	59 f5       	brne	.+86     	; 0x1aae <u8g2_draw_string+0xb6>
    1a58:	ef a9       	ldd	r30, Y+55	; 0x37
    1a5a:	f8 ad       	ldd	r31, Y+56	; 0x38
    1a5c:	ce 01       	movw	r24, r28
    1a5e:	09 95       	icall
    1a60:	99 2d       	mov	r25, r9
    1a62:	98 0f       	add	r25, r24
    1a64:	8a 2d       	mov	r24, r10
    1a66:	9b af       	std	Y+59, r25	; 0x3b
    1a68:	8c af       	std	Y+60, r24	; 0x3c
    1a6a:	b8 01       	movw	r22, r16
    1a6c:	ce 01       	movw	r24, r28
    1a6e:	0e 94 81 0c 	call	0x1902	; 0x1902 <u8g2_font_get_glyph_data>
    1a72:	00 97       	sbiw	r24, 0x00	; 0
    1a74:	89 f0       	breq	.+34     	; 0x1a98 <u8g2_draw_string+0xa0>
    1a76:	bc 01       	movw	r22, r24
    1a78:	ce 01       	movw	r24, r28
    1a7a:	0e 94 8c 09 	call	0x1318	; 0x1318 <u8g2_font_decode_glyph>
    1a7e:	f6 01       	movw	r30, r12
    1a80:	90 81       	ld	r25, Z
    1a82:	91 30       	cpi	r25, 0x01	; 1
    1a84:	71 f0       	breq	.+28     	; 0x1aa2 <u8g2_draw_string+0xaa>
    1a86:	91 30       	cpi	r25, 0x01	; 1
    1a88:	a8 f0       	brcs	.+42     	; 0x1ab4 <u8g2_draw_string+0xbc>
    1a8a:	92 30       	cpi	r25, 0x02	; 2
    1a8c:	69 f0       	breq	.+26     	; 0x1aa8 <u8g2_draw_string+0xb0>
    1a8e:	93 30       	cpi	r25, 0x03	; 3
    1a90:	09 f4       	brne	.+2      	; 0x1a94 <u8g2_draw_string+0x9c>
    1a92:	a8 1a       	sub	r10, r24
    1a94:	b8 0e       	add	r11, r24
    1a96:	c7 cf       	rjmp	.-114    	; 0x1a26 <u8g2_draw_string+0x2e>
    1a98:	80 e0       	ldi	r24, 0x00	; 0
    1a9a:	f6 01       	movw	r30, r12
    1a9c:	90 81       	ld	r25, Z
    1a9e:	91 30       	cpi	r25, 0x01	; 1
    1aa0:	91 f7       	brne	.-28     	; 0x1a86 <u8g2_draw_string+0x8e>
    1aa2:	a8 0e       	add	r10, r24
    1aa4:	b8 0e       	add	r11, r24
    1aa6:	bf cf       	rjmp	.-130    	; 0x1a26 <u8g2_draw_string+0x2e>
    1aa8:	98 1a       	sub	r9, r24
    1aaa:	b8 0e       	add	r11, r24
    1aac:	bc cf       	rjmp	.-136    	; 0x1a26 <u8g2_draw_string+0x2e>
    1aae:	8a 2d       	mov	r24, r10
    1ab0:	99 2d       	mov	r25, r9
    1ab2:	d9 cf       	rjmp	.-78     	; 0x1a66 <u8g2_draw_string+0x6e>
    1ab4:	98 0e       	add	r9, r24
    1ab6:	b8 0e       	add	r11, r24
    1ab8:	b6 cf       	rjmp	.-148    	; 0x1a26 <u8g2_draw_string+0x2e>
    1aba:	ef a9       	ldd	r30, Y+55	; 0x37
    1abc:	f8 ad       	ldd	r31, Y+56	; 0x38
    1abe:	ce 01       	movw	r24, r28
    1ac0:	09 95       	icall
    1ac2:	fa 2d       	mov	r31, r10
    1ac4:	f8 1b       	sub	r31, r24
    1ac6:	8f 2f       	mov	r24, r31
    1ac8:	99 2d       	mov	r25, r9
    1aca:	cd cf       	rjmp	.-102    	; 0x1a66 <u8g2_draw_string+0x6e>
    1acc:	ef a9       	ldd	r30, Y+55	; 0x37
    1ace:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ad0:	ce 01       	movw	r24, r28
    1ad2:	09 95       	icall
    1ad4:	8a 0d       	add	r24, r10
    1ad6:	99 2d       	mov	r25, r9
    1ad8:	c6 cf       	rjmp	.-116    	; 0x1a66 <u8g2_draw_string+0x6e>
    1ada:	ef a9       	ldd	r30, Y+55	; 0x37
    1adc:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ade:	ce 01       	movw	r24, r28
    1ae0:	09 95       	icall
    1ae2:	99 2d       	mov	r25, r9
    1ae4:	98 1b       	sub	r25, r24
    1ae6:	8a 2d       	mov	r24, r10
    1ae8:	be cf       	rjmp	.-132    	; 0x1a66 <u8g2_draw_string+0x6e>
    1aea:	8b 2d       	mov	r24, r11
    1aec:	df 91       	pop	r29
    1aee:	cf 91       	pop	r28
    1af0:	1f 91       	pop	r17
    1af2:	0f 91       	pop	r16
    1af4:	ff 90       	pop	r15
    1af6:	ef 90       	pop	r14
    1af8:	df 90       	pop	r13
    1afa:	cf 90       	pop	r12
    1afc:	bf 90       	pop	r11
    1afe:	af 90       	pop	r10
    1b00:	9f 90       	pop	r9
    1b02:	08 95       	ret

00001b04 <u8g2_SetFontMode>:
    1b04:	8e 5b       	subi	r24, 0xBE	; 190
    1b06:	9f 4f       	sbci	r25, 0xFF	; 255
    1b08:	fc 01       	movw	r30, r24
    1b0a:	60 83       	st	Z, r22
    1b0c:	08 95       	ret

00001b0e <u8g2_DrawStr>:
    1b0e:	e7 ee       	ldi	r30, 0xE7	; 231
    1b10:	f0 e1       	ldi	r31, 0x10	; 16
    1b12:	dc 01       	movw	r26, r24
    1b14:	13 96       	adiw	r26, 0x03	; 3
    1b16:	fc 93       	st	X, r31
    1b18:	ee 93       	st	-X, r30
    1b1a:	12 97       	sbiw	r26, 0x02	; 2
    1b1c:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <u8g2_draw_string>

00001b20 <u8g2_SetFontPosBaseline>:
    1b20:	29 e5       	ldi	r18, 0x59	; 89
    1b22:	39 e0       	ldi	r19, 0x09	; 9
    1b24:	fc 01       	movw	r30, r24
    1b26:	30 af       	std	Z+56, r19	; 0x38
    1b28:	27 ab       	std	Z+55, r18	; 0x37
    1b2a:	08 95       	ret

00001b2c <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    1b2c:	ef 92       	push	r14
    1b2e:	ff 92       	push	r15
    1b30:	0f 93       	push	r16
    1b32:	1f 93       	push	r17
    1b34:	cf 93       	push	r28
    1b36:	df 93       	push	r29
  if ( u8g2->font != font )
    1b38:	dc 01       	movw	r26, r24
    1b3a:	d5 96       	adiw	r26, 0x35	; 53
    1b3c:	2d 91       	ld	r18, X+
    1b3e:	3c 91       	ld	r19, X
    1b40:	d6 97       	sbiw	r26, 0x36	; 54
    1b42:	26 17       	cp	r18, r22
    1b44:	37 07       	cpc	r19, r23
    1b46:	09 f4       	brne	.+2      	; 0x1b4a <u8g2_SetFont+0x1e>
    1b48:	b2 c0       	rjmp	.+356    	; 0x1cae <u8g2_SetFont+0x182>
    1b4a:	eb 01       	movw	r28, r22
    1b4c:	7c 01       	movw	r14, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    1b4e:	fc 01       	movw	r30, r24
    1b50:	76 ab       	std	Z+54, r23	; 0x36
    1b52:	65 ab       	std	Z+53, r22	; 0x35
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1b54:	fb 01       	movw	r30, r22
    1b56:	84 91       	lpm	r24, Z
/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
    1b58:	8d 01       	movw	r16, r26
    1b5a:	0a 5b       	subi	r16, 0xBA	; 186
    1b5c:	1f 4f       	sbci	r17, 0xFF	; 255
    1b5e:	d8 01       	movw	r26, r16
    1b60:	8c 93       	st	X, r24
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1b62:	31 96       	adiw	r30, 0x01	; 1
    1b64:	e4 91       	lpm	r30, Z
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
    1b66:	11 96       	adiw	r26, 0x01	; 1
    1b68:	ec 93       	st	X, r30
    1b6a:	11 97       	sbiw	r26, 0x01	; 1
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1b6c:	fb 01       	movw	r30, r22
    1b6e:	32 96       	adiw	r30, 0x02	; 2
    1b70:	e4 91       	lpm	r30, Z
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
    1b72:	12 96       	adiw	r26, 0x02	; 2
    1b74:	ec 93       	st	X, r30
    1b76:	12 97       	sbiw	r26, 0x02	; 2
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1b78:	fb 01       	movw	r30, r22
    1b7a:	33 96       	adiw	r30, 0x03	; 3
    1b7c:	e4 91       	lpm	r30, Z
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
    1b7e:	13 96       	adiw	r26, 0x03	; 3
    1b80:	ec 93       	st	X, r30
    1b82:	13 97       	sbiw	r26, 0x03	; 3
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1b84:	fb 01       	movw	r30, r22
    1b86:	34 96       	adiw	r30, 0x04	; 4
    1b88:	e4 91       	lpm	r30, Z
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
    1b8a:	14 96       	adiw	r26, 0x04	; 4
    1b8c:	ec 93       	st	X, r30
    1b8e:	14 97       	sbiw	r26, 0x04	; 4
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1b90:	fb 01       	movw	r30, r22
    1b92:	35 96       	adiw	r30, 0x05	; 5
    1b94:	e4 91       	lpm	r30, Z
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
    1b96:	15 96       	adiw	r26, 0x05	; 5
    1b98:	ec 93       	st	X, r30
    1b9a:	15 97       	sbiw	r26, 0x05	; 5
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1b9c:	fb 01       	movw	r30, r22
    1b9e:	36 96       	adiw	r30, 0x06	; 6
    1ba0:	e4 91       	lpm	r30, Z
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
    1ba2:	16 96       	adiw	r26, 0x06	; 6
    1ba4:	ec 93       	st	X, r30
    1ba6:	16 97       	sbiw	r26, 0x06	; 6
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1ba8:	fb 01       	movw	r30, r22
    1baa:	37 96       	adiw	r30, 0x07	; 7
    1bac:	e4 91       	lpm	r30, Z
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
    1bae:	17 96       	adiw	r26, 0x07	; 7
    1bb0:	ec 93       	st	X, r30
    1bb2:	17 97       	sbiw	r26, 0x07	; 7
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1bb4:	fb 01       	movw	r30, r22
    1bb6:	38 96       	adiw	r30, 0x08	; 8
    1bb8:	e4 91       	lpm	r30, Z
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
    1bba:	18 96       	adiw	r26, 0x08	; 8
    1bbc:	ec 93       	st	X, r30
    1bbe:	18 97       	sbiw	r26, 0x08	; 8
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1bc0:	fb 01       	movw	r30, r22
    1bc2:	39 96       	adiw	r30, 0x09	; 9
    1bc4:	e4 91       	lpm	r30, Z
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
    1bc6:	19 96       	adiw	r26, 0x09	; 9
    1bc8:	ec 93       	st	X, r30
    1bca:	19 97       	sbiw	r26, 0x09	; 9
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1bcc:	fb 01       	movw	r30, r22
    1bce:	3a 96       	adiw	r30, 0x0a	; 10
    1bd0:	e4 91       	lpm	r30, Z
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
    1bd2:	1a 96       	adiw	r26, 0x0a	; 10
    1bd4:	ec 93       	st	X, r30
    1bd6:	1a 97       	sbiw	r26, 0x0a	; 10
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1bd8:	fb 01       	movw	r30, r22
    1bda:	3b 96       	adiw	r30, 0x0b	; 11
    1bdc:	e4 91       	lpm	r30, Z
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
    1bde:	1b 96       	adiw	r26, 0x0b	; 11
    1be0:	ec 93       	st	X, r30
    1be2:	1b 97       	sbiw	r26, 0x0b	; 11
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1be4:	fb 01       	movw	r30, r22
    1be6:	3c 96       	adiw	r30, 0x0c	; 12
    1be8:	e4 91       	lpm	r30, Z
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
    1bea:	1c 96       	adiw	r26, 0x0c	; 12
    1bec:	ec 93       	st	X, r30
    1bee:	1c 97       	sbiw	r26, 0x0c	; 12
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1bf0:	fb 01       	movw	r30, r22
    1bf2:	3d 96       	adiw	r30, 0x0d	; 13
    1bf4:	e4 91       	lpm	r30, Z
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
    1bf6:	1d 96       	adiw	r26, 0x0d	; 13
    1bf8:	ec 93       	st	X, r30
    1bfa:	1d 97       	sbiw	r26, 0x0d	; 13
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1bfc:	fb 01       	movw	r30, r22
    1bfe:	3e 96       	adiw	r30, 0x0e	; 14
    1c00:	e4 91       	lpm	r30, Z
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
    1c02:	1e 96       	adiw	r26, 0x0e	; 14
    1c04:	ec 93       	st	X, r30
    1c06:	1e 97       	sbiw	r26, 0x0e	; 14
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1c08:	fb 01       	movw	r30, r22
    1c0a:	3f 96       	adiw	r30, 0x0f	; 15
    1c0c:	e4 91       	lpm	r30, Z
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
    1c0e:	1f 96       	adiw	r26, 0x0f	; 15
    1c10:	ec 93       	st	X, r30
    1c12:	1f 97       	sbiw	r26, 0x0f	; 15
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1c14:	fb 01       	movw	r30, r22
    1c16:	70 96       	adiw	r30, 0x10	; 16
    1c18:	e4 91       	lpm	r30, Z
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
    1c1a:	50 96       	adiw	r26, 0x10	; 16
    1c1c:	ec 93       	st	X, r30
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    1c1e:	61 e1       	ldi	r22, 0x11	; 17
    1c20:	ce 01       	movw	r24, r28
    1c22:	0e 94 4d 09 	call	0x129a	; 0x129a <u8g2_font_get_word>
    1c26:	f8 01       	movw	r30, r16
    1c28:	92 8b       	std	Z+18, r25	; 0x12
    1c2a:	81 8b       	std	Z+17, r24	; 0x11
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    1c2c:	63 e1       	ldi	r22, 0x13	; 19
    1c2e:	ce 01       	movw	r24, r28
    1c30:	0e 94 4d 09 	call	0x129a	; 0x129a <u8g2_font_get_word>
    1c34:	d8 01       	movw	r26, r16
    1c36:	54 96       	adiw	r26, 0x14	; 20
    1c38:	9c 93       	st	X, r25
    1c3a:	8e 93       	st	-X, r24
    1c3c:	53 97       	sbiw	r26, 0x13	; 19
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
    1c3e:	65 e1       	ldi	r22, 0x15	; 21
    1c40:	ce 01       	movw	r24, r28
    1c42:	0e 94 4d 09 	call	0x129a	; 0x129a <u8g2_font_get_word>
    1c46:	f8 01       	movw	r30, r16
    1c48:	96 8b       	std	Z+22, r25	; 0x16
    1c4a:	85 8b       	std	Z+21, r24	; 0x15

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    1c4c:	d7 01       	movw	r26, r14
    1c4e:	d5 96       	adiw	r26, 0x35	; 53
    1c50:	8d 91       	ld	r24, X+
    1c52:	9c 91       	ld	r25, X
    1c54:	d6 97       	sbiw	r26, 0x36	; 54
    1c56:	89 2b       	or	r24, r25
    1c58:	51 f1       	breq	.+84     	; 0x1cae <u8g2_SetFont+0x182>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    1c5a:	3d 96       	adiw	r30, 0x0d	; 13
    1c5c:	80 81       	ld	r24, Z
    1c5e:	e7 01       	movw	r28, r14
    1c60:	c1 5a       	subi	r28, 0xA1	; 161
    1c62:	df 4f       	sbci	r29, 0xFF	; 255
    1c64:	88 83       	st	Y, r24
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    1c66:	31 96       	adiw	r30, 0x01	; 1
    1c68:	20 81       	ld	r18, Z
    1c6a:	a0 5a       	subi	r26, 0xA0	; 160
    1c6c:	bf 4f       	sbci	r27, 0xFF	; 255
    1c6e:	2c 93       	st	X, r18
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    1c70:	3a 96       	adiw	r30, 0x0a	; 10
    1c72:	90 81       	ld	r25, Z
    1c74:	99 23       	and	r25, r25
    1c76:	d9 f0       	breq	.+54     	; 0x1cae <u8g2_SetFont+0x182>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
    1c78:	91 30       	cpi	r25, 0x01	; 1
    1c7a:	01 f1       	breq	.+64     	; 0x1cbc <u8g2_SetFont+0x190>
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    1c7c:	f7 01       	movw	r30, r14
    1c7e:	e0 5b       	subi	r30, 0xB0	; 176
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	60 81       	ld	r22, Z
    1c84:	32 96       	adiw	r30, 0x02	; 2
    1c86:	30 81       	ld	r19, Z
    1c88:	08 2e       	mov	r0, r24
    1c8a:	00 0c       	add	r0, r0
    1c8c:	99 0b       	sbc	r25, r25
    1c8e:	43 2f       	mov	r20, r19
    1c90:	03 2e       	mov	r0, r19
    1c92:	00 0c       	add	r0, r0
    1c94:	55 0b       	sbc	r21, r21
    1c96:	46 0f       	add	r20, r22
    1c98:	51 1d       	adc	r21, r1
    1c9a:	67 fd       	sbrc	r22, 7
    1c9c:	5a 95       	dec	r21
    1c9e:	84 17       	cp	r24, r20
    1ca0:	95 07       	cpc	r25, r21
    1ca2:	14 f4       	brge	.+4      	; 0x1ca8 <u8g2_SetFont+0x17c>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    1ca4:	63 0f       	add	r22, r19
    1ca6:	68 83       	st	Y, r22
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
    1ca8:	32 17       	cp	r19, r18
    1caa:	0c f4       	brge	.+2      	; 0x1cae <u8g2_SetFont+0x182>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
    1cac:	3c 93       	st	X, r19
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    1cae:	df 91       	pop	r29
    1cb0:	cf 91       	pop	r28
    1cb2:	1f 91       	pop	r17
    1cb4:	0f 91       	pop	r16
    1cb6:	ff 90       	pop	r15
    1cb8:	ef 90       	pop	r14
    1cba:	08 95       	ret
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    1cbc:	39 97       	sbiw	r30, 0x09	; 9
    1cbe:	90 81       	ld	r25, Z
    1cc0:	89 17       	cp	r24, r25
    1cc2:	0c f4       	brge	.+2      	; 0x1cc6 <u8g2_SetFont+0x19a>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    1cc4:	98 83       	st	Y, r25
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    1cc6:	f7 01       	movw	r30, r14
    1cc8:	ea 5a       	subi	r30, 0xAA	; 170
    1cca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ccc:	80 81       	ld	r24, Z
    1cce:	82 17       	cp	r24, r18
    1cd0:	74 f7       	brge	.-36     	; 0x1cae <u8g2_SetFont+0x182>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    1cd2:	8c 93       	st	X, r24
    1cd4:	ec cf       	rjmp	.-40     	; 0x1cae <u8g2_SetFont+0x182>

00001cd6 <u8g2_draw_hv_line_2dir>:
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    1cd6:	0f 93       	push	r16
    1cd8:	dc 01       	movw	r26, r24
    1cda:	98 96       	adiw	r26, 0x28	; 40
    1cdc:	3c 91       	ld	r19, X
    1cde:	98 97       	sbiw	r26, 0x28	; 40
    1ce0:	43 1b       	sub	r20, r19
    1ce2:	5e 96       	adiw	r26, 0x1e	; 30
    1ce4:	ed 91       	ld	r30, X+
    1ce6:	fc 91       	ld	r31, X
    1ce8:	5f 97       	sbiw	r26, 0x1f	; 31
    1cea:	09 95       	icall
    1cec:	0f 91       	pop	r16
    1cee:	08 95       	ret

00001cf0 <u8g2_DrawHVLine>:
    1cf0:	0f 93       	push	r16
    1cf2:	fc 01       	movw	r30, r24
    1cf4:	e3 5a       	subi	r30, 0xA3	; 163
    1cf6:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf8:	30 81       	ld	r19, Z
    1cfa:	33 23       	and	r19, r19
    1cfc:	09 f4       	brne	.+2      	; 0x1d00 <u8g2_DrawHVLine+0x10>
    1cfe:	5a c0       	rjmp	.+180    	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d00:	22 23       	and	r18, r18
    1d02:	09 f4       	brne	.+2      	; 0x1d06 <u8g2_DrawHVLine+0x16>
    1d04:	57 c0       	rjmp	.+174    	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d06:	22 30       	cpi	r18, 0x02	; 2
    1d08:	08 f4       	brcc	.+2      	; 0x1d0c <u8g2_DrawHVLine+0x1c>
    1d0a:	56 c0       	rjmp	.+172    	; 0x1db8 <u8g2_DrawHVLine+0xc8>
    1d0c:	02 30       	cpi	r16, 0x02	; 2
    1d0e:	29 f1       	breq	.+74     	; 0x1d5a <u8g2_DrawHVLine+0x6a>
    1d10:	03 30       	cpi	r16, 0x03	; 3
    1d12:	09 f0       	breq	.+2      	; 0x1d16 <u8g2_DrawHVLine+0x26>
    1d14:	51 c0       	rjmp	.+162    	; 0x1db8 <u8g2_DrawHVLine+0xc8>
    1d16:	4f 5f       	subi	r20, 0xFF	; 255
    1d18:	42 1b       	sub	r20, r18
    1d1a:	fc 01       	movw	r30, r24
    1d1c:	35 a5       	ldd	r19, Z+45	; 0x2d
    1d1e:	63 17       	cp	r22, r19
    1d20:	08 f4       	brcc	.+2      	; 0x1d24 <u8g2_DrawHVLine+0x34>
    1d22:	48 c0       	rjmp	.+144    	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d24:	36 a5       	ldd	r19, Z+46	; 0x2e
    1d26:	63 17       	cp	r22, r19
    1d28:	08 f0       	brcs	.+2      	; 0x1d2c <u8g2_DrawHVLine+0x3c>
    1d2a:	44 c0       	rjmp	.+136    	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d2c:	30 a9       	ldd	r19, Z+48	; 0x30
    1d2e:	57 a5       	ldd	r21, Z+47	; 0x2f
    1d30:	24 0f       	add	r18, r20
    1d32:	24 17       	cp	r18, r20
    1d34:	08 f0       	brcs	.+2      	; 0x1d38 <u8g2_DrawHVLine+0x48>
    1d36:	44 c0       	rjmp	.+136    	; 0x1dc0 <u8g2_DrawHVLine+0xd0>
    1d38:	43 17       	cp	r20, r19
    1d3a:	08 f0       	brcs	.+2      	; 0x1d3e <u8g2_DrawHVLine+0x4e>
    1d3c:	40 c0       	rjmp	.+128    	; 0x1dbe <u8g2_DrawHVLine+0xce>
    1d3e:	2f ef       	ldi	r18, 0xFF	; 255
    1d40:	23 0f       	add	r18, r19
    1d42:	52 17       	cp	r21, r18
    1d44:	b8 f5       	brcc	.+110    	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d46:	45 17       	cp	r20, r21
    1d48:	08 f4       	brcc	.+2      	; 0x1d4c <u8g2_DrawHVLine+0x5c>
    1d4a:	45 2f       	mov	r20, r21
    1d4c:	23 17       	cp	r18, r19
    1d4e:	08 f4       	brcc	.+2      	; 0x1d52 <u8g2_DrawHVLine+0x62>
    1d50:	32 2f       	mov	r19, r18
    1d52:	23 2f       	mov	r18, r19
    1d54:	24 1b       	sub	r18, r20
    1d56:	01 e0       	ldi	r16, 0x01	; 1
    1d58:	24 c0       	rjmp	.+72     	; 0x1da2 <u8g2_DrawHVLine+0xb2>
    1d5a:	6f 5f       	subi	r22, 0xFF	; 255
    1d5c:	62 1b       	sub	r22, r18
    1d5e:	dc 01       	movw	r26, r24
    1d60:	9f 96       	adiw	r26, 0x2f	; 47
    1d62:	3c 91       	ld	r19, X
    1d64:	9f 97       	sbiw	r26, 0x2f	; 47
    1d66:	43 17       	cp	r20, r19
    1d68:	28 f1       	brcs	.+74     	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d6a:	d0 96       	adiw	r26, 0x30	; 48
    1d6c:	3c 91       	ld	r19, X
    1d6e:	d0 97       	sbiw	r26, 0x30	; 48
    1d70:	43 17       	cp	r20, r19
    1d72:	00 f5       	brcc	.+64     	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d74:	9e 96       	adiw	r26, 0x2e	; 46
    1d76:	3c 91       	ld	r19, X
    1d78:	9e 97       	sbiw	r26, 0x2e	; 46
    1d7a:	9d 96       	adiw	r26, 0x2d	; 45
    1d7c:	5c 91       	ld	r21, X
    1d7e:	26 0f       	add	r18, r22
    1d80:	26 17       	cp	r18, r22
    1d82:	10 f5       	brcc	.+68     	; 0x1dc8 <u8g2_DrawHVLine+0xd8>
    1d84:	63 17       	cp	r22, r19
    1d86:	f8 f4       	brcc	.+62     	; 0x1dc6 <u8g2_DrawHVLine+0xd6>
    1d88:	2f ef       	ldi	r18, 0xFF	; 255
    1d8a:	23 0f       	add	r18, r19
    1d8c:	52 17       	cp	r21, r18
    1d8e:	90 f4       	brcc	.+36     	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1d90:	65 17       	cp	r22, r21
    1d92:	08 f4       	brcc	.+2      	; 0x1d96 <u8g2_DrawHVLine+0xa6>
    1d94:	65 2f       	mov	r22, r21
    1d96:	23 17       	cp	r18, r19
    1d98:	08 f4       	brcc	.+2      	; 0x1d9c <u8g2_DrawHVLine+0xac>
    1d9a:	32 2f       	mov	r19, r18
    1d9c:	23 2f       	mov	r18, r19
    1d9e:	26 1b       	sub	r18, r22
    1da0:	00 e0       	ldi	r16, 0x00	; 0
    1da2:	dc 01       	movw	r26, r24
    1da4:	90 96       	adiw	r26, 0x20	; 32
    1da6:	ed 91       	ld	r30, X+
    1da8:	fc 91       	ld	r31, X
    1daa:	91 97       	sbiw	r26, 0x21	; 33
    1dac:	04 80       	ldd	r0, Z+4	; 0x04
    1dae:	f5 81       	ldd	r31, Z+5	; 0x05
    1db0:	e0 2d       	mov	r30, r0
    1db2:	09 95       	icall
    1db4:	0f 91       	pop	r16
    1db6:	08 95       	ret
    1db8:	00 fd       	sbrc	r16, 0
    1dba:	af cf       	rjmp	.-162    	; 0x1d1a <u8g2_DrawHVLine+0x2a>
    1dbc:	d0 cf       	rjmp	.-96     	; 0x1d5e <u8g2_DrawHVLine+0x6e>
    1dbe:	45 2f       	mov	r20, r21
    1dc0:	43 17       	cp	r20, r19
    1dc2:	c0 f7       	brcc	.-16     	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1dc4:	be cf       	rjmp	.-132    	; 0x1d42 <u8g2_DrawHVLine+0x52>
    1dc6:	65 2f       	mov	r22, r21
    1dc8:	63 17       	cp	r22, r19
    1dca:	a0 f7       	brcc	.-24     	; 0x1db4 <u8g2_DrawHVLine+0xc4>
    1dcc:	df cf       	rjmp	.-66     	; 0x1d8c <u8g2_DrawHVLine+0x9c>

00001dce <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    1dce:	0f 93       	push	r16
    1dd0:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    1dd2:	87 a5       	ldd	r24, Z+47	; 0x2f
    1dd4:	48 17       	cp	r20, r24
    1dd6:	38 f1       	brcs	.+78     	; 0x1e26 <u8g2_DrawPixel+0x58>
    return;
  if ( y >= u8g2->user_y1 )
    1dd8:	80 a9       	ldd	r24, Z+48	; 0x30
    1dda:	48 17       	cp	r20, r24
    1ddc:	20 f5       	brcc	.+72     	; 0x1e26 <u8g2_DrawPixel+0x58>
    return;
  if ( x < u8g2->user_x0 )
    1dde:	85 a5       	ldd	r24, Z+45	; 0x2d
    1de0:	68 17       	cp	r22, r24
    1de2:	08 f1       	brcs	.+66     	; 0x1e26 <u8g2_DrawPixel+0x58>
    return;
  if ( x >= u8g2->user_x1 )
    1de4:	26 a5       	ldd	r18, Z+46	; 0x2e
    1de6:	62 17       	cp	r22, r18
    1de8:	f0 f4       	brcc	.+60     	; 0x1e26 <u8g2_DrawPixel+0x58>
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    1dea:	df 01       	movw	r26, r30
    1dec:	a3 5a       	subi	r26, 0xA3	; 163
    1dee:	bf 4f       	sbci	r27, 0xFF	; 255
    1df0:	9c 91       	ld	r25, X
    1df2:	99 23       	and	r25, r25
    1df4:	c1 f0       	breq	.+48     	; 0x1e26 <u8g2_DrawPixel+0x58>
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    1df6:	91 e0       	ldi	r25, 0x01	; 1
    1df8:	96 0f       	add	r25, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1dfa:	96 17       	cp	r25, r22
    1dfc:	b0 f0       	brcs	.+44     	; 0x1e2a <u8g2_DrawPixel+0x5c>
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    1dfe:	89 17       	cp	r24, r25
    1e00:	90 f4       	brcc	.+36     	; 0x1e26 <u8g2_DrawPixel+0x58>
    1e02:	38 2f       	mov	r19, r24
    1e04:	86 17       	cp	r24, r22
    1e06:	08 f4       	brcc	.+2      	; 0x1e0a <u8g2_DrawPixel+0x3c>
    1e08:	36 2f       	mov	r19, r22
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    1e0a:	92 17       	cp	r25, r18
    1e0c:	08 f4       	brcc	.+2      	; 0x1e10 <u8g2_DrawPixel+0x42>
    1e0e:	29 2f       	mov	r18, r25
    1e10:	cf 01       	movw	r24, r30
    1e12:	23 1b       	sub	r18, r19
    1e14:	00 a0       	ldd	r0, Z+32	; 0x20
    1e16:	f1 a1       	ldd	r31, Z+33	; 0x21
    1e18:	e0 2d       	mov	r30, r0
    1e1a:	04 80       	ldd	r0, Z+4	; 0x04
    1e1c:	f5 81       	ldd	r31, Z+5	; 0x05
    1e1e:	e0 2d       	mov	r30, r0
    1e20:	00 e0       	ldi	r16, 0x00	; 0
    1e22:	63 2f       	mov	r22, r19
    1e24:	09 95       	icall
    return;
  if ( x >= u8g2->user_x1 )
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
    1e26:	0f 91       	pop	r16
    1e28:	08 95       	ret
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    {
      b = d;
      b--;
    1e2a:	9f ef       	ldi	r25, 0xFF	; 255
    1e2c:	92 0f       	add	r25, r18
    1e2e:	e7 cf       	rjmp	.-50     	; 0x1dfe <u8g2_DrawPixel+0x30>

00001e30 <u8g2_SetDrawColor>:
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    1e30:	fc 01       	movw	r30, r24
    1e32:	ed 59       	subi	r30, 0x9D	; 157
    1e34:	ff 4f       	sbci	r31, 0xFF	; 255
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    1e36:	63 30       	cpi	r22, 0x03	; 3
    1e38:	18 f0       	brcs	.+6      	; 0x1e40 <u8g2_SetDrawColor+0x10>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    1e3a:	21 e0       	ldi	r18, 0x01	; 1
    1e3c:	20 83       	st	Z, r18
    1e3e:	08 95       	ret
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    1e40:	60 83       	st	Z, r22
    1e42:	08 95       	ret

00001e44 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    1e44:	0f 93       	push	r16
    1e46:	fc 01       	movw	r30, r24
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    1e48:	87 a5       	ldd	r24, Z+47	; 0x2f
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1e4a:	90 a9       	ldd	r25, Z+48	; 0x30
    1e4c:	49 17       	cp	r20, r25
    1e4e:	58 f4       	brcc	.+22     	; 0x1e66 <u8g2_IsIntersection+0x22>
  {
    if ( v1 > a0 )	// v1 >= a0
    1e50:	80 17       	cp	r24, r16
    1e52:	58 f4       	brcc	.+22     	; 0x1e6a <u8g2_IsIntersection+0x26>
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    1e54:	85 a5       	ldd	r24, Z+45	; 0x2d
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    1e56:	96 a5       	ldd	r25, Z+46	; 0x2e
    1e58:	69 17       	cp	r22, r25
    1e5a:	60 f4       	brcc	.+24     	; 0x1e74 <u8g2_IsIntersection+0x30>
  {
    if ( v1 > a0 )	// v1 >= a0
    1e5c:	82 17       	cp	r24, r18
    1e5e:	60 f4       	brcc	.+24     	; 0x1e78 <u8g2_IsIntersection+0x34>
    {
      return 1;
    1e60:	81 e0       	ldi	r24, 0x01	; 1
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    1e62:	0f 91       	pop	r16
    1e64:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1e66:	80 17       	cp	r24, r16
    1e68:	10 f4       	brcc	.+4      	; 0x1e6e <u8g2_IsIntersection+0x2a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    1e6a:	04 17       	cp	r16, r20
    1e6c:	98 f3       	brcs	.-26     	; 0x1e54 <u8g2_IsIntersection+0x10>

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    1e6e:	80 e0       	ldi	r24, 0x00	; 0
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    1e70:	0f 91       	pop	r16
    1e72:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    1e74:	82 17       	cp	r24, r18
    1e76:	d8 f7       	brcc	.-10     	; 0x1e6e <u8g2_IsIntersection+0x2a>

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    1e78:	81 e0       	ldi	r24, 0x01	; 1
    1e7a:	26 17       	cp	r18, r22
    1e7c:	c0 f7       	brcc	.-16     	; 0x1e6e <u8g2_IsIntersection+0x2a>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    1e7e:	0f 91       	pop	r16
    1e80:	08 95       	ret

00001e82 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
    1e82:	bf 92       	push	r11
    1e84:	cf 92       	push	r12
    1e86:	df 92       	push	r13
    1e88:	ef 92       	push	r14
    1e8a:	ff 92       	push	r15
    1e8c:	0f 93       	push	r16
    1e8e:	1f 93       	push	r17
    1e90:	cf 93       	push	r28
    1e92:	df 93       	push	r29
    1e94:	6c 01       	movw	r12, r24
    1e96:	c6 2f       	mov	r28, r22
    1e98:	14 2f       	mov	r17, r20
    1e9a:	f2 2e       	mov	r15, r18

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    1e9c:	26 17       	cp	r18, r22
    1e9e:	08 f0       	brcs	.+2      	; 0x1ea2 <u8g2_DrawLine+0x20>
    1ea0:	4f c0       	rjmp	.+158    	; 0x1f40 <u8g2_DrawLine+0xbe>
    1ea2:	e6 2e       	mov	r14, r22
    1ea4:	e2 1a       	sub	r14, r18
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    1ea6:	01 17       	cp	r16, r17
    1ea8:	08 f0       	brcs	.+2      	; 0x1eac <u8g2_DrawLine+0x2a>
    1eaa:	4f c0       	rjmp	.+158    	; 0x1f4a <u8g2_DrawLine+0xc8>
    1eac:	b1 2e       	mov	r11, r17
    1eae:	b0 1a       	sub	r11, r16

  if ( dy > dx ) 
    1eb0:	eb 14       	cp	r14, r11
    1eb2:	08 f0       	brcs	.+2      	; 0x1eb6 <u8g2_DrawLine+0x34>
    1eb4:	60 c0       	rjmp	.+192    	; 0x1f76 <u8g2_DrawLine+0xf4>
    1eb6:	81 2f       	mov	r24, r17
    1eb8:	1f 2d       	mov	r17, r15
    1eba:	f8 2e       	mov	r15, r24
    1ebc:	8c 2f       	mov	r24, r28
    1ebe:	c0 2f       	mov	r28, r16
    1ec0:	08 2f       	mov	r16, r24
  {
    swapxy = 1;
    1ec2:	81 e0       	ldi	r24, 0x01	; 1
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1ec4:	db 2d       	mov	r29, r11
    1ec6:	d6 95       	lsr	r29
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    1ec8:	10 17       	cp	r17, r16
    1eca:	08 f4       	brcc	.+2      	; 0x1ece <u8g2_DrawLine+0x4c>
    1ecc:	4d c0       	rjmp	.+154    	; 0x1f68 <u8g2_DrawLine+0xe6>
    1ece:	0f ef       	ldi	r16, 0xFF	; 255
  y = y1;

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    1ed0:	9f ef       	ldi	r25, 0xFF	; 255
    1ed2:	f9 16       	cp	r15, r25
    1ed4:	09 f4       	brne	.+2      	; 0x1ed8 <u8g2_DrawLine+0x56>
    1ed6:	4c c0       	rjmp	.+152    	; 0x1f70 <u8g2_DrawLine+0xee>
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1ed8:	fc 16       	cp	r15, r28
    1eda:	d0 f0       	brcs	.+52     	; 0x1f10 <u8g2_DrawLine+0x8e>
    1edc:	88 23       	and	r24, r24
    1ede:	39 f1       	breq	.+78     	; 0x1f2e <u8g2_DrawLine+0xac>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    1ee0:	4c 2f       	mov	r20, r28
    1ee2:	61 2f       	mov	r22, r17
    1ee4:	c6 01       	movw	r24, r12
    1ee6:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    err -= (uint8_t)dy;
    1eea:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    1eec:	d7 fd       	sbrc	r29, 7
    1eee:	0b c0       	rjmp	.+22     	; 0x1f06 <u8g2_DrawLine+0x84>
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1ef0:	cf 5f       	subi	r28, 0xFF	; 255
    1ef2:	fc 16       	cp	r15, r28
    1ef4:	68 f0       	brcs	.+26     	; 0x1f10 <u8g2_DrawLine+0x8e>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    1ef6:	4c 2f       	mov	r20, r28
    1ef8:	61 2f       	mov	r22, r17
    1efa:	c6 01       	movw	r24, r12
    1efc:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    err -= (uint8_t)dy;
    1f00:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    1f02:	d7 ff       	sbrs	r29, 7
    1f04:	f5 cf       	rjmp	.-22     	; 0x1ef0 <u8g2_DrawLine+0x6e>
    {
      y += (u8g2_uint_t)ystep;
    1f06:	10 0f       	add	r17, r16
      err += (u8g2_uint_t)dx;
    1f08:	db 0d       	add	r29, r11
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1f0a:	cf 5f       	subi	r28, 0xFF	; 255
    1f0c:	fc 16       	cp	r15, r28
    1f0e:	98 f7       	brcc	.-26     	; 0x1ef6 <u8g2_DrawLine+0x74>
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
    1f10:	df 91       	pop	r29
    1f12:	cf 91       	pop	r28
    1f14:	1f 91       	pop	r17
    1f16:	0f 91       	pop	r16
    1f18:	ff 90       	pop	r15
    1f1a:	ef 90       	pop	r14
    1f1c:	df 90       	pop	r13
    1f1e:	cf 90       	pop	r12
    1f20:	bf 90       	pop	r11
    1f22:	08 95       	ret
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    err -= (uint8_t)dy;
    if ( err < 0 ) 
    {
      y += (u8g2_uint_t)ystep;
    1f24:	10 0f       	add	r17, r16
      err += (u8g2_uint_t)dx;
    1f26:	db 0d       	add	r29, r11
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    1f28:	cf 5f       	subi	r28, 0xFF	; 255
    1f2a:	fc 16       	cp	r15, r28
    1f2c:	88 f3       	brcs	.-30     	; 0x1f10 <u8g2_DrawLine+0x8e>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    1f2e:	41 2f       	mov	r20, r17
    1f30:	6c 2f       	mov	r22, r28
    1f32:	c6 01       	movw	r24, r12
    1f34:	0e 94 e7 0e 	call	0x1dce	; 0x1dce <u8g2_DrawPixel>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    err -= (uint8_t)dy;
    1f38:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    1f3a:	d7 ff       	sbrs	r29, 7
    1f3c:	f5 cf       	rjmp	.-22     	; 0x1f28 <u8g2_DrawLine+0xa6>
    1f3e:	f2 cf       	rjmp	.-28     	; 0x1f24 <u8g2_DrawLine+0xa2>

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    1f40:	e2 2e       	mov	r14, r18
    1f42:	e6 1a       	sub	r14, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    1f44:	01 17       	cp	r16, r17
    1f46:	08 f4       	brcc	.+2      	; 0x1f4a <u8g2_DrawLine+0xc8>
    1f48:	b1 cf       	rjmp	.-158    	; 0x1eac <u8g2_DrawLine+0x2a>
    1f4a:	b0 2e       	mov	r11, r16
    1f4c:	b1 1a       	sub	r11, r17

  if ( dy > dx ) 
    1f4e:	eb 14       	cp	r14, r11
    1f50:	60 f1       	brcs	.+88     	; 0x1faa <u8g2_DrawLine+0x128>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    1f52:	fc 16       	cp	r15, r28
    1f54:	f0 f0       	brcs	.+60     	; 0x1f92 <u8g2_DrawLine+0x110>
    1f56:	8b 2d       	mov	r24, r11
    1f58:	be 2c       	mov	r11, r14
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    1f5a:	e8 2e       	mov	r14, r24
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    1f5c:	80 e0       	ldi	r24, 0x00	; 0
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1f5e:	db 2d       	mov	r29, r11
    1f60:	d6 95       	lsr	r29
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    1f62:	10 17       	cp	r17, r16
    1f64:	08 f0       	brcs	.+2      	; 0x1f68 <u8g2_DrawLine+0xe6>
    1f66:	b3 cf       	rjmp	.-154    	; 0x1ece <u8g2_DrawLine+0x4c>
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1f68:	01 e0       	ldi	r16, 0x01	; 1
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
  y = y1;

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    1f6a:	9f ef       	ldi	r25, 0xFF	; 255
    1f6c:	f9 12       	cpse	r15, r25
    1f6e:	b4 cf       	rjmp	.-152    	; 0x1ed8 <u8g2_DrawLine+0x56>
    x2--;
    1f70:	9e ef       	ldi	r25, 0xFE	; 254
    1f72:	f9 2e       	mov	r15, r25
    1f74:	b1 cf       	rjmp	.-158    	; 0x1ed8 <u8g2_DrawLine+0x56>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    1f76:	fc 16       	cp	r15, r28
    1f78:	70 f7       	brcc	.-36     	; 0x1f56 <u8g2_DrawLine+0xd4>
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1f7a:	de 2d       	mov	r29, r14
    1f7c:	d6 95       	lsr	r29
    1f7e:	8e 2d       	mov	r24, r14
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    1f80:	eb 2c       	mov	r14, r11
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1f82:	b8 2e       	mov	r11, r24
    1f84:	10 2f       	mov	r17, r16
    1f86:	8c 2f       	mov	r24, r28
    1f88:	cf 2d       	mov	r28, r15
    1f8a:	f8 2e       	mov	r15, r24
    1f8c:	80 e0       	ldi	r24, 0x00	; 0
    1f8e:	01 e0       	ldi	r16, 0x01	; 1
    1f90:	ec cf       	rjmp	.-40     	; 0x1f6a <u8g2_DrawLine+0xe8>
    1f92:	de 2d       	mov	r29, r14
    1f94:	d6 95       	lsr	r29
    1f96:	8e 2d       	mov	r24, r14
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    1f98:	eb 2c       	mov	r14, r11
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    1f9a:	b8 2e       	mov	r11, r24
    1f9c:	10 2f       	mov	r17, r16
    1f9e:	8c 2f       	mov	r24, r28
    1fa0:	cf 2d       	mov	r28, r15
    1fa2:	f8 2e       	mov	r15, r24
    1fa4:	80 e0       	ldi	r24, 0x00	; 0
    1fa6:	0f ef       	ldi	r16, 0xFF	; 255
    1fa8:	93 cf       	rjmp	.-218    	; 0x1ed0 <u8g2_DrawLine+0x4e>
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    1faa:	8f 2d       	mov	r24, r15
    1fac:	f0 2e       	mov	r15, r16
    1fae:	08 2f       	mov	r16, r24
    1fb0:	8c 2f       	mov	r24, r28
    1fb2:	c1 2f       	mov	r28, r17
    1fb4:	18 2f       	mov	r17, r24
  {
    swapxy = 1;
    1fb6:	81 e0       	ldi	r24, 0x01	; 1
    1fb8:	85 cf       	rjmp	.-246    	; 0x1ec4 <u8g2_DrawLine+0x42>

00001fba <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    1fba:	ff 92       	push	r15
    1fbc:	0f 93       	push	r16
    1fbe:	1f 93       	push	r17
    1fc0:	cf 93       	push	r28
    1fc2:	df 93       	push	r29
    1fc4:	dc 01       	movw	r26, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    1fc6:	34 2f       	mov	r19, r20
    1fc8:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    1fca:	81 e0       	ldi	r24, 0x01	; 1
    1fcc:	90 e0       	ldi	r25, 0x00	; 0
    1fce:	03 2e       	mov	r0, r19
    1fd0:	01 c0       	rjmp	.+2      	; 0x1fd4 <u8g2_ll_hvline_vertical_top_lsb+0x1a>
    1fd2:	88 0f       	add	r24, r24
    1fd4:	0a 94       	dec	r0
    1fd6:	ea f7       	brpl	.-6      	; 0x1fd2 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    1fd8:	18 2f       	mov	r17, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    1fda:	ed 01       	movw	r28, r26
    1fdc:	cd 59       	subi	r28, 0x9D	; 157
    1fde:	df 4f       	sbci	r29, 0xFF	; 255
    1fe0:	58 81       	ld	r21, Y
    1fe2:	52 30       	cpi	r21, 0x02	; 2
    1fe4:	e8 f1       	brcs	.+122    	; 0x2060 <u8g2_ll_hvline_vertical_top_lsb+0xa6>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    1fe6:	70 e0       	ldi	r23, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    1fe8:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    1fea:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    1fec:	92 96       	adiw	r26, 0x22	; 34
    1fee:	8d 91       	ld	r24, X+
    1ff0:	9c 91       	ld	r25, X
    1ff2:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1ff4:	ed 91       	ld	r30, X+
    1ff6:	fc 91       	ld	r31, X
    1ff8:	11 97       	sbiw	r26, 0x01	; 1
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    1ffa:	f0 88       	ldd	r15, Z+16	; 0x10
    1ffc:	f4 9e       	mul	r15, r20
    1ffe:	f0 01       	movw	r30, r0
    2000:	f5 9e       	mul	r15, r21
    2002:	f0 0d       	add	r31, r0
    2004:	11 24       	eor	r1, r1
    2006:	e6 0f       	add	r30, r22
    2008:	f1 1d       	adc	r31, r1
    200a:	e8 0f       	add	r30, r24
    200c:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    200e:	01 11       	cpse	r16, r1
    2010:	17 c0       	rjmp	.+46     	; 0x2040 <u8g2_ll_hvline_vertical_top_lsb+0x86>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    2012:	80 81       	ld	r24, Z
    2014:	87 2b       	or	r24, r23
    2016:	81 27       	eor	r24, r17
    2018:	81 93       	st	Z+, r24
	ptr++;
	len--;
    201a:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    201c:	d1 f7       	brne	.-12     	; 0x2012 <u8g2_ll_hvline_vertical_top_lsb+0x58>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    201e:	df 91       	pop	r29
    2020:	cf 91       	pop	r28
    2022:	1f 91       	pop	r17
    2024:	0f 91       	pop	r16
    2026:	ff 90       	pop	r15
    2028:	08 95       	ret

      len--;

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    202a:	96 96       	adiw	r26, 0x26	; 38
    202c:	8c 91       	ld	r24, X
    202e:	96 97       	sbiw	r26, 0x26	; 38
    2030:	e8 0f       	add	r30, r24
    2032:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    2034:	88 81       	ld	r24, Y
    2036:	82 30       	cpi	r24, 0x02	; 2
    2038:	78 f0       	brcs	.+30     	; 0x2058 <u8g2_ll_hvline_vertical_top_lsb+0x9e>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    203a:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    203c:	22 23       	and	r18, r18
    203e:	79 f3       	breq	.-34     	; 0x201e <u8g2_ll_hvline_vertical_top_lsb+0x64>
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    2040:	90 81       	ld	r25, Z
    2042:	97 2b       	or	r25, r23
    2044:	91 27       	eor	r25, r17
    2046:	90 83       	st	Z, r25
      
      bit_pos++;
    2048:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    204a:	37 70       	andi	r19, 0x07	; 7

      len--;
    204c:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    204e:	33 23       	and	r19, r19
    2050:	61 f3       	breq	.-40     	; 0x202a <u8g2_ll_hvline_vertical_top_lsb+0x70>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    2052:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    2054:	11 0f       	add	r17, r17
    2056:	f2 cf       	rjmp	.-28     	; 0x203c <u8g2_ll_hvline_vertical_top_lsb+0x82>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    2058:	81 30       	cpi	r24, 0x01	; 1
    205a:	41 f4       	brne	.+16     	; 0x206c <u8g2_ll_hvline_vertical_top_lsb+0xb2>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    205c:	71 e0       	ldi	r23, 0x01	; 1
    205e:	ee cf       	rjmp	.-36     	; 0x203c <u8g2_ll_hvline_vertical_top_lsb+0x82>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    2060:	78 2f       	mov	r23, r24
  if ( u8g2->draw_color != 1 )
    2062:	51 30       	cpi	r21, 0x01	; 1
    2064:	09 f0       	breq	.+2      	; 0x2068 <u8g2_ll_hvline_vertical_top_lsb+0xae>
    2066:	c0 cf       	rjmp	.-128    	; 0x1fe8 <u8g2_ll_hvline_vertical_top_lsb+0x2e>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    2068:	10 e0       	ldi	r17, 0x00	; 0
    206a:	be cf       	rjmp	.-132    	; 0x1fe8 <u8g2_ll_hvline_vertical_top_lsb+0x2e>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    206c:	11 e0       	ldi	r17, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    206e:	71 e0       	ldi	r23, 0x01	; 1
    2070:	e5 cf       	rjmp	.-54     	; 0x203c <u8g2_ll_hvline_vertical_top_lsb+0x82>

00002072 <u8g2_draw_l90_r0>:
{
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
    2072:	0f 93       	push	r16
    2074:	0e 94 6b 0e 	call	0x1cd6	; 0x1cd6 <u8g2_draw_hv_line_2dir>
    2078:	0f 91       	pop	r16
    207a:	08 95       	ret

0000207c <u8g2_update_dimension_r0>:
    207c:	fc 01       	movw	r30, r24
    207e:	a0 81       	ld	r26, Z
    2080:	b1 81       	ldd	r27, Z+1	; 0x01
    2082:	64 a1       	ldd	r22, Z+36	; 0x24
    2084:	86 2f       	mov	r24, r22
    2086:	88 0f       	add	r24, r24
    2088:	88 0f       	add	r24, r24
    208a:	88 0f       	add	r24, r24
    208c:	87 a3       	std	Z+39, r24	; 0x27
    208e:	50 96       	adiw	r26, 0x10	; 16
    2090:	9c 91       	ld	r25, X
    2092:	50 97       	sbiw	r26, 0x10	; 16
    2094:	90 32       	cpi	r25, 0x20	; 32
    2096:	08 f0       	brcs	.+2      	; 0x209a <u8g2_update_dimension_r0+0x1e>
    2098:	9f e1       	ldi	r25, 0x1F	; 31
    209a:	99 0f       	add	r25, r25
    209c:	99 0f       	add	r25, r25
    209e:	99 0f       	add	r25, r25
    20a0:	96 a3       	std	Z+38, r25	; 0x26
    20a2:	55 a1       	ldd	r21, Z+37	; 0x25
    20a4:	95 2f       	mov	r25, r21
    20a6:	99 0f       	add	r25, r25
    20a8:	99 0f       	add	r25, r25
    20aa:	99 0f       	add	r25, r25
    20ac:	90 a7       	std	Z+40, r25	; 0x28
    20ae:	51 96       	adiw	r26, 0x11	; 17
    20b0:	4c 91       	ld	r20, X
    20b2:	51 97       	sbiw	r26, 0x11	; 17
    20b4:	25 2f       	mov	r18, r21
    20b6:	30 e0       	ldi	r19, 0x00	; 0
    20b8:	26 0f       	add	r18, r22
    20ba:	31 1d       	adc	r19, r1
    20bc:	64 2f       	mov	r22, r20
    20be:	70 e0       	ldi	r23, 0x00	; 0
    20c0:	62 17       	cp	r22, r18
    20c2:	73 07       	cpc	r23, r19
    20c4:	2c f4       	brge	.+10     	; 0x20d0 <u8g2_update_dimension_r0+0x54>
    20c6:	84 2f       	mov	r24, r20
    20c8:	85 1b       	sub	r24, r21
    20ca:	88 0f       	add	r24, r24
    20cc:	88 0f       	add	r24, r24
    20ce:	88 0f       	add	r24, r24
    20d0:	91 a7       	std	Z+41, r25	; 0x29
    20d2:	89 0f       	add	r24, r25
    20d4:	82 a7       	std	Z+42, r24	; 0x2a
    20d6:	80 ef       	ldi	r24, 0xF0	; 240
    20d8:	83 a7       	std	Z+43, r24	; 0x2b
    20da:	54 96       	adiw	r26, 0x14	; 20
    20dc:	8d 91       	ld	r24, X+
    20de:	9c 91       	ld	r25, X
    20e0:	55 97       	sbiw	r26, 0x15	; 21
    20e2:	81 3f       	cpi	r24, 0xF1	; 241
    20e4:	91 05       	cpc	r25, r1
    20e6:	08 f4       	brcc	.+2      	; 0x20ea <u8g2_update_dimension_r0+0x6e>
    20e8:	83 a7       	std	Z+43, r24	; 0x2b
    20ea:	56 96       	adiw	r26, 0x16	; 22
    20ec:	8c 91       	ld	r24, X
    20ee:	84 a7       	std	Z+44, r24	; 0x2c
    20f0:	08 95       	ret

000020f2 <u8g2_update_page_win_r0>:
    20f2:	0f 93       	push	r16
    20f4:	cf 93       	push	r28
    20f6:	df 93       	push	r29
    20f8:	ec 01       	movw	r28, r24
    20fa:	1d a6       	std	Y+45, r1	; 0x2d
    20fc:	8b a5       	ldd	r24, Y+43	; 0x2b
    20fe:	8e a7       	std	Y+46, r24	; 0x2e
    2100:	89 a5       	ldd	r24, Y+41	; 0x29
    2102:	8f a7       	std	Y+47, r24	; 0x2f
    2104:	8a a5       	ldd	r24, Y+42	; 0x2a
    2106:	88 ab       	std	Y+48, r24	; 0x30
    2108:	0c a9       	ldd	r16, Y+52	; 0x34
    210a:	2a a9       	ldd	r18, Y+50	; 0x32
    210c:	4b a9       	ldd	r20, Y+51	; 0x33
    210e:	69 a9       	ldd	r22, Y+49	; 0x31
    2110:	ce 01       	movw	r24, r28
    2112:	0e 94 22 0f 	call	0x1e44	; 0x1e44 <u8g2_IsIntersection>
    2116:	88 23       	and	r24, r24
    2118:	e9 f0       	breq	.+58     	; 0x2154 <u8g2_update_page_win_r0+0x62>
    211a:	81 e0       	ldi	r24, 0x01	; 1
    211c:	fe 01       	movw	r30, r28
    211e:	e3 5a       	subi	r30, 0xA3	; 163
    2120:	ff 4f       	sbci	r31, 0xFF	; 255
    2122:	80 83       	st	Z, r24
    2124:	89 a9       	ldd	r24, Y+49	; 0x31
    2126:	9d a5       	ldd	r25, Y+45	; 0x2d
    2128:	98 17       	cp	r25, r24
    212a:	08 f4       	brcc	.+2      	; 0x212e <u8g2_update_page_win_r0+0x3c>
    212c:	8d a7       	std	Y+45, r24	; 0x2d
    212e:	8a a9       	ldd	r24, Y+50	; 0x32
    2130:	9e a5       	ldd	r25, Y+46	; 0x2e
    2132:	89 17       	cp	r24, r25
    2134:	08 f4       	brcc	.+2      	; 0x2138 <u8g2_update_page_win_r0+0x46>
    2136:	8e a7       	std	Y+46, r24	; 0x2e
    2138:	8b a9       	ldd	r24, Y+51	; 0x33
    213a:	9f a5       	ldd	r25, Y+47	; 0x2f
    213c:	98 17       	cp	r25, r24
    213e:	08 f4       	brcc	.+2      	; 0x2142 <u8g2_update_page_win_r0+0x50>
    2140:	8f a7       	std	Y+47, r24	; 0x2f
    2142:	8c a9       	ldd	r24, Y+52	; 0x34
    2144:	98 a9       	ldd	r25, Y+48	; 0x30
    2146:	89 17       	cp	r24, r25
    2148:	08 f4       	brcc	.+2      	; 0x214c <u8g2_update_page_win_r0+0x5a>
    214a:	88 ab       	std	Y+48, r24	; 0x30
    214c:	df 91       	pop	r29
    214e:	cf 91       	pop	r28
    2150:	0f 91       	pop	r16
    2152:	08 95       	ret
    2154:	c3 5a       	subi	r28, 0xA3	; 163
    2156:	df 4f       	sbci	r29, 0xFF	; 255
    2158:	18 82       	st	Y, r1
    215a:	df 91       	pop	r29
    215c:	cf 91       	pop	r28
    215e:	0f 91       	pop	r16
    2160:	08 95       	ret

00002162 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    2162:	0f 93       	push	r16
    2164:	1f 93       	push	r17
    2166:	cf 93       	push	r28
    2168:	df 93       	push	r29
    216a:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    216c:	1e aa       	std	Y+54, r1	; 0x36
    216e:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    2170:	3f 8f       	std	Y+31, r19	; 0x1f
    2172:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    2174:	7b a3       	std	Y+35, r23	; 0x23
    2176:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    2178:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    217a:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    217c:	fc 01       	movw	r30, r24
    217e:	ee 5b       	subi	r30, 0xBE	; 190
    2180:	ff 4f       	sbci	r31, 0xFF	; 255
    2182:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    2184:	b0 96       	adiw	r30, 0x20	; 32
    2186:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    2188:	31 96       	adiw	r30, 0x01	; 1
    218a:	81 e0       	ldi	r24, 0x01	; 1
    218c:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    218e:	31 96       	adiw	r30, 0x01	; 1
    2190:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    2192:	19 a3       	std	Y+33, r17	; 0x21
    2194:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    2196:	d8 01       	movw	r26, r16
    2198:	ed 91       	ld	r30, X+
    219a:	fc 91       	ld	r31, X
    219c:	ce 01       	movw	r24, r28
    219e:	09 95       	icall

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
  u8g2->clip_x0 = 0;
    21a0:	19 aa       	std	Y+49, r1	; 0x31
  u8g2->clip_y0 = 0;
    21a2:	1b aa       	std	Y+51, r1	; 0x33
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    21a4:	8f ef       	ldi	r24, 0xFF	; 255
    21a6:	8a ab       	std	Y+50, r24	; 0x32
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    21a8:	8c ab       	std	Y+52, r24	; 0x34
  
  u8g2->cb->update_page_win(u8g2);
    21aa:	e8 a1       	ldd	r30, Y+32	; 0x20
    21ac:	f9 a1       	ldd	r31, Y+33	; 0x21
    21ae:	02 80       	ldd	r0, Z+2	; 0x02
    21b0:	f3 81       	ldd	r31, Z+3	; 0x03
    21b2:	e0 2d       	mov	r30, r0
    21b4:	ce 01       	movw	r24, r28
    21b6:	09 95       	icall
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    21b8:	ce 01       	movw	r24, r28
    21ba:	0e 94 90 0d 	call	0x1b20	; 0x1b20 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    21be:	cb 5b       	subi	r28, 0xBB	; 187
    21c0:	df 4f       	sbci	r29, 0xFF	; 255
    21c2:	18 82       	st	Y, r1
#endif
}
    21c4:	df 91       	pop	r29
    21c6:	cf 91       	pop	r28
    21c8:	1f 91       	pop	r17
    21ca:	0f 91       	pop	r16
    21cc:	08 95       	ret

000021ce <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    21ce:	61 11       	cpse	r22, r1
    21d0:	03 c0       	rjmp	.+6      	; 0x21d8 <u8x8_ascii_next+0xa>
    21d2:	8f ef       	ldi	r24, 0xFF	; 255
    21d4:	9f ef       	ldi	r25, 0xFF	; 255
    21d6:	08 95       	ret
    21d8:	6a 30       	cpi	r22, 0x0A	; 10
    21da:	d9 f3       	breq	.-10     	; 0x21d2 <u8x8_ascii_next+0x4>
    21dc:	86 2f       	mov	r24, r22
    21de:	90 e0       	ldi	r25, 0x00	; 0
    21e0:	08 95       	ret

000021e2 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    21e2:	fc 01       	movw	r30, r24
    21e4:	10 8e       	std	Z+24, r1	; 0x18
    21e6:	08 95       	ret

000021e8 <u8x8_init_conf>:
			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
				break;

			__asm__ __volatile__ (
    21e8:	fc 01       	movw	r30, r24
    21ea:	99 e1       	ldi	r25, 0x19	; 25
    21ec:	a6 e2       	ldi	r26, 0x26	; 38
    21ee:	b7 e0       	ldi	r27, 0x07	; 7
    21f0:	01 90       	ld	r0, Z+
    21f2:	0d 92       	st	X+, r0
    21f4:	9a 95       	dec	r25
    21f6:	e1 f7       	brne	.-8      	; 0x21f0 <u8x8_init_conf+0x8>
    21f8:	08 95       	ret

000021fa <u8x8_byte_avr_hw_spi>:
    21fa:	0f 93       	push	r16
    21fc:	1f 93       	push	r17
    21fe:	cf 93       	push	r28
    2200:	df 93       	push	r29
    2202:	ec 01       	movw	r28, r24
    2204:	68 31       	cpi	r22, 0x18	; 24
    2206:	09 f4       	brne	.+2      	; 0x220a <u8x8_byte_avr_hw_spi+0x10>
    2208:	96 c0       	rjmp	.+300    	; 0x2336 <u8x8_byte_avr_hw_spi+0x13c>
    220a:	a0 f4       	brcc	.+40     	; 0x2234 <u8x8_byte_avr_hw_spi+0x3a>
    220c:	64 31       	cpi	r22, 0x14	; 20
    220e:	c1 f1       	breq	.+112    	; 0x2280 <u8x8_byte_avr_hw_spi+0x86>
    2210:	67 31       	cpi	r22, 0x17	; 23
    2212:	e9 f4       	brne	.+58     	; 0x224e <u8x8_byte_avr_hw_spi+0x54>
    2214:	44 23       	and	r20, r20
    2216:	41 f0       	breq	.+16     	; 0x2228 <u8x8_byte_avr_hw_spi+0x2e>
    2218:	f9 01       	movw	r30, r18
    221a:	81 91       	ld	r24, Z+
    221c:	8e bd       	out	0x2e, r24	; 46
    221e:	0d b4       	in	r0, 0x2d	; 45
    2220:	07 fe       	sbrs	r0, 7
    2222:	fd cf       	rjmp	.-6      	; 0x221e <u8x8_byte_avr_hw_spi+0x24>
    2224:	41 50       	subi	r20, 0x01	; 1
    2226:	c9 f7       	brne	.-14     	; 0x221a <u8x8_byte_avr_hw_spi+0x20>
    2228:	81 e0       	ldi	r24, 0x01	; 1
    222a:	df 91       	pop	r29
    222c:	cf 91       	pop	r28
    222e:	1f 91       	pop	r17
    2230:	0f 91       	pop	r16
    2232:	08 95       	ret
    2234:	69 31       	cpi	r22, 0x19	; 25
    2236:	89 f0       	breq	.+34     	; 0x225a <u8x8_byte_avr_hw_spi+0x60>
    2238:	60 32       	cpi	r22, 0x20	; 32
    223a:	49 f4       	brne	.+18     	; 0x224e <u8x8_byte_avr_hw_spi+0x54>
    223c:	6a e4       	ldi	r22, 0x4A	; 74
    223e:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    2242:	81 e0       	ldi	r24, 0x01	; 1
    2244:	df 91       	pop	r29
    2246:	cf 91       	pop	r28
    2248:	1f 91       	pop	r17
    224a:	0f 91       	pop	r16
    224c:	08 95       	ret
    224e:	80 e0       	ldi	r24, 0x00	; 0
    2250:	df 91       	pop	r29
    2252:	cf 91       	pop	r28
    2254:	1f 91       	pop	r17
    2256:	0f 91       	pop	r16
    2258:	08 95       	ret
    225a:	a8 81       	ld	r26, Y
    225c:	b9 81       	ldd	r27, Y+1	; 0x01
    225e:	ea 85       	ldd	r30, Y+10	; 0x0a
    2260:	fb 85       	ldd	r31, Y+11	; 0x0b
    2262:	20 e0       	ldi	r18, 0x00	; 0
    2264:	30 e0       	ldi	r19, 0x00	; 0
    2266:	13 96       	adiw	r26, 0x03	; 3
    2268:	4c 91       	ld	r20, X
    226a:	6c e2       	ldi	r22, 0x2C	; 44
    226c:	09 95       	icall
    226e:	e8 81       	ld	r30, Y
    2270:	f9 81       	ldd	r31, Y+1	; 0x01
    2272:	41 81       	ldd	r20, Z+1	; 0x01
    2274:	69 e4       	ldi	r22, 0x49	; 73
    2276:	ce 01       	movw	r24, r28
    2278:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    227c:	81 e0       	ldi	r24, 0x01	; 1
    227e:	d5 cf       	rjmp	.-86     	; 0x222a <u8x8_byte_avr_hw_spi+0x30>
    2280:	e0 91 26 07 	lds	r30, 0x0726	; 0x800726 <hal_conf>
    2284:	f0 91 27 07 	lds	r31, 0x0727	; 0x800727 <hal_conf+0x1>
    2288:	40 81       	ld	r20, Z
    228a:	81 e0       	ldi	r24, 0x01	; 1
    228c:	90 e0       	ldi	r25, 0x00	; 0
    228e:	9c 01       	movw	r18, r24
    2290:	00 90 2a 07 	lds	r0, 0x072A	; 0x80072a <hal_conf+0x4>
    2294:	02 c0       	rjmp	.+4      	; 0x229a <u8x8_byte_avr_hw_spi+0xa0>
    2296:	22 0f       	add	r18, r18
    2298:	33 1f       	adc	r19, r19
    229a:	0a 94       	dec	r0
    229c:	e2 f7       	brpl	.-8      	; 0x2296 <u8x8_byte_avr_hw_spi+0x9c>
    229e:	24 2b       	or	r18, r20
    22a0:	20 83       	st	Z, r18
    22a2:	e0 91 2b 07 	lds	r30, 0x072B	; 0x80072b <hal_conf+0x5>
    22a6:	f0 91 2c 07 	lds	r31, 0x072C	; 0x80072c <hal_conf+0x6>
    22aa:	20 81       	ld	r18, Z
    22ac:	00 90 2f 07 	lds	r0, 0x072F	; 0x80072f <hal_conf+0x9>
    22b0:	02 c0       	rjmp	.+4      	; 0x22b6 <u8x8_byte_avr_hw_spi+0xbc>
    22b2:	88 0f       	add	r24, r24
    22b4:	99 1f       	adc	r25, r25
    22b6:	0a 94       	dec	r0
    22b8:	e2 f7       	brpl	.-8      	; 0x22b2 <u8x8_byte_avr_hw_spi+0xb8>
    22ba:	82 2b       	or	r24, r18
    22bc:	80 83       	st	Z, r24
    22be:	80 e5       	ldi	r24, 0x50	; 80
    22c0:	8c bd       	out	0x2c, r24	; 44
    22c2:	08 81       	ld	r16, Y
    22c4:	19 81       	ldd	r17, Y+1	; 0x01
    22c6:	f8 01       	movw	r30, r16
    22c8:	84 85       	ldd	r24, Z+12	; 0x0c
    22ca:	82 30       	cpi	r24, 0x02	; 2
    22cc:	09 f4       	brne	.+2      	; 0x22d0 <u8x8_byte_avr_hw_spi+0xd6>
    22ce:	78 c0       	rjmp	.+240    	; 0x23c0 <u8x8_byte_avr_hw_spi+0x1c6>
    22d0:	83 30       	cpi	r24, 0x03	; 3
    22d2:	09 f4       	brne	.+2      	; 0x22d6 <u8x8_byte_avr_hw_spi+0xdc>
    22d4:	47 c0       	rjmp	.+142    	; 0x2364 <u8x8_byte_avr_hw_spi+0x16a>
    22d6:	81 30       	cpi	r24, 0x01	; 1
    22d8:	09 f4       	brne	.+2      	; 0x22dc <u8x8_byte_avr_hw_spi+0xe2>
    22da:	47 c0       	rjmp	.+142    	; 0x236a <u8x8_byte_avr_hw_spi+0x170>
    22dc:	f8 01       	movw	r30, r16
    22de:	20 85       	ldd	r18, Z+8	; 0x08
    22e0:	31 85       	ldd	r19, Z+9	; 0x09
    22e2:	42 85       	ldd	r20, Z+10	; 0x0a
    22e4:	53 85       	ldd	r21, Z+11	; 0x0b
    22e6:	60 e0       	ldi	r22, 0x00	; 0
    22e8:	74 e2       	ldi	r23, 0x24	; 36
    22ea:	84 ef       	ldi	r24, 0xF4	; 244
    22ec:	90 e0       	ldi	r25, 0x00	; 0
    22ee:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__udivmodsi4>
    22f2:	20 31       	cpi	r18, 0x10	; 16
    22f4:	31 05       	cpc	r19, r1
    22f6:	41 05       	cpc	r20, r1
    22f8:	51 05       	cpc	r21, r1
    22fa:	09 f4       	brne	.+2      	; 0x22fe <u8x8_byte_avr_hw_spi+0x104>
    22fc:	53 c0       	rjmp	.+166    	; 0x23a4 <u8x8_byte_avr_hw_spi+0x1aa>
    22fe:	d8 f1       	brcs	.+118    	; 0x2376 <u8x8_byte_avr_hw_spi+0x17c>
    2300:	20 34       	cpi	r18, 0x40	; 64
    2302:	31 05       	cpc	r19, r1
    2304:	41 05       	cpc	r20, r1
    2306:	51 05       	cpc	r21, r1
    2308:	09 f4       	brne	.+2      	; 0x230c <u8x8_byte_avr_hw_spi+0x112>
    230a:	60 c0       	rjmp	.+192    	; 0x23cc <u8x8_byte_avr_hw_spi+0x1d2>
    230c:	20 38       	cpi	r18, 0x80	; 128
    230e:	31 05       	cpc	r19, r1
    2310:	41 05       	cpc	r20, r1
    2312:	51 05       	cpc	r21, r1
    2314:	09 f4       	brne	.+2      	; 0x2318 <u8x8_byte_avr_hw_spi+0x11e>
    2316:	43 c0       	rjmp	.+134    	; 0x239e <u8x8_byte_avr_hw_spi+0x1a4>
    2318:	20 32       	cpi	r18, 0x20	; 32
    231a:	31 05       	cpc	r19, r1
    231c:	41 05       	cpc	r20, r1
    231e:	51 05       	cpc	r21, r1
    2320:	41 f4       	brne	.+16     	; 0x2332 <u8x8_byte_avr_hw_spi+0x138>
    2322:	8d b5       	in	r24, 0x2d	; 45
    2324:	81 60       	ori	r24, 0x01	; 1
    2326:	8d bd       	out	0x2d, r24	; 45
    2328:	8c b5       	in	r24, 0x2c	; 44
    232a:	82 60       	ori	r24, 0x02	; 2
    232c:	8c bd       	out	0x2c, r24	; 44
    232e:	08 81       	ld	r16, Y
    2330:	19 81       	ldd	r17, Y+1	; 0x01
    2332:	f8 01       	movw	r30, r16
    2334:	9e cf       	rjmp	.-196    	; 0x2272 <u8x8_byte_avr_hw_spi+0x78>
    2336:	e8 81       	ld	r30, Y
    2338:	f9 81       	ldd	r31, Y+1	; 0x01
    233a:	40 81       	ld	r20, Z
    233c:	69 e4       	ldi	r22, 0x49	; 73
    233e:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    2342:	a8 81       	ld	r26, Y
    2344:	b9 81       	ldd	r27, Y+1	; 0x01
    2346:	ea 85       	ldd	r30, Y+10	; 0x0a
    2348:	fb 85       	ldd	r31, Y+11	; 0x0b
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	12 96       	adiw	r26, 0x02	; 2
    2350:	4c 91       	ld	r20, X
    2352:	6c e2       	ldi	r22, 0x2C	; 44
    2354:	ce 01       	movw	r24, r28
    2356:	09 95       	icall
    2358:	81 e0       	ldi	r24, 0x01	; 1
    235a:	df 91       	pop	r29
    235c:	cf 91       	pop	r28
    235e:	1f 91       	pop	r17
    2360:	0f 91       	pop	r16
    2362:	08 95       	ret
    2364:	8c b5       	in	r24, 0x2c	; 44
    2366:	88 60       	ori	r24, 0x08	; 8
    2368:	8c bd       	out	0x2c, r24	; 44
    236a:	8c b5       	in	r24, 0x2c	; 44
    236c:	84 60       	ori	r24, 0x04	; 4
    236e:	8c bd       	out	0x2c, r24	; 44
    2370:	08 81       	ld	r16, Y
    2372:	19 81       	ldd	r17, Y+1	; 0x01
    2374:	b3 cf       	rjmp	.-154    	; 0x22dc <u8x8_byte_avr_hw_spi+0xe2>
    2376:	22 30       	cpi	r18, 0x02	; 2
    2378:	31 05       	cpc	r19, r1
    237a:	41 05       	cpc	r20, r1
    237c:	51 05       	cpc	r21, r1
    237e:	c9 f0       	breq	.+50     	; 0x23b2 <u8x8_byte_avr_hw_spi+0x1b8>
    2380:	28 30       	cpi	r18, 0x08	; 8
    2382:	31 05       	cpc	r19, r1
    2384:	41 05       	cpc	r20, r1
    2386:	51 05       	cpc	r21, r1
    2388:	a1 f6       	brne	.-88     	; 0x2332 <u8x8_byte_avr_hw_spi+0x138>
    238a:	8d b5       	in	r24, 0x2d	; 45
    238c:	81 60       	ori	r24, 0x01	; 1
    238e:	8d bd       	out	0x2d, r24	; 45
    2390:	8c b5       	in	r24, 0x2c	; 44
    2392:	81 60       	ori	r24, 0x01	; 1
    2394:	8c bd       	out	0x2c, r24	; 44
    2396:	08 81       	ld	r16, Y
    2398:	19 81       	ldd	r17, Y+1	; 0x01
    239a:	f8 01       	movw	r30, r16
    239c:	6a cf       	rjmp	.-300    	; 0x2272 <u8x8_byte_avr_hw_spi+0x78>
    239e:	8c b5       	in	r24, 0x2c	; 44
    23a0:	82 60       	ori	r24, 0x02	; 2
    23a2:	8c bd       	out	0x2c, r24	; 44
    23a4:	8c b5       	in	r24, 0x2c	; 44
    23a6:	81 60       	ori	r24, 0x01	; 1
    23a8:	8c bd       	out	0x2c, r24	; 44
    23aa:	08 81       	ld	r16, Y
    23ac:	19 81       	ldd	r17, Y+1	; 0x01
    23ae:	f8 01       	movw	r30, r16
    23b0:	60 cf       	rjmp	.-320    	; 0x2272 <u8x8_byte_avr_hw_spi+0x78>
    23b2:	8d b5       	in	r24, 0x2d	; 45
    23b4:	81 60       	ori	r24, 0x01	; 1
    23b6:	8d bd       	out	0x2d, r24	; 45
    23b8:	08 81       	ld	r16, Y
    23ba:	19 81       	ldd	r17, Y+1	; 0x01
    23bc:	f8 01       	movw	r30, r16
    23be:	59 cf       	rjmp	.-334    	; 0x2272 <u8x8_byte_avr_hw_spi+0x78>
    23c0:	8c b5       	in	r24, 0x2c	; 44
    23c2:	88 60       	ori	r24, 0x08	; 8
    23c4:	8c bd       	out	0x2c, r24	; 44
    23c6:	08 81       	ld	r16, Y
    23c8:	19 81       	ldd	r17, Y+1	; 0x01
    23ca:	88 cf       	rjmp	.-240    	; 0x22dc <u8x8_byte_avr_hw_spi+0xe2>
    23cc:	8c b5       	in	r24, 0x2c	; 44
    23ce:	82 60       	ori	r24, 0x02	; 2
    23d0:	8c bd       	out	0x2c, r24	; 44
    23d2:	08 81       	ld	r16, Y
    23d4:	19 81       	ldd	r17, Y+1	; 0x01
    23d6:	f8 01       	movw	r30, r16
    23d8:	4c cf       	rjmp	.-360    	; 0x2272 <u8x8_byte_avr_hw_spi+0x78>

000023da <u8x8_gpio_and_delay>:
}

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    23da:	6a 32       	cpi	r22, 0x2A	; 42
    23dc:	69 f0       	breq	.+26     	; 0x23f8 <u8x8_gpio_and_delay+0x1e>
    23de:	08 f4       	brcc	.+2      	; 0x23e2 <u8x8_gpio_and_delay+0x8>
    23e0:	3f c0       	rjmp	.+126    	; 0x2460 <u8x8_gpio_and_delay+0x86>
    23e2:	6b 32       	cpi	r22, 0x2B	; 43
    23e4:	69 f0       	breq	.+26     	; 0x2400 <u8x8_gpio_and_delay+0x26>
    23e6:	6c 32       	cpi	r22, 0x2C	; 44
    23e8:	f1 f4       	brne	.+60     	; 0x2426 <u8x8_gpio_and_delay+0x4c>
		default:
			u8x8_SetGPIOResult(u8x8, 1);
		break;
	}
	return 1;
    23ea:	81 e0       	ldi	r24, 0x01	; 1
    23ec:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    23ee:	85 e3       	ldi	r24, 0x35	; 53
    23f0:	8a 95       	dec	r24
    23f2:	f1 f7       	brne	.-4      	; 0x23f0 <u8x8_gpio_and_delay+0x16>
    23f4:	00 00       	nop
    23f6:	41 50       	subi	r20, 0x01	; 1
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    23f8:	41 11       	cpse	r20, r1
    23fa:	f9 cf       	rjmp	.-14     	; 0x23ee <u8x8_gpio_and_delay+0x14>
		default:
			u8x8_SetGPIOResult(u8x8, 1);
		break;
	}
	return 1;
    23fc:	81 e0       	ldi	r24, 0x01	; 1
    23fe:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    2400:	24 2f       	mov	r18, r20
    2402:	30 e0       	ldi	r19, 0x00	; 0
    2404:	a4 e6       	ldi	r26, 0x64	; 100
    2406:	b0 e0       	ldi	r27, 0x00	; 0
    2408:	0e 94 24 15 	call	0x2a48	; 0x2a48 <__umulhisi3>
    240c:	28 ef       	ldi	r18, 0xF8	; 248
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e0       	ldi	r20, 0x00	; 0
    2412:	50 e0       	ldi	r21, 0x00	; 0
    2414:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    2418:	23 32       	cpi	r18, 0x23	; 35
    241a:	38 f7       	brcc	.-50     	; 0x23ea <u8x8_gpio_and_delay+0x10>
				break;

			__asm__ __volatile__ (
    241c:	82 2f       	mov	r24, r18
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	f1 f7       	brne	.-4      	; 0x241e <u8x8_gpio_and_delay+0x44>
		default:
			u8x8_SetGPIOResult(u8x8, 1);
		break;
	}
	return 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
    2424:	08 95       	ret
uint8_t u8x8_gpio_and_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	// Re-use library for delays
	if (u8x8_avr_delay(u8x8, msg, arg_int, arg_ptr))
	return 1;

	switch (msg) {
    2426:	69 34       	cpi	r22, 0x49	; 73
    2428:	09 f4       	brne	.+2      	; 0x242c <u8x8_gpio_and_delay+0x52>
    242a:	70 c0       	rjmp	.+224    	; 0x250c <u8x8_gpio_and_delay+0x132>
    242c:	e0 f1       	brcs	.+120    	; 0x24a6 <u8x8_gpio_and_delay+0xcc>
    242e:	6a 34       	cpi	r22, 0x4A	; 74
    2430:	29 f1       	breq	.+74     	; 0x247c <u8x8_gpio_and_delay+0xa2>
    2432:	6b 34       	cpi	r22, 0x4B	; 75
    2434:	09 f0       	breq	.+2      	; 0x2438 <u8x8_gpio_and_delay+0x5e>
    2436:	7c c0       	rjmp	.+248    	; 0x2530 <u8x8_gpio_and_delay+0x156>
				*(hal_conf.port_dc) &= ~(1 << hal_conf.pin_dc);
			break;
		// Reset pin: Output level in arg_int
		case U8X8_MSG_GPIO_RESET:
			if (arg_int)
				*(hal_conf.port_rst) |= (1 << hal_conf.pin_rst);
    2438:	e0 91 3c 07 	lds	r30, 0x073C	; 0x80073c <hal_conf+0x16>
    243c:	f0 91 3d 07 	lds	r31, 0x073D	; 0x80073d <hal_conf+0x17>
    2440:	20 81       	ld	r18, Z
    2442:	81 e0       	ldi	r24, 0x01	; 1
    2444:	90 e0       	ldi	r25, 0x00	; 0
    2446:	00 90 3e 07 	lds	r0, 0x073E	; 0x80073e <hal_conf+0x18>
    244a:	02 c0       	rjmp	.+4      	; 0x2450 <u8x8_gpio_and_delay+0x76>
    244c:	88 0f       	add	r24, r24
    244e:	99 1f       	adc	r25, r25
    2450:	0a 94       	dec	r0
    2452:	e2 f7       	brpl	.-8      	; 0x244c <u8x8_gpio_and_delay+0x72>
			else
				*(hal_conf.port_dc) &= ~(1 << hal_conf.pin_dc);
			break;
		// Reset pin: Output level in arg_int
		case U8X8_MSG_GPIO_RESET:
			if (arg_int)
    2454:	44 23       	and	r20, r20
    2456:	11 f1       	breq	.+68     	; 0x249c <u8x8_gpio_and_delay+0xc2>
				*(hal_conf.port_rst) |= (1 << hal_conf.pin_rst);
    2458:	82 2b       	or	r24, r18
    245a:	80 83       	st	Z, r24
		default:
			u8x8_SetGPIOResult(u8x8, 1);
		break;
	}
	return 1;
    245c:	81 e0       	ldi	r24, 0x01	; 1
    245e:	08 95       	ret
}

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    2460:	69 32       	cpi	r22, 0x29	; 41
    2462:	41 f0       	breq	.+16     	; 0x2474 <u8x8_gpio_and_delay+0x9a>
    2464:	e0 cf       	rjmp	.-64     	; 0x2426 <u8x8_gpio_and_delay+0x4c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    2466:	ef e9       	ldi	r30, 0x9F	; 159
    2468:	ff e0       	ldi	r31, 0x0F	; 15
    246a:	31 97       	sbiw	r30, 0x01	; 1
    246c:	f1 f7       	brne	.-4      	; 0x246a <u8x8_gpio_and_delay+0x90>
    246e:	00 c0       	rjmp	.+0      	; 0x2470 <u8x8_gpio_and_delay+0x96>
    2470:	00 00       	nop
    2472:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    2474:	41 11       	cpse	r20, r1
    2476:	f7 cf       	rjmp	.-18     	; 0x2466 <u8x8_gpio_and_delay+0x8c>
		default:
			u8x8_SetGPIOResult(u8x8, 1);
		break;
	}
	return 1;
    2478:	81 e0       	ldi	r24, 0x01	; 1
    247a:	08 95       	ret
				*(hal_conf.port_cs) &= ~(1 << hal_conf.pin_cs);
			break;
		// DC (data/cmd, A0, register select) pin: Output level in arg_int
		case U8X8_MSG_GPIO_DC:
			if (arg_int)
				*(hal_conf.port_dc) |= (1 << hal_conf.pin_dc);
    247c:	e0 91 37 07 	lds	r30, 0x0737	; 0x800737 <hal_conf+0x11>
    2480:	f0 91 38 07 	lds	r31, 0x0738	; 0x800738 <hal_conf+0x12>
    2484:	20 81       	ld	r18, Z
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	90 e0       	ldi	r25, 0x00	; 0
    248a:	00 90 39 07 	lds	r0, 0x0739	; 0x800739 <hal_conf+0x13>
    248e:	02 c0       	rjmp	.+4      	; 0x2494 <u8x8_gpio_and_delay+0xba>
    2490:	88 0f       	add	r24, r24
    2492:	99 1f       	adc	r25, r25
    2494:	0a 94       	dec	r0
    2496:	e2 f7       	brpl	.-8      	; 0x2490 <u8x8_gpio_and_delay+0xb6>
			else
				*(hal_conf.port_cs) &= ~(1 << hal_conf.pin_cs);
			break;
		// DC (data/cmd, A0, register select) pin: Output level in arg_int
		case U8X8_MSG_GPIO_DC:
			if (arg_int)
    2498:	41 11       	cpse	r20, r1
    249a:	de cf       	rjmp	.-68     	; 0x2458 <u8x8_gpio_and_delay+0x7e>
		// Reset pin: Output level in arg_int
		case U8X8_MSG_GPIO_RESET:
			if (arg_int)
				*(hal_conf.port_rst) |= (1 << hal_conf.pin_rst);
			else
				*(hal_conf.port_rst) &= ~(1 << hal_conf.pin_rst);
    249c:	80 95       	com	r24
    249e:	82 23       	and	r24, r18
    24a0:	80 83       	st	Z, r24
		default:
			u8x8_SetGPIOResult(u8x8, 1);
		break;
	}
	return 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	08 95       	ret
uint8_t u8x8_gpio_and_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	// Re-use library for delays
	if (u8x8_avr_delay(u8x8, msg, arg_int, arg_ptr))
	return 1;

	switch (msg) {
    24a6:	68 32       	cpi	r22, 0x28	; 40
    24a8:	09 f0       	breq	.+2      	; 0x24ac <u8x8_gpio_and_delay+0xd2>
    24aa:	42 c0       	rjmp	.+132    	; 0x2530 <u8x8_gpio_and_delay+0x156>
		// called once during init phase of u8g2/u8x8
		// can be used to setup pins
		case U8X8_MSG_GPIO_AND_DELAY_INIT:
			*(hal_conf.ddr_cs) |= (1 << hal_conf.pin_cs);
    24ac:	e0 91 30 07 	lds	r30, 0x0730	; 0x800730 <hal_conf+0xa>
    24b0:	f0 91 31 07 	lds	r31, 0x0731	; 0x800731 <hal_conf+0xb>
    24b4:	40 81       	ld	r20, Z
    24b6:	81 e0       	ldi	r24, 0x01	; 1
    24b8:	90 e0       	ldi	r25, 0x00	; 0
    24ba:	9c 01       	movw	r18, r24
    24bc:	00 90 34 07 	lds	r0, 0x0734	; 0x800734 <hal_conf+0xe>
    24c0:	02 c0       	rjmp	.+4      	; 0x24c6 <u8x8_gpio_and_delay+0xec>
    24c2:	22 0f       	add	r18, r18
    24c4:	33 1f       	adc	r19, r19
    24c6:	0a 94       	dec	r0
    24c8:	e2 f7       	brpl	.-8      	; 0x24c2 <u8x8_gpio_and_delay+0xe8>
    24ca:	24 2b       	or	r18, r20
    24cc:	20 83       	st	Z, r18
			*(hal_conf.ddr_dc) |= (1 << hal_conf.pin_dc);
    24ce:	e0 91 35 07 	lds	r30, 0x0735	; 0x800735 <hal_conf+0xf>
    24d2:	f0 91 36 07 	lds	r31, 0x0736	; 0x800736 <hal_conf+0x10>
    24d6:	40 81       	ld	r20, Z
    24d8:	9c 01       	movw	r18, r24
    24da:	00 90 39 07 	lds	r0, 0x0739	; 0x800739 <hal_conf+0x13>
    24de:	02 c0       	rjmp	.+4      	; 0x24e4 <u8x8_gpio_and_delay+0x10a>
    24e0:	22 0f       	add	r18, r18
    24e2:	33 1f       	adc	r19, r19
    24e4:	0a 94       	dec	r0
    24e6:	e2 f7       	brpl	.-8      	; 0x24e0 <u8x8_gpio_and_delay+0x106>
    24e8:	24 2b       	or	r18, r20
    24ea:	20 83       	st	Z, r18
			*(hal_conf.ddr_rst) |= (1 << hal_conf.pin_rst);
    24ec:	e0 91 3a 07 	lds	r30, 0x073A	; 0x80073a <hal_conf+0x14>
    24f0:	f0 91 3b 07 	lds	r31, 0x073B	; 0x80073b <hal_conf+0x15>
    24f4:	20 81       	ld	r18, Z
    24f6:	00 90 3e 07 	lds	r0, 0x073E	; 0x80073e <hal_conf+0x18>
    24fa:	02 c0       	rjmp	.+4      	; 0x2500 <u8x8_gpio_and_delay+0x126>
    24fc:	88 0f       	add	r24, r24
    24fe:	99 1f       	adc	r25, r25
    2500:	0a 94       	dec	r0
    2502:	e2 f7       	brpl	.-8      	; 0x24fc <u8x8_gpio_and_delay+0x122>
    2504:	82 2b       	or	r24, r18
    2506:	80 83       	st	Z, r24
		default:
			u8x8_SetGPIOResult(u8x8, 1);
		break;
	}
	return 1;
    2508:	81 e0       	ldi	r24, 0x01	; 1
    250a:	08 95       	ret
			*(hal_conf.ddr_rst) |= (1 << hal_conf.pin_rst);
		break;
		// CS (chip select) pin: Output level in arg_int
		case U8X8_MSG_GPIO_CS:
			if (arg_int)
				*(hal_conf.port_cs) |= (1 << hal_conf.pin_cs);
    250c:	e0 91 32 07 	lds	r30, 0x0732	; 0x800732 <hal_conf+0xc>
    2510:	f0 91 33 07 	lds	r31, 0x0733	; 0x800733 <hal_conf+0xd>
    2514:	20 81       	ld	r18, Z
    2516:	81 e0       	ldi	r24, 0x01	; 1
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	00 90 34 07 	lds	r0, 0x0734	; 0x800734 <hal_conf+0xe>
    251e:	02 c0       	rjmp	.+4      	; 0x2524 <u8x8_gpio_and_delay+0x14a>
    2520:	88 0f       	add	r24, r24
    2522:	99 1f       	adc	r25, r25
    2524:	0a 94       	dec	r0
    2526:	e2 f7       	brpl	.-8      	; 0x2520 <u8x8_gpio_and_delay+0x146>
			*(hal_conf.ddr_dc) |= (1 << hal_conf.pin_dc);
			*(hal_conf.ddr_rst) |= (1 << hal_conf.pin_rst);
		break;
		// CS (chip select) pin: Output level in arg_int
		case U8X8_MSG_GPIO_CS:
			if (arg_int)
    2528:	44 23       	and	r20, r20
    252a:	09 f4       	brne	.+2      	; 0x252e <u8x8_gpio_and_delay+0x154>
    252c:	b7 cf       	rjmp	.-146    	; 0x249c <u8x8_gpio_and_delay+0xc2>
    252e:	94 cf       	rjmp	.-216    	; 0x2458 <u8x8_gpio_and_delay+0x7e>
				*(hal_conf.port_rst) |= (1 << hal_conf.pin_rst);
			else
				*(hal_conf.port_rst) &= ~(1 << hal_conf.pin_rst);
			break;
		default:
			u8x8_SetGPIOResult(u8x8, 1);
    2530:	21 e0       	ldi	r18, 0x01	; 1
    2532:	fc 01       	movw	r30, r24
    2534:	21 8f       	std	Z+25, r18	; 0x19
		break;
	}
	return 1;
    2536:	81 e0       	ldi	r24, 0x01	; 1
    2538:	08 95       	ret

0000253a <u8x8_byte_SetDC>:
*/

#include "u8x8.h"

uint8_t u8x8_byte_SetDC(u8x8_t *u8x8, uint8_t dc)
{
    253a:	46 2f       	mov	r20, r22
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
    253c:	dc 01       	movw	r26, r24
    253e:	18 96       	adiw	r26, 0x08	; 8
    2540:	ed 91       	ld	r30, X+
    2542:	fc 91       	ld	r31, X
    2544:	19 97       	sbiw	r26, 0x09	; 9
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	30 e0       	ldi	r19, 0x00	; 0
    254a:	60 e2       	ldi	r22, 0x20	; 32
    254c:	09 94       	ijmp

0000254e <u8x8_byte_SendBytes>:
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    254e:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    2550:	dc 01       	movw	r26, r24
    2552:	18 96       	adiw	r26, 0x08	; 8
    2554:	ed 91       	ld	r30, X+
    2556:	fc 91       	ld	r31, X
    2558:	19 97       	sbiw	r26, 0x09	; 9
    255a:	46 2f       	mov	r20, r22
    255c:	67 e1       	ldi	r22, 0x17	; 23
    255e:	09 94       	ijmp

00002560 <u8x8_byte_SendByte>:
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    2560:	cf 93       	push	r28
    2562:	df 93       	push	r29
    2564:	1f 92       	push	r1
    2566:	cd b7       	in	r28, 0x3d	; 61
    2568:	de b7       	in	r29, 0x3e	; 62
    256a:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    256c:	ae 01       	movw	r20, r28
    256e:	4f 5f       	subi	r20, 0xFF	; 255
    2570:	5f 4f       	sbci	r21, 0xFF	; 255
    2572:	61 e0       	ldi	r22, 0x01	; 1
    2574:	0e 94 a7 12 	call	0x254e	; 0x254e <u8x8_byte_SendBytes>
}
    2578:	0f 90       	pop	r0
    257a:	df 91       	pop	r29
    257c:	cf 91       	pop	r28
    257e:	08 95       	ret

00002580 <u8x8_cad_SendCmd>:
      break;
    case U8X8_MSG_CAD_SEND_DATA:
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    2580:	46 2f       	mov	r20, r22
    2582:	dc 01       	movw	r26, r24
    2584:	16 96       	adiw	r26, 0x06	; 6
    2586:	ed 91       	ld	r30, X+
    2588:	fc 91       	ld	r31, X
    258a:	17 97       	sbiw	r26, 0x07	; 7
    258c:	20 e0       	ldi	r18, 0x00	; 0
    258e:	30 e0       	ldi	r19, 0x00	; 0
    2590:	65 e1       	ldi	r22, 0x15	; 21
    2592:	09 94       	ijmp

00002594 <u8x8_cad_SendData>:
    2594:	9a 01       	movw	r18, r20
    2596:	dc 01       	movw	r26, r24
    2598:	16 96       	adiw	r26, 0x06	; 6
    259a:	ed 91       	ld	r30, X+
    259c:	fc 91       	ld	r31, X
    259e:	17 97       	sbiw	r26, 0x07	; 7
    25a0:	46 2f       	mov	r20, r22
    25a2:	67 e1       	ldi	r22, 0x17	; 23
    25a4:	09 94       	ijmp

000025a6 <u8x8_cad_StartTransfer>:
    25a6:	dc 01       	movw	r26, r24
    25a8:	16 96       	adiw	r26, 0x06	; 6
    25aa:	ed 91       	ld	r30, X+
    25ac:	fc 91       	ld	r31, X
    25ae:	17 97       	sbiw	r26, 0x07	; 7
    25b0:	20 e0       	ldi	r18, 0x00	; 0
    25b2:	30 e0       	ldi	r19, 0x00	; 0
    25b4:	40 e0       	ldi	r20, 0x00	; 0
    25b6:	68 e1       	ldi	r22, 0x18	; 24
    25b8:	09 94       	ijmp

000025ba <u8x8_cad_EndTransfer>:
    25ba:	dc 01       	movw	r26, r24
    25bc:	16 96       	adiw	r26, 0x06	; 6
    25be:	ed 91       	ld	r30, X+
    25c0:	fc 91       	ld	r31, X
    25c2:	17 97       	sbiw	r26, 0x07	; 7
    25c4:	20 e0       	ldi	r18, 0x00	; 0
    25c6:	30 e0       	ldi	r19, 0x00	; 0
    25c8:	40 e0       	ldi	r20, 0x00	; 0
    25ca:	69 e1       	ldi	r22, 0x19	; 25
    25cc:	09 94       	ijmp

000025ce <u8x8_cad_110>:
  convert to bytes by using 
    dc = 1 for commands and args and
    dc = 0 for data
*/
uint8_t u8x8_cad_110(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    25ce:	ef 92       	push	r14
    25d0:	ff 92       	push	r15
    25d2:	0f 93       	push	r16
    25d4:	1f 93       	push	r17
    25d6:	cf 93       	push	r28
    25d8:	df 93       	push	r29
    25da:	8c 01       	movw	r16, r24
    25dc:	c6 2f       	mov	r28, r22
    25de:	d4 2f       	mov	r29, r20
    25e0:	79 01       	movw	r14, r18
  switch(msg)
    25e2:	66 31       	cpi	r22, 0x16	; 22
    25e4:	29 f0       	breq	.+10     	; 0x25f0 <u8x8_cad_110+0x22>
    25e6:	a0 f4       	brcc	.+40     	; 0x2610 <u8x8_cad_110+0x42>
    25e8:	64 31       	cpi	r22, 0x14	; 20
    25ea:	09 f1       	breq	.+66     	; 0x262e <u8x8_cad_110+0x60>
    25ec:	65 31       	cpi	r22, 0x15	; 21
    25ee:	a1 f4       	brne	.+40     	; 0x2618 <u8x8_cad_110+0x4a>
    case U8X8_MSG_CAD_SEND_CMD:
      u8x8_byte_SetDC(u8x8, 1);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
    25f0:	61 e0       	ldi	r22, 0x01	; 1
    25f2:	c8 01       	movw	r24, r16
    25f4:	0e 94 9d 12 	call	0x253a	; 0x253a <u8x8_byte_SetDC>
      u8x8_byte_SendByte(u8x8, arg_int);
    25f8:	6d 2f       	mov	r22, r29
    25fa:	c8 01       	movw	r24, r16
    25fc:	0e 94 b0 12 	call	0x2560	; 0x2560 <u8x8_byte_SendByte>
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
  }
  return 1;
    2600:	81 e0       	ldi	r24, 0x01	; 1
}
    2602:	df 91       	pop	r29
    2604:	cf 91       	pop	r28
    2606:	1f 91       	pop	r17
    2608:	0f 91       	pop	r16
    260a:	ff 90       	pop	r15
    260c:	ef 90       	pop	r14
    260e:	08 95       	ret
    dc = 1 for commands and args and
    dc = 0 for data
*/
uint8_t u8x8_cad_110(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  switch(msg)
    2610:	67 31       	cpi	r22, 0x17	; 23
    2612:	51 f0       	breq	.+20     	; 0x2628 <u8x8_cad_110+0x5a>
    2614:	6a 31       	cpi	r22, 0x1A	; 26
    2616:	58 f0       	brcs	.+22     	; 0x262e <u8x8_cad_110+0x60>
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    default:
      return 0;
    2618:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    261a:	df 91       	pop	r29
    261c:	cf 91       	pop	r28
    261e:	1f 91       	pop	r17
    2620:	0f 91       	pop	r16
    2622:	ff 90       	pop	r15
    2624:	ef 90       	pop	r14
    2626:	08 95       	ret
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SetDC(u8x8, 1);
      u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_DATA:
      u8x8_byte_SetDC(u8x8, 0);
    2628:	60 e0       	ldi	r22, 0x00	; 0
    262a:	0e 94 9d 12 	call	0x253a	; 0x253a <u8x8_byte_SetDC>
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    262e:	d8 01       	movw	r26, r16
    2630:	18 96       	adiw	r26, 0x08	; 8
    2632:	ed 91       	ld	r30, X+
    2634:	fc 91       	ld	r31, X
    2636:	19 97       	sbiw	r26, 0x09	; 9
    2638:	97 01       	movw	r18, r14
    263a:	4d 2f       	mov	r20, r29
    263c:	6c 2f       	mov	r22, r28
    263e:	c8 01       	movw	r24, r16
    default:
      return 0;
  }
  return 1;
}
    2640:	df 91       	pop	r29
    2642:	cf 91       	pop	r28
    2644:	1f 91       	pop	r17
    2646:	0f 91       	pop	r16
    2648:	ff 90       	pop	r15
    264a:	ef 90       	pop	r14
      //break;
      /* fall through */
    case U8X8_MSG_CAD_INIT:
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    264c:	09 94       	ijmp

0000264e <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
}

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    264e:	fc 01       	movw	r30, r24
    2650:	71 83       	std	Z+1, r23	; 0x01
    2652:	60 83       	st	Z, r22
    2654:	fb 01       	movw	r30, r22
    2656:	22 89       	ldd	r18, Z+18	; 0x12
    2658:	fc 01       	movw	r30, r24
    265a:	24 8b       	std	Z+20, r18	; 0x14
    265c:	08 95       	ret

0000265e <u8x8_d_helper_display_init>:
    265e:	cf 93       	push	r28
    2660:	df 93       	push	r29
    2662:	ec 01       	movw	r28, r24
    2664:	ea 85       	ldd	r30, Y+10	; 0x0a
    2666:	fb 85       	ldd	r31, Y+11	; 0x0b
    2668:	20 e0       	ldi	r18, 0x00	; 0
    266a:	30 e0       	ldi	r19, 0x00	; 0
    266c:	40 e0       	ldi	r20, 0x00	; 0
    266e:	68 e2       	ldi	r22, 0x28	; 40
    2670:	09 95       	icall
    2672:	ee 81       	ldd	r30, Y+6	; 0x06
    2674:	ff 81       	ldd	r31, Y+7	; 0x07
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	64 e1       	ldi	r22, 0x14	; 20
    267e:	ce 01       	movw	r24, r28
    2680:	09 95       	icall
    2682:	41 e0       	ldi	r20, 0x01	; 1
    2684:	6b e4       	ldi	r22, 0x4B	; 75
    2686:	ce 01       	movw	r24, r28
    2688:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    268c:	e8 81       	ld	r30, Y
    268e:	f9 81       	ldd	r31, Y+1	; 0x01
    2690:	44 81       	ldd	r20, Z+4	; 0x04
    2692:	69 e2       	ldi	r22, 0x29	; 41
    2694:	ce 01       	movw	r24, r28
    2696:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    269a:	40 e0       	ldi	r20, 0x00	; 0
    269c:	6b e4       	ldi	r22, 0x4B	; 75
    269e:	ce 01       	movw	r24, r28
    26a0:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    26a4:	e8 81       	ld	r30, Y
    26a6:	f9 81       	ldd	r31, Y+1	; 0x01
    26a8:	44 81       	ldd	r20, Z+4	; 0x04
    26aa:	69 e2       	ldi	r22, 0x29	; 41
    26ac:	ce 01       	movw	r24, r28
    26ae:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    26b2:	41 e0       	ldi	r20, 0x01	; 1
    26b4:	6b e4       	ldi	r22, 0x4B	; 75
    26b6:	ce 01       	movw	r24, r28
    26b8:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
    26bc:	e8 81       	ld	r30, Y
    26be:	f9 81       	ldd	r31, Y+1	; 0x01
    26c0:	45 81       	ldd	r20, Z+5	; 0x05
    26c2:	69 e2       	ldi	r22, 0x29	; 41
    26c4:	ce 01       	movw	r24, r28
    26c6:	df 91       	pop	r29
    26c8:	cf 91       	pop	r28
    26ca:	0c 94 c0 14 	jmp	0x2980	; 0x2980 <u8x8_gpio_call>

000026ce <u8x8_DrawTile>:
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	00 d0       	rcall	.+0      	; 0x26d8 <u8x8_DrawTile+0xa>
    26d8:	00 d0       	rcall	.+0      	; 0x26da <u8x8_DrawTile+0xc>
    26da:	1f 92       	push	r1
    26dc:	cd b7       	in	r28, 0x3d	; 61
    26de:	de b7       	in	r29, 0x3e	; 62
    26e0:	6c 83       	std	Y+4, r22	; 0x04
    26e2:	4d 83       	std	Y+5, r20	; 0x05
    26e4:	2b 83       	std	Y+3, r18	; 0x03
    26e6:	1a 83       	std	Y+2, r17	; 0x02
    26e8:	09 83       	std	Y+1, r16	; 0x01
    26ea:	dc 01       	movw	r26, r24
    26ec:	14 96       	adiw	r26, 0x04	; 4
    26ee:	ed 91       	ld	r30, X+
    26f0:	fc 91       	ld	r31, X
    26f2:	15 97       	sbiw	r26, 0x05	; 5
    26f4:	9e 01       	movw	r18, r28
    26f6:	2f 5f       	subi	r18, 0xFF	; 255
    26f8:	3f 4f       	sbci	r19, 0xFF	; 255
    26fa:	41 e0       	ldi	r20, 0x01	; 1
    26fc:	6f e0       	ldi	r22, 0x0F	; 15
    26fe:	09 95       	icall
    2700:	0f 90       	pop	r0
    2702:	0f 90       	pop	r0
    2704:	0f 90       	pop	r0
    2706:	0f 90       	pop	r0
    2708:	0f 90       	pop	r0
    270a:	df 91       	pop	r29
    270c:	cf 91       	pop	r28
    270e:	1f 91       	pop	r17
    2710:	0f 91       	pop	r16
    2712:	08 95       	ret

00002714 <u8x8_SetupMemory>:
    2714:	dc 01       	movw	r26, r24
    2716:	14 96       	adiw	r26, 0x04	; 4
    2718:	ed 91       	ld	r30, X+
    271a:	fc 91       	ld	r31, X
    271c:	15 97       	sbiw	r26, 0x05	; 5
    271e:	20 e0       	ldi	r18, 0x00	; 0
    2720:	30 e0       	ldi	r19, 0x00	; 0
    2722:	40 e0       	ldi	r20, 0x00	; 0
    2724:	69 e0       	ldi	r22, 0x09	; 9
    2726:	09 94       	ijmp

00002728 <u8x8_InitDisplay>:
    2728:	dc 01       	movw	r26, r24
    272a:	14 96       	adiw	r26, 0x04	; 4
    272c:	ed 91       	ld	r30, X+
    272e:	fc 91       	ld	r31, X
    2730:	15 97       	sbiw	r26, 0x05	; 5
    2732:	20 e0       	ldi	r18, 0x00	; 0
    2734:	30 e0       	ldi	r19, 0x00	; 0
    2736:	40 e0       	ldi	r20, 0x00	; 0
    2738:	6a e0       	ldi	r22, 0x0A	; 10
    273a:	09 94       	ijmp

0000273c <u8x8_SetContrast>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    273c:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    273e:	dc 01       	movw	r26, r24
    2740:	14 96       	adiw	r26, 0x04	; 4
    2742:	ed 91       	ld	r30, X+
    2744:	fc 91       	ld	r31, X
    2746:	15 97       	sbiw	r26, 0x05	; 5
    2748:	20 e0       	ldi	r18, 0x00	; 0
    274a:	30 e0       	ldi	r19, 0x00	; 0
    274c:	6e e0       	ldi	r22, 0x0E	; 14
    274e:	09 94       	ijmp

00002750 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    2750:	dc 01       	movw	r26, r24
    2752:	14 96       	adiw	r26, 0x04	; 4
    2754:	ed 91       	ld	r30, X+
    2756:	fc 91       	ld	r31, X
    2758:	15 97       	sbiw	r26, 0x05	; 5
    275a:	20 e0       	ldi	r18, 0x00	; 0
    275c:	30 e0       	ldi	r19, 0x00	; 0
    275e:	40 e0       	ldi	r20, 0x00	; 0
    2760:	60 e1       	ldi	r22, 0x10	; 16
    2762:	09 94       	ijmp

00002764 <u8x8_d_ise97002ks_gu128x64>:
	u8x8_cad_EndTransfer(u8x8);
}

//static uint8_t gram_layer = 0;
uint8_t u8x8_d_ise97002ks_gu128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2764:	8f 92       	push	r8
    2766:	9f 92       	push	r9
    2768:	af 92       	push	r10
    276a:	bf 92       	push	r11
    276c:	cf 92       	push	r12
    276e:	df 92       	push	r13
    2770:	ef 92       	push	r14
    2772:	ff 92       	push	r15
    2774:	0f 93       	push	r16
    2776:	1f 93       	push	r17
    2778:	cf 93       	push	r28
    277a:	df 93       	push	r29
    277c:	00 d0       	rcall	.+0      	; 0x277e <u8x8_d_ise97002ks_gu128x64+0x1a>
    277e:	cd b7       	in	r28, 0x3d	; 61
    2780:	de b7       	in	r29, 0x3e	; 62
    2782:	8c 01       	movw	r16, r24
    2784:	84 2e       	mov	r8, r20
    2786:	59 01       	movw	r10, r18
	uint8_t x, c;
	uint8_t *ptr;
	switch (msg)
    2788:	6b 30       	cpi	r22, 0x0B	; 11
    278a:	09 f4       	brne	.+2      	; 0x278e <u8x8_d_ise97002ks_gu128x64+0x2a>
    278c:	e5 c0       	rjmp	.+458    	; 0x2958 <u8x8_d_ise97002ks_gu128x64+0x1f4>
    278e:	58 f0       	brcs	.+22     	; 0x27a6 <u8x8_d_ise97002ks_gu128x64+0x42>
    2790:	6f 30       	cpi	r22, 0x0F	; 15
    2792:	09 f4       	brne	.+2      	; 0x2796 <u8x8_d_ise97002ks_gu128x64+0x32>
    2794:	75 c0       	rjmp	.+234    	; 0x2880 <u8x8_d_ise97002ks_gu128x64+0x11c>
    2796:	60 31       	cpi	r22, 0x10	; 16
    2798:	09 f4       	brne	.+2      	; 0x279c <u8x8_d_ise97002ks_gu128x64+0x38>
    279a:	62 c0       	rjmp	.+196    	; 0x2860 <u8x8_d_ise97002ks_gu128x64+0xfc>
    279c:	6e 30       	cpi	r22, 0x0E	; 14
    279e:	09 f4       	brne	.+2      	; 0x27a2 <u8x8_d_ise97002ks_gu128x64+0x3e>
    27a0:	cd c0       	rjmp	.+410    	; 0x293c <u8x8_d_ise97002ks_gu128x64+0x1d8>
		}
		send_byte(u8x8, 1, 0x40);*/
		break;
		
	default:
		return 0;
    27a2:	80 e0       	ldi	r24, 0x00	; 0
    27a4:	5e c0       	rjmp	.+188    	; 0x2862 <u8x8_d_ise97002ks_gu128x64+0xfe>
//static uint8_t gram_layer = 0;
uint8_t u8x8_d_ise97002ks_gu128x64(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
	uint8_t x, c;
	uint8_t *ptr;
	switch (msg)
    27a6:	69 30       	cpi	r22, 0x09	; 9
    27a8:	09 f4       	brne	.+2      	; 0x27ac <u8x8_d_ise97002ks_gu128x64+0x48>
    27aa:	d0 c0       	rjmp	.+416    	; 0x294c <u8x8_d_ise97002ks_gu128x64+0x1e8>
    27ac:	6a 30       	cpi	r22, 0x0A	; 10
    27ae:	c9 f7       	brne	.-14     	; 0x27a2 <u8x8_d_ise97002ks_gu128x64+0x3e>
		u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ise97002ks_gu128x64_display_info);
		break;
		
	case U8X8_MSG_DISPLAY_INIT:
		// setup the communication interface
		u8x8_d_helper_display_init(u8x8);  
    27b0:	0e 94 2f 13 	call	0x265e	; 0x265e <u8x8_d_helper_display_init>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    27b4:	c8 01       	movw	r24, r16
    27b6:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    27ba:	6f e5       	ldi	r22, 0x5F	; 95
    27bc:	c8 01       	movw	r24, r16
    27be:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    27c2:	c8 01       	movw	r24, r16
    27c4:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
		// setup the communication interface
		u8x8_d_helper_display_init(u8x8);  
		
		// init the display by sending an init sequence
		send_byte(u8x8, 1, 0x5f);
		u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, 1);
    27c8:	41 e0       	ldi	r20, 0x01	; 1
    27ca:	69 e2       	ldi	r22, 0x29	; 41
    27cc:	c8 01       	movw	r24, r16
    27ce:	0e 94 c0 14 	call	0x2980	; 0x2980 <u8x8_gpio_call>
		
		for (uint8_t varLoop = 0; varLoop < 8; varLoop++)
    27d2:	f1 2c       	mov	r15, r1
    27d4:	ee 24       	eor	r14, r14
    27d6:	ea 94       	dec	r14
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    27d8:	c8 01       	movw	r24, r16
    27da:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    27de:	62 e6       	ldi	r22, 0x62	; 98
    27e0:	c8 01       	movw	r24, r16
    27e2:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    27e6:	c8 01       	movw	r24, r16
    27e8:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    27ec:	c8 01       	movw	r24, r16
    27ee:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    27f2:	6f 2d       	mov	r22, r15
    27f4:	c8 01       	movw	r24, r16
    27f6:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    27fa:	c8 01       	movw	r24, r16
    27fc:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
    2800:	ea 82       	std	Y+2, r14	; 0x02
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    2802:	c8 01       	movw	r24, r16
    2804:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
    2808:	ae 01       	movw	r20, r28
    280a:	4e 5f       	subi	r20, 0xFE	; 254
    280c:	5f 4f       	sbci	r21, 0xFF	; 255
    280e:	61 e0       	ldi	r22, 0x01	; 1
    2810:	c8 01       	movw	r24, r16
    2812:	0e 94 ca 12 	call	0x2594	; 0x2594 <u8x8_cad_SendData>
	}
	u8x8_cad_EndTransfer(u8x8);
    2816:	c8 01       	movw	r24, r16
    2818:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
		
		// init the display by sending an init sequence
		send_byte(u8x8, 1, 0x5f);
		u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, 1);
		
		for (uint8_t varLoop = 0; varLoop < 8; varLoop++)
    281c:	f3 94       	inc	r15
    281e:	88 e0       	ldi	r24, 0x08	; 8
    2820:	f8 12       	cpse	r15, r24
    2822:	da cf       	rjmp	.-76     	; 0x27d8 <u8x8_d_ise97002ks_gu128x64+0x74>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    2824:	c8 01       	movw	r24, r16
    2826:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    282a:	64 e8       	ldi	r22, 0x84	; 132
    282c:	c8 01       	movw	r24, r16
    282e:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    2832:	c8 01       	movw	r24, r16
    2834:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    2838:	c8 01       	movw	r24, r16
    283a:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    283e:	64 e2       	ldi	r22, 0x24	; 36
    2840:	c8 01       	movw	r24, r16
    2842:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    2846:	c8 01       	movw	r24, r16
    2848:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    284c:	c8 01       	movw	r24, r16
    284e:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    2852:	60 e4       	ldi	r22, 0x40	; 64
    2854:	c8 01       	movw	r24, r16
    2856:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    285a:	c8 01       	movw	r24, r16
    285c:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
		break;
		
	default:
		return 0;
	}
	return 1;
    2860:	81 e0       	ldi	r24, 0x01	; 1
    2862:	0f 90       	pop	r0
    2864:	0f 90       	pop	r0
    2866:	df 91       	pop	r29
    2868:	cf 91       	pop	r28
    286a:	1f 91       	pop	r17
    286c:	0f 91       	pop	r16
    286e:	ff 90       	pop	r15
    2870:	ef 90       	pop	r14
    2872:	df 90       	pop	r13
    2874:	cf 90       	pop	r12
    2876:	bf 90       	pop	r11
    2878:	af 90       	pop	r10
    287a:	9f 90       	pop	r9
    287c:	8f 90       	pop	r8
    287e:	08 95       	ret
		
	case U8X8_MSG_DISPLAY_DRAW_TILE:
		/* arg_ptr: (u8x8_tile_t *) */
		/* arg_int: How often u8x8_tile_t should be repeated */
		
		x = ((u8x8_tile_t *)arg_ptr)->x_pos;
    2880:	f9 01       	movw	r30, r18
    2882:	f3 80       	ldd	r15, Z+3	; 0x03
		x *= 8;
    2884:	ff 0c       	add	r15, r15
    2886:	ff 0c       	add	r15, r15
    2888:	ff 0c       	add	r15, r15
		x += u8x8->x_offset;
    288a:	fc 01       	movw	r30, r24
    288c:	84 89       	ldd	r24, Z+20	; 0x14
    288e:	f8 0e       	add	r15, r24
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    2890:	c8 01       	movw	r24, r16
    2892:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    2896:	64 e6       	ldi	r22, 0x64	; 100
    2898:	c8 01       	movw	r24, r16
    289a:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    289e:	c8 01       	movw	r24, r16
    28a0:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    28a4:	c8 01       	movw	r24, r16
    28a6:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    28aa:	6f 2d       	mov	r22, r15
    28ac:	6f 77       	andi	r22, 0x7F	; 127
    28ae:	c8 01       	movw	r24, r16
    28b0:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    28b4:	c8 01       	movw	r24, r16
    28b6:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    28ba:	c8 01       	movw	r24, r16
    28bc:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    28c0:	60 e6       	ldi	r22, 0x60	; 96
    28c2:	c8 01       	movw	r24, r16
    28c4:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    28c8:	c8 01       	movw	r24, r16
    28ca:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
		{
			send_byte(u8x8, 1, 0x0f & (((u8x8_tile_t *)arg_ptr)->y_pos + 0x08));
		}else{
			send_byte(u8x8, 1, 0x0f & ((u8x8_tile_t *)arg_ptr)->y_pos);
		}*/
		send_byte(u8x8, 1, 0x0f & ((u8x8_tile_t *)arg_ptr)->y_pos);
    28ce:	f5 01       	movw	r30, r10
    28d0:	84 81       	ldd	r24, Z+4	; 0x04
    28d2:	8f 70       	andi	r24, 0x0F	; 15
    28d4:	f8 2e       	mov	r15, r24
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    28d6:	c8 01       	movw	r24, r16
    28d8:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    28dc:	6f 2d       	mov	r22, r15
    28de:	c8 01       	movw	r24, r16
    28e0:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    28e4:	c8 01       	movw	r24, r16
    28e6:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
		send_byte(u8x8, 1, 0x0f & ((u8x8_tile_t *)arg_ptr)->y_pos);
		
		
		do
		{
			c = ((u8x8_tile_t *)arg_ptr)->cnt;
    28ea:	f5 01       	movw	r30, r10
    28ec:	82 81       	ldd	r24, Z+2	; 0x02
			ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
    28ee:	e0 80       	ld	r14, Z
    28f0:	f1 80       	ldd	r15, Z+1	; 0x01
			
			for (uint8_t varLoop = 0; varLoop < c * 8; varLoop++)
    28f2:	f8 e0       	ldi	r31, 0x08	; 8
    28f4:	8f 9f       	mul	r24, r31
    28f6:	60 01       	movw	r12, r0
    28f8:	11 24       	eor	r1, r1
    28fa:	88 23       	and	r24, r24
    28fc:	d9 f0       	breq	.+54     	; 0x2934 <u8x8_d_ise97002ks_gu128x64+0x1d0>
    28fe:	91 2c       	mov	r9, r1
    2900:	80 e0       	ldi	r24, 0x00	; 0
    2902:	90 e0       	ldi	r25, 0x00	; 0
			{
				send_byte(u8x8, 0, *(ptr + varLoop));
    2904:	f7 01       	movw	r30, r14
    2906:	e8 0f       	add	r30, r24
    2908:	f9 1f       	adc	r31, r25
    290a:	80 81       	ld	r24, Z
    290c:	89 83       	std	Y+1, r24	; 0x01
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    290e:	c8 01       	movw	r24, r16
    2910:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
    2914:	ae 01       	movw	r20, r28
    2916:	4f 5f       	subi	r20, 0xFF	; 255
    2918:	5f 4f       	sbci	r21, 0xFF	; 255
    291a:	61 e0       	ldi	r22, 0x01	; 1
    291c:	c8 01       	movw	r24, r16
    291e:	0e 94 ca 12 	call	0x2594	; 0x2594 <u8x8_cad_SendData>
	}
	u8x8_cad_EndTransfer(u8x8);
    2922:	c8 01       	movw	r24, r16
    2924:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
		do
		{
			c = ((u8x8_tile_t *)arg_ptr)->cnt;
			ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
			
			for (uint8_t varLoop = 0; varLoop < c * 8; varLoop++)
    2928:	93 94       	inc	r9
    292a:	89 2d       	mov	r24, r9
    292c:	90 e0       	ldi	r25, 0x00	; 0
    292e:	8c 15       	cp	r24, r12
    2930:	9d 05       	cpc	r25, r13
    2932:	44 f3       	brlt	.-48     	; 0x2904 <u8x8_d_ise97002ks_gu128x64+0x1a0>
			{
				send_byte(u8x8, 0, *(ptr + varLoop));
			}
			
			arg_int--;
    2934:	8a 94       	dec	r8
		} while (arg_int > 0);
    2936:	81 10       	cpse	r8, r1
    2938:	d8 cf       	rjmp	.-80     	; 0x28ea <u8x8_d_ise97002ks_gu128x64+0x186>
    293a:	92 cf       	rjmp	.-220    	; 0x2860 <u8x8_d_ise97002ks_gu128x64+0xfc>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    293c:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    2940:	68 2d       	mov	r22, r8
    2942:	60 95       	com	r22
    2944:	62 95       	swap	r22
    2946:	6f 70       	andi	r22, 0x0F	; 15
    2948:	60 64       	ori	r22, 0x40	; 64
    294a:	84 cf       	rjmp	.-248    	; 0x2854 <u8x8_d_ise97002ks_gu128x64+0xf0>
	uint8_t x, c;
	uint8_t *ptr;
	switch (msg)
	{
	case U8X8_MSG_DISPLAY_SETUP_MEMORY:
		u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ise97002ks_gu128x64_display_info);
    294c:	6b e7       	ldi	r22, 0x7B	; 123
    294e:	71 e0       	ldi	r23, 0x01	; 1
    2950:	0e 94 27 13 	call	0x264e	; 0x264e <u8x8_d_helper_display_setup_memory>
		break;
		
	default:
		return 0;
	}
	return 1;
    2954:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t *ptr;
	switch (msg)
	{
	case U8X8_MSG_DISPLAY_SETUP_MEMORY:
		u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ise97002ks_gu128x64_display_info);
		break;
    2956:	85 cf       	rjmp	.-246    	; 0x2862 <u8x8_d_ise97002ks_gu128x64+0xfe>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    2958:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    295c:	64 e2       	ldi	r22, 0x24	; 36
    295e:	c8 01       	movw	r24, r16
    2960:	0e 94 c0 12 	call	0x2580	; 0x2580 <u8x8_cad_SendCmd>
	} else {
		u8x8_cad_SendData(u8x8, 1, &data);
	}
	u8x8_cad_EndTransfer(u8x8);
    2964:	c8 01       	movw	r24, r16
    2966:	0e 94 dd 12 	call	0x25ba	; 0x25ba <u8x8_cad_EndTransfer>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    296a:	c8 01       	movw	r24, r16
	case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
		// arg_int == 0: wakeup, normal mode
		// arg_int == 1: power save 
		
		send_byte(u8x8, 1, 0x24);
		if(arg_int)
    296c:	88 20       	and	r8, r8
    296e:	21 f0       	breq	.+8      	; 0x2978 <u8x8_d_ise97002ks_gu128x64+0x214>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    2970:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    2974:	60 e0       	ldi	r22, 0x00	; 0
    2976:	6e cf       	rjmp	.-292    	; 0x2854 <u8x8_d_ise97002ks_gu128x64+0xf0>
	/* pixel_height = */ 64
};

static void send_byte(u8x8_t *u8x8, uint8_t isCmd, uint8_t data)
{
	u8x8_cad_StartTransfer(u8x8);
    2978:	0e 94 d3 12 	call	0x25a6	; 0x25a6 <u8x8_cad_StartTransfer>
	if (isCmd)
	{
		u8x8_cad_SendCmd(u8x8, data);
    297c:	60 e4       	ldi	r22, 0x40	; 64
    297e:	6a cf       	rjmp	.-300    	; 0x2854 <u8x8_d_ise97002ks_gu128x64+0xf0>

00002980 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    2980:	dc 01       	movw	r26, r24
    2982:	1a 96       	adiw	r26, 0x0a	; 10
    2984:	ed 91       	ld	r30, X+
    2986:	fc 91       	ld	r31, X
    2988:	1b 97       	sbiw	r26, 0x0b	; 11
    298a:	20 e0       	ldi	r18, 0x00	; 0
    298c:	30 e0       	ldi	r19, 0x00	; 0
    298e:	09 94       	ijmp

00002990 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    2990:	0f 93       	push	r16
    2992:	1f 93       	push	r17
    2994:	fc 01       	movw	r30, r24
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
    2996:	11 82       	std	Z+1, r1	; 0x01
    2998:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
    299a:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    299c:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    299e:	14 86       	std	Z+12, r1	; 0x0c
    29a0:	15 86       	std	Z+13, r1	; 0x0d
    29a2:	16 86       	std	Z+14, r1	; 0x0e
    29a4:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    29a6:	8f ef       	ldi	r24, 0xFF	; 255
    29a8:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    29aa:	82 8f       	std	Z+26, r24	; 0x1a
{
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    29ac:	75 83       	std	Z+5, r23	; 0x05
    29ae:	64 83       	std	Z+4, r22	; 0x04
  u8x8->cad_cb = cad_cb;
    29b0:	57 83       	std	Z+7, r21	; 0x07
    29b2:	46 83       	std	Z+6, r20	; 0x06
  u8x8->byte_cb = byte_cb;
    29b4:	31 87       	std	Z+9, r19	; 0x09
    29b6:	20 87       	std	Z+8, r18	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    29b8:	13 87       	std	Z+11, r17	; 0x0b
    29ba:	02 87       	std	Z+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    29bc:	cf 01       	movw	r24, r30
}
    29be:	1f 91       	pop	r17
    29c0:	0f 91       	pop	r16
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    29c2:	0c 94 8a 13 	jmp	0x2714	; 0x2714 <u8x8_SetupMemory>

000029c6 <__udivmodsi4>:
    29c6:	a1 e2       	ldi	r26, 0x21	; 33
    29c8:	1a 2e       	mov	r1, r26
    29ca:	aa 1b       	sub	r26, r26
    29cc:	bb 1b       	sub	r27, r27
    29ce:	fd 01       	movw	r30, r26
    29d0:	0d c0       	rjmp	.+26     	; 0x29ec <__udivmodsi4_ep>

000029d2 <__udivmodsi4_loop>:
    29d2:	aa 1f       	adc	r26, r26
    29d4:	bb 1f       	adc	r27, r27
    29d6:	ee 1f       	adc	r30, r30
    29d8:	ff 1f       	adc	r31, r31
    29da:	a2 17       	cp	r26, r18
    29dc:	b3 07       	cpc	r27, r19
    29de:	e4 07       	cpc	r30, r20
    29e0:	f5 07       	cpc	r31, r21
    29e2:	20 f0       	brcs	.+8      	; 0x29ec <__udivmodsi4_ep>
    29e4:	a2 1b       	sub	r26, r18
    29e6:	b3 0b       	sbc	r27, r19
    29e8:	e4 0b       	sbc	r30, r20
    29ea:	f5 0b       	sbc	r31, r21

000029ec <__udivmodsi4_ep>:
    29ec:	66 1f       	adc	r22, r22
    29ee:	77 1f       	adc	r23, r23
    29f0:	88 1f       	adc	r24, r24
    29f2:	99 1f       	adc	r25, r25
    29f4:	1a 94       	dec	r1
    29f6:	69 f7       	brne	.-38     	; 0x29d2 <__udivmodsi4_loop>
    29f8:	60 95       	com	r22
    29fa:	70 95       	com	r23
    29fc:	80 95       	com	r24
    29fe:	90 95       	com	r25
    2a00:	9b 01       	movw	r18, r22
    2a02:	ac 01       	movw	r20, r24
    2a04:	bd 01       	movw	r22, r26
    2a06:	cf 01       	movw	r24, r30
    2a08:	08 95       	ret

00002a0a <__divmodsi4>:
    2a0a:	05 2e       	mov	r0, r21
    2a0c:	97 fb       	bst	r25, 7
    2a0e:	1e f4       	brtc	.+6      	; 0x2a16 <__divmodsi4+0xc>
    2a10:	00 94       	com	r0
    2a12:	0e 94 1c 15 	call	0x2a38	; 0x2a38 <__negsi2>
    2a16:	57 fd       	sbrc	r21, 7
    2a18:	07 d0       	rcall	.+14     	; 0x2a28 <__divmodsi4_neg2>
    2a1a:	0e 94 e3 14 	call	0x29c6	; 0x29c6 <__udivmodsi4>
    2a1e:	07 fc       	sbrc	r0, 7
    2a20:	03 d0       	rcall	.+6      	; 0x2a28 <__divmodsi4_neg2>
    2a22:	4e f4       	brtc	.+18     	; 0x2a36 <__divmodsi4_exit>
    2a24:	0c 94 1c 15 	jmp	0x2a38	; 0x2a38 <__negsi2>

00002a28 <__divmodsi4_neg2>:
    2a28:	50 95       	com	r21
    2a2a:	40 95       	com	r20
    2a2c:	30 95       	com	r19
    2a2e:	21 95       	neg	r18
    2a30:	3f 4f       	sbci	r19, 0xFF	; 255
    2a32:	4f 4f       	sbci	r20, 0xFF	; 255
    2a34:	5f 4f       	sbci	r21, 0xFF	; 255

00002a36 <__divmodsi4_exit>:
    2a36:	08 95       	ret

00002a38 <__negsi2>:
    2a38:	90 95       	com	r25
    2a3a:	80 95       	com	r24
    2a3c:	70 95       	com	r23
    2a3e:	61 95       	neg	r22
    2a40:	7f 4f       	sbci	r23, 0xFF	; 255
    2a42:	8f 4f       	sbci	r24, 0xFF	; 255
    2a44:	9f 4f       	sbci	r25, 0xFF	; 255
    2a46:	08 95       	ret

00002a48 <__umulhisi3>:
    2a48:	a2 9f       	mul	r26, r18
    2a4a:	b0 01       	movw	r22, r0
    2a4c:	b3 9f       	mul	r27, r19
    2a4e:	c0 01       	movw	r24, r0
    2a50:	a3 9f       	mul	r26, r19
    2a52:	70 0d       	add	r23, r0
    2a54:	81 1d       	adc	r24, r1
    2a56:	11 24       	eor	r1, r1
    2a58:	91 1d       	adc	r25, r1
    2a5a:	b2 9f       	mul	r27, r18
    2a5c:	70 0d       	add	r23, r0
    2a5e:	81 1d       	adc	r24, r1
    2a60:	11 24       	eor	r1, r1
    2a62:	91 1d       	adc	r25, r1
    2a64:	08 95       	ret

00002a66 <memset>:
    2a66:	dc 01       	movw	r26, r24
    2a68:	01 c0       	rjmp	.+2      	; 0x2a6c <memset+0x6>
    2a6a:	6d 93       	st	X+, r22
    2a6c:	41 50       	subi	r20, 0x01	; 1
    2a6e:	50 40       	sbci	r21, 0x00	; 0
    2a70:	e0 f7       	brcc	.-8      	; 0x2a6a <memset+0x4>
    2a72:	08 95       	ret

00002a74 <snprintf>:
    2a74:	ae e0       	ldi	r26, 0x0E	; 14
    2a76:	b0 e0       	ldi	r27, 0x00	; 0
    2a78:	e0 e4       	ldi	r30, 0x40	; 64
    2a7a:	f5 e1       	ldi	r31, 0x15	; 21
    2a7c:	0c 94 09 18 	jmp	0x3012	; 0x3012 <__prologue_saves__+0x1c>
    2a80:	0d 89       	ldd	r16, Y+21	; 0x15
    2a82:	1e 89       	ldd	r17, Y+22	; 0x16
    2a84:	8f 89       	ldd	r24, Y+23	; 0x17
    2a86:	98 8d       	ldd	r25, Y+24	; 0x18
    2a88:	26 e0       	ldi	r18, 0x06	; 6
    2a8a:	2c 83       	std	Y+4, r18	; 0x04
    2a8c:	1a 83       	std	Y+2, r17	; 0x02
    2a8e:	09 83       	std	Y+1, r16	; 0x01
    2a90:	97 ff       	sbrs	r25, 7
    2a92:	02 c0       	rjmp	.+4      	; 0x2a98 <snprintf+0x24>
    2a94:	80 e0       	ldi	r24, 0x00	; 0
    2a96:	90 e8       	ldi	r25, 0x80	; 128
    2a98:	01 97       	sbiw	r24, 0x01	; 1
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	ae 01       	movw	r20, r28
    2aa0:	45 5e       	subi	r20, 0xE5	; 229
    2aa2:	5f 4f       	sbci	r21, 0xFF	; 255
    2aa4:	69 8d       	ldd	r22, Y+25	; 0x19
    2aa6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2aa8:	ce 01       	movw	r24, r28
    2aaa:	01 96       	adiw	r24, 0x01	; 1
    2aac:	0e 94 6a 15 	call	0x2ad4	; 0x2ad4 <vfprintf>
    2ab0:	4d 81       	ldd	r20, Y+5	; 0x05
    2ab2:	5e 81       	ldd	r21, Y+6	; 0x06
    2ab4:	57 fd       	sbrc	r21, 7
    2ab6:	0a c0       	rjmp	.+20     	; 0x2acc <snprintf+0x58>
    2ab8:	2f 81       	ldd	r18, Y+7	; 0x07
    2aba:	38 85       	ldd	r19, Y+8	; 0x08
    2abc:	42 17       	cp	r20, r18
    2abe:	53 07       	cpc	r21, r19
    2ac0:	0c f4       	brge	.+2      	; 0x2ac4 <snprintf+0x50>
    2ac2:	9a 01       	movw	r18, r20
    2ac4:	f8 01       	movw	r30, r16
    2ac6:	e2 0f       	add	r30, r18
    2ac8:	f3 1f       	adc	r31, r19
    2aca:	10 82       	st	Z, r1
    2acc:	2e 96       	adiw	r28, 0x0e	; 14
    2ace:	e4 e0       	ldi	r30, 0x04	; 4
    2ad0:	0c 94 25 18 	jmp	0x304a	; 0x304a <__epilogue_restores__+0x1c>

00002ad4 <vfprintf>:
    2ad4:	ab e0       	ldi	r26, 0x0B	; 11
    2ad6:	b0 e0       	ldi	r27, 0x00	; 0
    2ad8:	e0 e7       	ldi	r30, 0x70	; 112
    2ada:	f5 e1       	ldi	r31, 0x15	; 21
    2adc:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__prologue_saves__>
    2ae0:	6c 01       	movw	r12, r24
    2ae2:	7b 01       	movw	r14, r22
    2ae4:	8a 01       	movw	r16, r20
    2ae6:	fc 01       	movw	r30, r24
    2ae8:	17 82       	std	Z+7, r1	; 0x07
    2aea:	16 82       	std	Z+6, r1	; 0x06
    2aec:	83 81       	ldd	r24, Z+3	; 0x03
    2aee:	81 ff       	sbrs	r24, 1
    2af0:	cc c1       	rjmp	.+920    	; 0x2e8a <vfprintf+0x3b6>
    2af2:	ce 01       	movw	r24, r28
    2af4:	01 96       	adiw	r24, 0x01	; 1
    2af6:	3c 01       	movw	r6, r24
    2af8:	f6 01       	movw	r30, r12
    2afa:	93 81       	ldd	r25, Z+3	; 0x03
    2afc:	f7 01       	movw	r30, r14
    2afe:	93 fd       	sbrc	r25, 3
    2b00:	85 91       	lpm	r24, Z+
    2b02:	93 ff       	sbrs	r25, 3
    2b04:	81 91       	ld	r24, Z+
    2b06:	7f 01       	movw	r14, r30
    2b08:	88 23       	and	r24, r24
    2b0a:	09 f4       	brne	.+2      	; 0x2b0e <vfprintf+0x3a>
    2b0c:	ba c1       	rjmp	.+884    	; 0x2e82 <vfprintf+0x3ae>
    2b0e:	85 32       	cpi	r24, 0x25	; 37
    2b10:	39 f4       	brne	.+14     	; 0x2b20 <vfprintf+0x4c>
    2b12:	93 fd       	sbrc	r25, 3
    2b14:	85 91       	lpm	r24, Z+
    2b16:	93 ff       	sbrs	r25, 3
    2b18:	81 91       	ld	r24, Z+
    2b1a:	7f 01       	movw	r14, r30
    2b1c:	85 32       	cpi	r24, 0x25	; 37
    2b1e:	29 f4       	brne	.+10     	; 0x2b2a <vfprintf+0x56>
    2b20:	b6 01       	movw	r22, r12
    2b22:	90 e0       	ldi	r25, 0x00	; 0
    2b24:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2b28:	e7 cf       	rjmp	.-50     	; 0x2af8 <vfprintf+0x24>
    2b2a:	91 2c       	mov	r9, r1
    2b2c:	21 2c       	mov	r2, r1
    2b2e:	31 2c       	mov	r3, r1
    2b30:	ff e1       	ldi	r31, 0x1F	; 31
    2b32:	f3 15       	cp	r31, r3
    2b34:	d8 f0       	brcs	.+54     	; 0x2b6c <vfprintf+0x98>
    2b36:	8b 32       	cpi	r24, 0x2B	; 43
    2b38:	79 f0       	breq	.+30     	; 0x2b58 <vfprintf+0x84>
    2b3a:	38 f4       	brcc	.+14     	; 0x2b4a <vfprintf+0x76>
    2b3c:	80 32       	cpi	r24, 0x20	; 32
    2b3e:	79 f0       	breq	.+30     	; 0x2b5e <vfprintf+0x8a>
    2b40:	83 32       	cpi	r24, 0x23	; 35
    2b42:	a1 f4       	brne	.+40     	; 0x2b6c <vfprintf+0x98>
    2b44:	23 2d       	mov	r18, r3
    2b46:	20 61       	ori	r18, 0x10	; 16
    2b48:	1d c0       	rjmp	.+58     	; 0x2b84 <vfprintf+0xb0>
    2b4a:	8d 32       	cpi	r24, 0x2D	; 45
    2b4c:	61 f0       	breq	.+24     	; 0x2b66 <vfprintf+0x92>
    2b4e:	80 33       	cpi	r24, 0x30	; 48
    2b50:	69 f4       	brne	.+26     	; 0x2b6c <vfprintf+0x98>
    2b52:	23 2d       	mov	r18, r3
    2b54:	21 60       	ori	r18, 0x01	; 1
    2b56:	16 c0       	rjmp	.+44     	; 0x2b84 <vfprintf+0xb0>
    2b58:	83 2d       	mov	r24, r3
    2b5a:	82 60       	ori	r24, 0x02	; 2
    2b5c:	38 2e       	mov	r3, r24
    2b5e:	e3 2d       	mov	r30, r3
    2b60:	e4 60       	ori	r30, 0x04	; 4
    2b62:	3e 2e       	mov	r3, r30
    2b64:	2a c0       	rjmp	.+84     	; 0x2bba <vfprintf+0xe6>
    2b66:	f3 2d       	mov	r31, r3
    2b68:	f8 60       	ori	r31, 0x08	; 8
    2b6a:	1d c0       	rjmp	.+58     	; 0x2ba6 <vfprintf+0xd2>
    2b6c:	37 fc       	sbrc	r3, 7
    2b6e:	2d c0       	rjmp	.+90     	; 0x2bca <vfprintf+0xf6>
    2b70:	20 ed       	ldi	r18, 0xD0	; 208
    2b72:	28 0f       	add	r18, r24
    2b74:	2a 30       	cpi	r18, 0x0A	; 10
    2b76:	40 f0       	brcs	.+16     	; 0x2b88 <vfprintf+0xb4>
    2b78:	8e 32       	cpi	r24, 0x2E	; 46
    2b7a:	b9 f4       	brne	.+46     	; 0x2baa <vfprintf+0xd6>
    2b7c:	36 fc       	sbrc	r3, 6
    2b7e:	81 c1       	rjmp	.+770    	; 0x2e82 <vfprintf+0x3ae>
    2b80:	23 2d       	mov	r18, r3
    2b82:	20 64       	ori	r18, 0x40	; 64
    2b84:	32 2e       	mov	r3, r18
    2b86:	19 c0       	rjmp	.+50     	; 0x2bba <vfprintf+0xe6>
    2b88:	36 fe       	sbrs	r3, 6
    2b8a:	06 c0       	rjmp	.+12     	; 0x2b98 <vfprintf+0xc4>
    2b8c:	8a e0       	ldi	r24, 0x0A	; 10
    2b8e:	98 9e       	mul	r9, r24
    2b90:	20 0d       	add	r18, r0
    2b92:	11 24       	eor	r1, r1
    2b94:	92 2e       	mov	r9, r18
    2b96:	11 c0       	rjmp	.+34     	; 0x2bba <vfprintf+0xe6>
    2b98:	ea e0       	ldi	r30, 0x0A	; 10
    2b9a:	2e 9e       	mul	r2, r30
    2b9c:	20 0d       	add	r18, r0
    2b9e:	11 24       	eor	r1, r1
    2ba0:	22 2e       	mov	r2, r18
    2ba2:	f3 2d       	mov	r31, r3
    2ba4:	f0 62       	ori	r31, 0x20	; 32
    2ba6:	3f 2e       	mov	r3, r31
    2ba8:	08 c0       	rjmp	.+16     	; 0x2bba <vfprintf+0xe6>
    2baa:	8c 36       	cpi	r24, 0x6C	; 108
    2bac:	21 f4       	brne	.+8      	; 0x2bb6 <vfprintf+0xe2>
    2bae:	83 2d       	mov	r24, r3
    2bb0:	80 68       	ori	r24, 0x80	; 128
    2bb2:	38 2e       	mov	r3, r24
    2bb4:	02 c0       	rjmp	.+4      	; 0x2bba <vfprintf+0xe6>
    2bb6:	88 36       	cpi	r24, 0x68	; 104
    2bb8:	41 f4       	brne	.+16     	; 0x2bca <vfprintf+0xf6>
    2bba:	f7 01       	movw	r30, r14
    2bbc:	93 fd       	sbrc	r25, 3
    2bbe:	85 91       	lpm	r24, Z+
    2bc0:	93 ff       	sbrs	r25, 3
    2bc2:	81 91       	ld	r24, Z+
    2bc4:	7f 01       	movw	r14, r30
    2bc6:	81 11       	cpse	r24, r1
    2bc8:	b3 cf       	rjmp	.-154    	; 0x2b30 <vfprintf+0x5c>
    2bca:	98 2f       	mov	r25, r24
    2bcc:	9f 7d       	andi	r25, 0xDF	; 223
    2bce:	95 54       	subi	r25, 0x45	; 69
    2bd0:	93 30       	cpi	r25, 0x03	; 3
    2bd2:	28 f4       	brcc	.+10     	; 0x2bde <vfprintf+0x10a>
    2bd4:	0c 5f       	subi	r16, 0xFC	; 252
    2bd6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bd8:	9f e3       	ldi	r25, 0x3F	; 63
    2bda:	99 83       	std	Y+1, r25	; 0x01
    2bdc:	0d c0       	rjmp	.+26     	; 0x2bf8 <vfprintf+0x124>
    2bde:	83 36       	cpi	r24, 0x63	; 99
    2be0:	31 f0       	breq	.+12     	; 0x2bee <vfprintf+0x11a>
    2be2:	83 37       	cpi	r24, 0x73	; 115
    2be4:	71 f0       	breq	.+28     	; 0x2c02 <vfprintf+0x12e>
    2be6:	83 35       	cpi	r24, 0x53	; 83
    2be8:	09 f0       	breq	.+2      	; 0x2bec <vfprintf+0x118>
    2bea:	59 c0       	rjmp	.+178    	; 0x2c9e <vfprintf+0x1ca>
    2bec:	21 c0       	rjmp	.+66     	; 0x2c30 <vfprintf+0x15c>
    2bee:	f8 01       	movw	r30, r16
    2bf0:	80 81       	ld	r24, Z
    2bf2:	89 83       	std	Y+1, r24	; 0x01
    2bf4:	0e 5f       	subi	r16, 0xFE	; 254
    2bf6:	1f 4f       	sbci	r17, 0xFF	; 255
    2bf8:	88 24       	eor	r8, r8
    2bfa:	83 94       	inc	r8
    2bfc:	91 2c       	mov	r9, r1
    2bfe:	53 01       	movw	r10, r6
    2c00:	13 c0       	rjmp	.+38     	; 0x2c28 <vfprintf+0x154>
    2c02:	28 01       	movw	r4, r16
    2c04:	f2 e0       	ldi	r31, 0x02	; 2
    2c06:	4f 0e       	add	r4, r31
    2c08:	51 1c       	adc	r5, r1
    2c0a:	f8 01       	movw	r30, r16
    2c0c:	a0 80       	ld	r10, Z
    2c0e:	b1 80       	ldd	r11, Z+1	; 0x01
    2c10:	36 fe       	sbrs	r3, 6
    2c12:	03 c0       	rjmp	.+6      	; 0x2c1a <vfprintf+0x146>
    2c14:	69 2d       	mov	r22, r9
    2c16:	70 e0       	ldi	r23, 0x00	; 0
    2c18:	02 c0       	rjmp	.+4      	; 0x2c1e <vfprintf+0x14a>
    2c1a:	6f ef       	ldi	r22, 0xFF	; 255
    2c1c:	7f ef       	ldi	r23, 0xFF	; 255
    2c1e:	c5 01       	movw	r24, r10
    2c20:	0e 94 56 17 	call	0x2eac	; 0x2eac <strnlen>
    2c24:	4c 01       	movw	r8, r24
    2c26:	82 01       	movw	r16, r4
    2c28:	f3 2d       	mov	r31, r3
    2c2a:	ff 77       	andi	r31, 0x7F	; 127
    2c2c:	3f 2e       	mov	r3, r31
    2c2e:	16 c0       	rjmp	.+44     	; 0x2c5c <vfprintf+0x188>
    2c30:	28 01       	movw	r4, r16
    2c32:	22 e0       	ldi	r18, 0x02	; 2
    2c34:	42 0e       	add	r4, r18
    2c36:	51 1c       	adc	r5, r1
    2c38:	f8 01       	movw	r30, r16
    2c3a:	a0 80       	ld	r10, Z
    2c3c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c3e:	36 fe       	sbrs	r3, 6
    2c40:	03 c0       	rjmp	.+6      	; 0x2c48 <vfprintf+0x174>
    2c42:	69 2d       	mov	r22, r9
    2c44:	70 e0       	ldi	r23, 0x00	; 0
    2c46:	02 c0       	rjmp	.+4      	; 0x2c4c <vfprintf+0x178>
    2c48:	6f ef       	ldi	r22, 0xFF	; 255
    2c4a:	7f ef       	ldi	r23, 0xFF	; 255
    2c4c:	c5 01       	movw	r24, r10
    2c4e:	0e 94 4b 17 	call	0x2e96	; 0x2e96 <strnlen_P>
    2c52:	4c 01       	movw	r8, r24
    2c54:	f3 2d       	mov	r31, r3
    2c56:	f0 68       	ori	r31, 0x80	; 128
    2c58:	3f 2e       	mov	r3, r31
    2c5a:	82 01       	movw	r16, r4
    2c5c:	33 fc       	sbrc	r3, 3
    2c5e:	1b c0       	rjmp	.+54     	; 0x2c96 <vfprintf+0x1c2>
    2c60:	82 2d       	mov	r24, r2
    2c62:	90 e0       	ldi	r25, 0x00	; 0
    2c64:	88 16       	cp	r8, r24
    2c66:	99 06       	cpc	r9, r25
    2c68:	b0 f4       	brcc	.+44     	; 0x2c96 <vfprintf+0x1c2>
    2c6a:	b6 01       	movw	r22, r12
    2c6c:	80 e2       	ldi	r24, 0x20	; 32
    2c6e:	90 e0       	ldi	r25, 0x00	; 0
    2c70:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2c74:	2a 94       	dec	r2
    2c76:	f4 cf       	rjmp	.-24     	; 0x2c60 <vfprintf+0x18c>
    2c78:	f5 01       	movw	r30, r10
    2c7a:	37 fc       	sbrc	r3, 7
    2c7c:	85 91       	lpm	r24, Z+
    2c7e:	37 fe       	sbrs	r3, 7
    2c80:	81 91       	ld	r24, Z+
    2c82:	5f 01       	movw	r10, r30
    2c84:	b6 01       	movw	r22, r12
    2c86:	90 e0       	ldi	r25, 0x00	; 0
    2c88:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2c8c:	21 10       	cpse	r2, r1
    2c8e:	2a 94       	dec	r2
    2c90:	21 e0       	ldi	r18, 0x01	; 1
    2c92:	82 1a       	sub	r8, r18
    2c94:	91 08       	sbc	r9, r1
    2c96:	81 14       	cp	r8, r1
    2c98:	91 04       	cpc	r9, r1
    2c9a:	71 f7       	brne	.-36     	; 0x2c78 <vfprintf+0x1a4>
    2c9c:	e8 c0       	rjmp	.+464    	; 0x2e6e <vfprintf+0x39a>
    2c9e:	84 36       	cpi	r24, 0x64	; 100
    2ca0:	11 f0       	breq	.+4      	; 0x2ca6 <vfprintf+0x1d2>
    2ca2:	89 36       	cpi	r24, 0x69	; 105
    2ca4:	41 f5       	brne	.+80     	; 0x2cf6 <vfprintf+0x222>
    2ca6:	f8 01       	movw	r30, r16
    2ca8:	37 fe       	sbrs	r3, 7
    2caa:	07 c0       	rjmp	.+14     	; 0x2cba <vfprintf+0x1e6>
    2cac:	60 81       	ld	r22, Z
    2cae:	71 81       	ldd	r23, Z+1	; 0x01
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	0c 5f       	subi	r16, 0xFC	; 252
    2cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    2cb8:	08 c0       	rjmp	.+16     	; 0x2cca <vfprintf+0x1f6>
    2cba:	60 81       	ld	r22, Z
    2cbc:	71 81       	ldd	r23, Z+1	; 0x01
    2cbe:	07 2e       	mov	r0, r23
    2cc0:	00 0c       	add	r0, r0
    2cc2:	88 0b       	sbc	r24, r24
    2cc4:	99 0b       	sbc	r25, r25
    2cc6:	0e 5f       	subi	r16, 0xFE	; 254
    2cc8:	1f 4f       	sbci	r17, 0xFF	; 255
    2cca:	f3 2d       	mov	r31, r3
    2ccc:	ff 76       	andi	r31, 0x6F	; 111
    2cce:	3f 2e       	mov	r3, r31
    2cd0:	97 ff       	sbrs	r25, 7
    2cd2:	09 c0       	rjmp	.+18     	; 0x2ce6 <vfprintf+0x212>
    2cd4:	90 95       	com	r25
    2cd6:	80 95       	com	r24
    2cd8:	70 95       	com	r23
    2cda:	61 95       	neg	r22
    2cdc:	7f 4f       	sbci	r23, 0xFF	; 255
    2cde:	8f 4f       	sbci	r24, 0xFF	; 255
    2ce0:	9f 4f       	sbci	r25, 0xFF	; 255
    2ce2:	f0 68       	ori	r31, 0x80	; 128
    2ce4:	3f 2e       	mov	r3, r31
    2ce6:	2a e0       	ldi	r18, 0x0A	; 10
    2ce8:	30 e0       	ldi	r19, 0x00	; 0
    2cea:	a3 01       	movw	r20, r6
    2cec:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__ultoa_invert>
    2cf0:	88 2e       	mov	r8, r24
    2cf2:	86 18       	sub	r8, r6
    2cf4:	45 c0       	rjmp	.+138    	; 0x2d80 <vfprintf+0x2ac>
    2cf6:	85 37       	cpi	r24, 0x75	; 117
    2cf8:	31 f4       	brne	.+12     	; 0x2d06 <vfprintf+0x232>
    2cfa:	23 2d       	mov	r18, r3
    2cfc:	2f 7e       	andi	r18, 0xEF	; 239
    2cfe:	b2 2e       	mov	r11, r18
    2d00:	2a e0       	ldi	r18, 0x0A	; 10
    2d02:	30 e0       	ldi	r19, 0x00	; 0
    2d04:	25 c0       	rjmp	.+74     	; 0x2d50 <vfprintf+0x27c>
    2d06:	93 2d       	mov	r25, r3
    2d08:	99 7f       	andi	r25, 0xF9	; 249
    2d0a:	b9 2e       	mov	r11, r25
    2d0c:	8f 36       	cpi	r24, 0x6F	; 111
    2d0e:	c1 f0       	breq	.+48     	; 0x2d40 <vfprintf+0x26c>
    2d10:	18 f4       	brcc	.+6      	; 0x2d18 <vfprintf+0x244>
    2d12:	88 35       	cpi	r24, 0x58	; 88
    2d14:	79 f0       	breq	.+30     	; 0x2d34 <vfprintf+0x260>
    2d16:	b5 c0       	rjmp	.+362    	; 0x2e82 <vfprintf+0x3ae>
    2d18:	80 37       	cpi	r24, 0x70	; 112
    2d1a:	19 f0       	breq	.+6      	; 0x2d22 <vfprintf+0x24e>
    2d1c:	88 37       	cpi	r24, 0x78	; 120
    2d1e:	21 f0       	breq	.+8      	; 0x2d28 <vfprintf+0x254>
    2d20:	b0 c0       	rjmp	.+352    	; 0x2e82 <vfprintf+0x3ae>
    2d22:	e9 2f       	mov	r30, r25
    2d24:	e0 61       	ori	r30, 0x10	; 16
    2d26:	be 2e       	mov	r11, r30
    2d28:	b4 fe       	sbrs	r11, 4
    2d2a:	0d c0       	rjmp	.+26     	; 0x2d46 <vfprintf+0x272>
    2d2c:	fb 2d       	mov	r31, r11
    2d2e:	f4 60       	ori	r31, 0x04	; 4
    2d30:	bf 2e       	mov	r11, r31
    2d32:	09 c0       	rjmp	.+18     	; 0x2d46 <vfprintf+0x272>
    2d34:	34 fe       	sbrs	r3, 4
    2d36:	0a c0       	rjmp	.+20     	; 0x2d4c <vfprintf+0x278>
    2d38:	29 2f       	mov	r18, r25
    2d3a:	26 60       	ori	r18, 0x06	; 6
    2d3c:	b2 2e       	mov	r11, r18
    2d3e:	06 c0       	rjmp	.+12     	; 0x2d4c <vfprintf+0x278>
    2d40:	28 e0       	ldi	r18, 0x08	; 8
    2d42:	30 e0       	ldi	r19, 0x00	; 0
    2d44:	05 c0       	rjmp	.+10     	; 0x2d50 <vfprintf+0x27c>
    2d46:	20 e1       	ldi	r18, 0x10	; 16
    2d48:	30 e0       	ldi	r19, 0x00	; 0
    2d4a:	02 c0       	rjmp	.+4      	; 0x2d50 <vfprintf+0x27c>
    2d4c:	20 e1       	ldi	r18, 0x10	; 16
    2d4e:	32 e0       	ldi	r19, 0x02	; 2
    2d50:	f8 01       	movw	r30, r16
    2d52:	b7 fe       	sbrs	r11, 7
    2d54:	07 c0       	rjmp	.+14     	; 0x2d64 <vfprintf+0x290>
    2d56:	60 81       	ld	r22, Z
    2d58:	71 81       	ldd	r23, Z+1	; 0x01
    2d5a:	82 81       	ldd	r24, Z+2	; 0x02
    2d5c:	93 81       	ldd	r25, Z+3	; 0x03
    2d5e:	0c 5f       	subi	r16, 0xFC	; 252
    2d60:	1f 4f       	sbci	r17, 0xFF	; 255
    2d62:	06 c0       	rjmp	.+12     	; 0x2d70 <vfprintf+0x29c>
    2d64:	60 81       	ld	r22, Z
    2d66:	71 81       	ldd	r23, Z+1	; 0x01
    2d68:	80 e0       	ldi	r24, 0x00	; 0
    2d6a:	90 e0       	ldi	r25, 0x00	; 0
    2d6c:	0e 5f       	subi	r16, 0xFE	; 254
    2d6e:	1f 4f       	sbci	r17, 0xFF	; 255
    2d70:	a3 01       	movw	r20, r6
    2d72:	0e 94 9d 17 	call	0x2f3a	; 0x2f3a <__ultoa_invert>
    2d76:	88 2e       	mov	r8, r24
    2d78:	86 18       	sub	r8, r6
    2d7a:	fb 2d       	mov	r31, r11
    2d7c:	ff 77       	andi	r31, 0x7F	; 127
    2d7e:	3f 2e       	mov	r3, r31
    2d80:	36 fe       	sbrs	r3, 6
    2d82:	0d c0       	rjmp	.+26     	; 0x2d9e <vfprintf+0x2ca>
    2d84:	23 2d       	mov	r18, r3
    2d86:	2e 7f       	andi	r18, 0xFE	; 254
    2d88:	a2 2e       	mov	r10, r18
    2d8a:	89 14       	cp	r8, r9
    2d8c:	58 f4       	brcc	.+22     	; 0x2da4 <vfprintf+0x2d0>
    2d8e:	34 fe       	sbrs	r3, 4
    2d90:	0b c0       	rjmp	.+22     	; 0x2da8 <vfprintf+0x2d4>
    2d92:	32 fc       	sbrc	r3, 2
    2d94:	09 c0       	rjmp	.+18     	; 0x2da8 <vfprintf+0x2d4>
    2d96:	83 2d       	mov	r24, r3
    2d98:	8e 7e       	andi	r24, 0xEE	; 238
    2d9a:	a8 2e       	mov	r10, r24
    2d9c:	05 c0       	rjmp	.+10     	; 0x2da8 <vfprintf+0x2d4>
    2d9e:	b8 2c       	mov	r11, r8
    2da0:	a3 2c       	mov	r10, r3
    2da2:	03 c0       	rjmp	.+6      	; 0x2daa <vfprintf+0x2d6>
    2da4:	b8 2c       	mov	r11, r8
    2da6:	01 c0       	rjmp	.+2      	; 0x2daa <vfprintf+0x2d6>
    2da8:	b9 2c       	mov	r11, r9
    2daa:	a4 fe       	sbrs	r10, 4
    2dac:	0f c0       	rjmp	.+30     	; 0x2dcc <vfprintf+0x2f8>
    2dae:	fe 01       	movw	r30, r28
    2db0:	e8 0d       	add	r30, r8
    2db2:	f1 1d       	adc	r31, r1
    2db4:	80 81       	ld	r24, Z
    2db6:	80 33       	cpi	r24, 0x30	; 48
    2db8:	21 f4       	brne	.+8      	; 0x2dc2 <vfprintf+0x2ee>
    2dba:	9a 2d       	mov	r25, r10
    2dbc:	99 7e       	andi	r25, 0xE9	; 233
    2dbe:	a9 2e       	mov	r10, r25
    2dc0:	09 c0       	rjmp	.+18     	; 0x2dd4 <vfprintf+0x300>
    2dc2:	a2 fe       	sbrs	r10, 2
    2dc4:	06 c0       	rjmp	.+12     	; 0x2dd2 <vfprintf+0x2fe>
    2dc6:	b3 94       	inc	r11
    2dc8:	b3 94       	inc	r11
    2dca:	04 c0       	rjmp	.+8      	; 0x2dd4 <vfprintf+0x300>
    2dcc:	8a 2d       	mov	r24, r10
    2dce:	86 78       	andi	r24, 0x86	; 134
    2dd0:	09 f0       	breq	.+2      	; 0x2dd4 <vfprintf+0x300>
    2dd2:	b3 94       	inc	r11
    2dd4:	a3 fc       	sbrc	r10, 3
    2dd6:	11 c0       	rjmp	.+34     	; 0x2dfa <vfprintf+0x326>
    2dd8:	a0 fe       	sbrs	r10, 0
    2dda:	06 c0       	rjmp	.+12     	; 0x2de8 <vfprintf+0x314>
    2ddc:	b2 14       	cp	r11, r2
    2dde:	88 f4       	brcc	.+34     	; 0x2e02 <vfprintf+0x32e>
    2de0:	28 0c       	add	r2, r8
    2de2:	92 2c       	mov	r9, r2
    2de4:	9b 18       	sub	r9, r11
    2de6:	0e c0       	rjmp	.+28     	; 0x2e04 <vfprintf+0x330>
    2de8:	b2 14       	cp	r11, r2
    2dea:	60 f4       	brcc	.+24     	; 0x2e04 <vfprintf+0x330>
    2dec:	b6 01       	movw	r22, r12
    2dee:	80 e2       	ldi	r24, 0x20	; 32
    2df0:	90 e0       	ldi	r25, 0x00	; 0
    2df2:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2df6:	b3 94       	inc	r11
    2df8:	f7 cf       	rjmp	.-18     	; 0x2de8 <vfprintf+0x314>
    2dfa:	b2 14       	cp	r11, r2
    2dfc:	18 f4       	brcc	.+6      	; 0x2e04 <vfprintf+0x330>
    2dfe:	2b 18       	sub	r2, r11
    2e00:	02 c0       	rjmp	.+4      	; 0x2e06 <vfprintf+0x332>
    2e02:	98 2c       	mov	r9, r8
    2e04:	21 2c       	mov	r2, r1
    2e06:	a4 fe       	sbrs	r10, 4
    2e08:	10 c0       	rjmp	.+32     	; 0x2e2a <vfprintf+0x356>
    2e0a:	b6 01       	movw	r22, r12
    2e0c:	80 e3       	ldi	r24, 0x30	; 48
    2e0e:	90 e0       	ldi	r25, 0x00	; 0
    2e10:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2e14:	a2 fe       	sbrs	r10, 2
    2e16:	17 c0       	rjmp	.+46     	; 0x2e46 <vfprintf+0x372>
    2e18:	a1 fc       	sbrc	r10, 1
    2e1a:	03 c0       	rjmp	.+6      	; 0x2e22 <vfprintf+0x34e>
    2e1c:	88 e7       	ldi	r24, 0x78	; 120
    2e1e:	90 e0       	ldi	r25, 0x00	; 0
    2e20:	02 c0       	rjmp	.+4      	; 0x2e26 <vfprintf+0x352>
    2e22:	88 e5       	ldi	r24, 0x58	; 88
    2e24:	90 e0       	ldi	r25, 0x00	; 0
    2e26:	b6 01       	movw	r22, r12
    2e28:	0c c0       	rjmp	.+24     	; 0x2e42 <vfprintf+0x36e>
    2e2a:	8a 2d       	mov	r24, r10
    2e2c:	86 78       	andi	r24, 0x86	; 134
    2e2e:	59 f0       	breq	.+22     	; 0x2e46 <vfprintf+0x372>
    2e30:	a1 fe       	sbrs	r10, 1
    2e32:	02 c0       	rjmp	.+4      	; 0x2e38 <vfprintf+0x364>
    2e34:	8b e2       	ldi	r24, 0x2B	; 43
    2e36:	01 c0       	rjmp	.+2      	; 0x2e3a <vfprintf+0x366>
    2e38:	80 e2       	ldi	r24, 0x20	; 32
    2e3a:	a7 fc       	sbrc	r10, 7
    2e3c:	8d e2       	ldi	r24, 0x2D	; 45
    2e3e:	b6 01       	movw	r22, r12
    2e40:	90 e0       	ldi	r25, 0x00	; 0
    2e42:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2e46:	89 14       	cp	r8, r9
    2e48:	38 f4       	brcc	.+14     	; 0x2e58 <vfprintf+0x384>
    2e4a:	b6 01       	movw	r22, r12
    2e4c:	80 e3       	ldi	r24, 0x30	; 48
    2e4e:	90 e0       	ldi	r25, 0x00	; 0
    2e50:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2e54:	9a 94       	dec	r9
    2e56:	f7 cf       	rjmp	.-18     	; 0x2e46 <vfprintf+0x372>
    2e58:	8a 94       	dec	r8
    2e5a:	f3 01       	movw	r30, r6
    2e5c:	e8 0d       	add	r30, r8
    2e5e:	f1 1d       	adc	r31, r1
    2e60:	80 81       	ld	r24, Z
    2e62:	b6 01       	movw	r22, r12
    2e64:	90 e0       	ldi	r25, 0x00	; 0
    2e66:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2e6a:	81 10       	cpse	r8, r1
    2e6c:	f5 cf       	rjmp	.-22     	; 0x2e58 <vfprintf+0x384>
    2e6e:	22 20       	and	r2, r2
    2e70:	09 f4       	brne	.+2      	; 0x2e74 <vfprintf+0x3a0>
    2e72:	42 ce       	rjmp	.-892    	; 0x2af8 <vfprintf+0x24>
    2e74:	b6 01       	movw	r22, r12
    2e76:	80 e2       	ldi	r24, 0x20	; 32
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	0e 94 61 17 	call	0x2ec2	; 0x2ec2 <fputc>
    2e7e:	2a 94       	dec	r2
    2e80:	f6 cf       	rjmp	.-20     	; 0x2e6e <vfprintf+0x39a>
    2e82:	f6 01       	movw	r30, r12
    2e84:	86 81       	ldd	r24, Z+6	; 0x06
    2e86:	97 81       	ldd	r25, Z+7	; 0x07
    2e88:	02 c0       	rjmp	.+4      	; 0x2e8e <vfprintf+0x3ba>
    2e8a:	8f ef       	ldi	r24, 0xFF	; 255
    2e8c:	9f ef       	ldi	r25, 0xFF	; 255
    2e8e:	2b 96       	adiw	r28, 0x0b	; 11
    2e90:	e2 e1       	ldi	r30, 0x12	; 18
    2e92:	0c 94 17 18 	jmp	0x302e	; 0x302e <__epilogue_restores__>

00002e96 <strnlen_P>:
    2e96:	fc 01       	movw	r30, r24
    2e98:	05 90       	lpm	r0, Z+
    2e9a:	61 50       	subi	r22, 0x01	; 1
    2e9c:	70 40       	sbci	r23, 0x00	; 0
    2e9e:	01 10       	cpse	r0, r1
    2ea0:	d8 f7       	brcc	.-10     	; 0x2e98 <strnlen_P+0x2>
    2ea2:	80 95       	com	r24
    2ea4:	90 95       	com	r25
    2ea6:	8e 0f       	add	r24, r30
    2ea8:	9f 1f       	adc	r25, r31
    2eaa:	08 95       	ret

00002eac <strnlen>:
    2eac:	fc 01       	movw	r30, r24
    2eae:	61 50       	subi	r22, 0x01	; 1
    2eb0:	70 40       	sbci	r23, 0x00	; 0
    2eb2:	01 90       	ld	r0, Z+
    2eb4:	01 10       	cpse	r0, r1
    2eb6:	d8 f7       	brcc	.-10     	; 0x2eae <strnlen+0x2>
    2eb8:	80 95       	com	r24
    2eba:	90 95       	com	r25
    2ebc:	8e 0f       	add	r24, r30
    2ebe:	9f 1f       	adc	r25, r31
    2ec0:	08 95       	ret

00002ec2 <fputc>:
    2ec2:	0f 93       	push	r16
    2ec4:	1f 93       	push	r17
    2ec6:	cf 93       	push	r28
    2ec8:	df 93       	push	r29
    2eca:	fb 01       	movw	r30, r22
    2ecc:	23 81       	ldd	r18, Z+3	; 0x03
    2ece:	21 fd       	sbrc	r18, 1
    2ed0:	03 c0       	rjmp	.+6      	; 0x2ed8 <fputc+0x16>
    2ed2:	8f ef       	ldi	r24, 0xFF	; 255
    2ed4:	9f ef       	ldi	r25, 0xFF	; 255
    2ed6:	2c c0       	rjmp	.+88     	; 0x2f30 <fputc+0x6e>
    2ed8:	22 ff       	sbrs	r18, 2
    2eda:	16 c0       	rjmp	.+44     	; 0x2f08 <fputc+0x46>
    2edc:	46 81       	ldd	r20, Z+6	; 0x06
    2ede:	57 81       	ldd	r21, Z+7	; 0x07
    2ee0:	24 81       	ldd	r18, Z+4	; 0x04
    2ee2:	35 81       	ldd	r19, Z+5	; 0x05
    2ee4:	42 17       	cp	r20, r18
    2ee6:	53 07       	cpc	r21, r19
    2ee8:	44 f4       	brge	.+16     	; 0x2efa <fputc+0x38>
    2eea:	a0 81       	ld	r26, Z
    2eec:	b1 81       	ldd	r27, Z+1	; 0x01
    2eee:	9d 01       	movw	r18, r26
    2ef0:	2f 5f       	subi	r18, 0xFF	; 255
    2ef2:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef4:	31 83       	std	Z+1, r19	; 0x01
    2ef6:	20 83       	st	Z, r18
    2ef8:	8c 93       	st	X, r24
    2efa:	26 81       	ldd	r18, Z+6	; 0x06
    2efc:	37 81       	ldd	r19, Z+7	; 0x07
    2efe:	2f 5f       	subi	r18, 0xFF	; 255
    2f00:	3f 4f       	sbci	r19, 0xFF	; 255
    2f02:	37 83       	std	Z+7, r19	; 0x07
    2f04:	26 83       	std	Z+6, r18	; 0x06
    2f06:	14 c0       	rjmp	.+40     	; 0x2f30 <fputc+0x6e>
    2f08:	8b 01       	movw	r16, r22
    2f0a:	ec 01       	movw	r28, r24
    2f0c:	fb 01       	movw	r30, r22
    2f0e:	00 84       	ldd	r0, Z+8	; 0x08
    2f10:	f1 85       	ldd	r31, Z+9	; 0x09
    2f12:	e0 2d       	mov	r30, r0
    2f14:	09 95       	icall
    2f16:	89 2b       	or	r24, r25
    2f18:	e1 f6       	brne	.-72     	; 0x2ed2 <fputc+0x10>
    2f1a:	d8 01       	movw	r26, r16
    2f1c:	16 96       	adiw	r26, 0x06	; 6
    2f1e:	8d 91       	ld	r24, X+
    2f20:	9c 91       	ld	r25, X
    2f22:	17 97       	sbiw	r26, 0x07	; 7
    2f24:	01 96       	adiw	r24, 0x01	; 1
    2f26:	17 96       	adiw	r26, 0x07	; 7
    2f28:	9c 93       	st	X, r25
    2f2a:	8e 93       	st	-X, r24
    2f2c:	16 97       	sbiw	r26, 0x06	; 6
    2f2e:	ce 01       	movw	r24, r28
    2f30:	df 91       	pop	r29
    2f32:	cf 91       	pop	r28
    2f34:	1f 91       	pop	r17
    2f36:	0f 91       	pop	r16
    2f38:	08 95       	ret

00002f3a <__ultoa_invert>:
    2f3a:	fa 01       	movw	r30, r20
    2f3c:	aa 27       	eor	r26, r26
    2f3e:	28 30       	cpi	r18, 0x08	; 8
    2f40:	51 f1       	breq	.+84     	; 0x2f96 <__ultoa_invert+0x5c>
    2f42:	20 31       	cpi	r18, 0x10	; 16
    2f44:	81 f1       	breq	.+96     	; 0x2fa6 <__ultoa_invert+0x6c>
    2f46:	e8 94       	clt
    2f48:	6f 93       	push	r22
    2f4a:	6e 7f       	andi	r22, 0xFE	; 254
    2f4c:	6e 5f       	subi	r22, 0xFE	; 254
    2f4e:	7f 4f       	sbci	r23, 0xFF	; 255
    2f50:	8f 4f       	sbci	r24, 0xFF	; 255
    2f52:	9f 4f       	sbci	r25, 0xFF	; 255
    2f54:	af 4f       	sbci	r26, 0xFF	; 255
    2f56:	b1 e0       	ldi	r27, 0x01	; 1
    2f58:	3e d0       	rcall	.+124    	; 0x2fd6 <__ultoa_invert+0x9c>
    2f5a:	b4 e0       	ldi	r27, 0x04	; 4
    2f5c:	3c d0       	rcall	.+120    	; 0x2fd6 <__ultoa_invert+0x9c>
    2f5e:	67 0f       	add	r22, r23
    2f60:	78 1f       	adc	r23, r24
    2f62:	89 1f       	adc	r24, r25
    2f64:	9a 1f       	adc	r25, r26
    2f66:	a1 1d       	adc	r26, r1
    2f68:	68 0f       	add	r22, r24
    2f6a:	79 1f       	adc	r23, r25
    2f6c:	8a 1f       	adc	r24, r26
    2f6e:	91 1d       	adc	r25, r1
    2f70:	a1 1d       	adc	r26, r1
    2f72:	6a 0f       	add	r22, r26
    2f74:	71 1d       	adc	r23, r1
    2f76:	81 1d       	adc	r24, r1
    2f78:	91 1d       	adc	r25, r1
    2f7a:	a1 1d       	adc	r26, r1
    2f7c:	20 d0       	rcall	.+64     	; 0x2fbe <__ultoa_invert+0x84>
    2f7e:	09 f4       	brne	.+2      	; 0x2f82 <__ultoa_invert+0x48>
    2f80:	68 94       	set
    2f82:	3f 91       	pop	r19
    2f84:	2a e0       	ldi	r18, 0x0A	; 10
    2f86:	26 9f       	mul	r18, r22
    2f88:	11 24       	eor	r1, r1
    2f8a:	30 19       	sub	r19, r0
    2f8c:	30 5d       	subi	r19, 0xD0	; 208
    2f8e:	31 93       	st	Z+, r19
    2f90:	de f6       	brtc	.-74     	; 0x2f48 <__ultoa_invert+0xe>
    2f92:	cf 01       	movw	r24, r30
    2f94:	08 95       	ret
    2f96:	46 2f       	mov	r20, r22
    2f98:	47 70       	andi	r20, 0x07	; 7
    2f9a:	40 5d       	subi	r20, 0xD0	; 208
    2f9c:	41 93       	st	Z+, r20
    2f9e:	b3 e0       	ldi	r27, 0x03	; 3
    2fa0:	0f d0       	rcall	.+30     	; 0x2fc0 <__ultoa_invert+0x86>
    2fa2:	c9 f7       	brne	.-14     	; 0x2f96 <__ultoa_invert+0x5c>
    2fa4:	f6 cf       	rjmp	.-20     	; 0x2f92 <__ultoa_invert+0x58>
    2fa6:	46 2f       	mov	r20, r22
    2fa8:	4f 70       	andi	r20, 0x0F	; 15
    2faa:	40 5d       	subi	r20, 0xD0	; 208
    2fac:	4a 33       	cpi	r20, 0x3A	; 58
    2fae:	18 f0       	brcs	.+6      	; 0x2fb6 <__ultoa_invert+0x7c>
    2fb0:	49 5d       	subi	r20, 0xD9	; 217
    2fb2:	31 fd       	sbrc	r19, 1
    2fb4:	40 52       	subi	r20, 0x20	; 32
    2fb6:	41 93       	st	Z+, r20
    2fb8:	02 d0       	rcall	.+4      	; 0x2fbe <__ultoa_invert+0x84>
    2fba:	a9 f7       	brne	.-22     	; 0x2fa6 <__ultoa_invert+0x6c>
    2fbc:	ea cf       	rjmp	.-44     	; 0x2f92 <__ultoa_invert+0x58>
    2fbe:	b4 e0       	ldi	r27, 0x04	; 4
    2fc0:	a6 95       	lsr	r26
    2fc2:	97 95       	ror	r25
    2fc4:	87 95       	ror	r24
    2fc6:	77 95       	ror	r23
    2fc8:	67 95       	ror	r22
    2fca:	ba 95       	dec	r27
    2fcc:	c9 f7       	brne	.-14     	; 0x2fc0 <__ultoa_invert+0x86>
    2fce:	00 97       	sbiw	r24, 0x00	; 0
    2fd0:	61 05       	cpc	r22, r1
    2fd2:	71 05       	cpc	r23, r1
    2fd4:	08 95       	ret
    2fd6:	9b 01       	movw	r18, r22
    2fd8:	ac 01       	movw	r20, r24
    2fda:	0a 2e       	mov	r0, r26
    2fdc:	06 94       	lsr	r0
    2fde:	57 95       	ror	r21
    2fe0:	47 95       	ror	r20
    2fe2:	37 95       	ror	r19
    2fe4:	27 95       	ror	r18
    2fe6:	ba 95       	dec	r27
    2fe8:	c9 f7       	brne	.-14     	; 0x2fdc <__ultoa_invert+0xa2>
    2fea:	62 0f       	add	r22, r18
    2fec:	73 1f       	adc	r23, r19
    2fee:	84 1f       	adc	r24, r20
    2ff0:	95 1f       	adc	r25, r21
    2ff2:	a0 1d       	adc	r26, r0
    2ff4:	08 95       	ret

00002ff6 <__prologue_saves__>:
    2ff6:	2f 92       	push	r2
    2ff8:	3f 92       	push	r3
    2ffa:	4f 92       	push	r4
    2ffc:	5f 92       	push	r5
    2ffe:	6f 92       	push	r6
    3000:	7f 92       	push	r7
    3002:	8f 92       	push	r8
    3004:	9f 92       	push	r9
    3006:	af 92       	push	r10
    3008:	bf 92       	push	r11
    300a:	cf 92       	push	r12
    300c:	df 92       	push	r13
    300e:	ef 92       	push	r14
    3010:	ff 92       	push	r15
    3012:	0f 93       	push	r16
    3014:	1f 93       	push	r17
    3016:	cf 93       	push	r28
    3018:	df 93       	push	r29
    301a:	cd b7       	in	r28, 0x3d	; 61
    301c:	de b7       	in	r29, 0x3e	; 62
    301e:	ca 1b       	sub	r28, r26
    3020:	db 0b       	sbc	r29, r27
    3022:	0f b6       	in	r0, 0x3f	; 63
    3024:	f8 94       	cli
    3026:	de bf       	out	0x3e, r29	; 62
    3028:	0f be       	out	0x3f, r0	; 63
    302a:	cd bf       	out	0x3d, r28	; 61
    302c:	09 94       	ijmp

0000302e <__epilogue_restores__>:
    302e:	2a 88       	ldd	r2, Y+18	; 0x12
    3030:	39 88       	ldd	r3, Y+17	; 0x11
    3032:	48 88       	ldd	r4, Y+16	; 0x10
    3034:	5f 84       	ldd	r5, Y+15	; 0x0f
    3036:	6e 84       	ldd	r6, Y+14	; 0x0e
    3038:	7d 84       	ldd	r7, Y+13	; 0x0d
    303a:	8c 84       	ldd	r8, Y+12	; 0x0c
    303c:	9b 84       	ldd	r9, Y+11	; 0x0b
    303e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3040:	b9 84       	ldd	r11, Y+9	; 0x09
    3042:	c8 84       	ldd	r12, Y+8	; 0x08
    3044:	df 80       	ldd	r13, Y+7	; 0x07
    3046:	ee 80       	ldd	r14, Y+6	; 0x06
    3048:	fd 80       	ldd	r15, Y+5	; 0x05
    304a:	0c 81       	ldd	r16, Y+4	; 0x04
    304c:	1b 81       	ldd	r17, Y+3	; 0x03
    304e:	aa 81       	ldd	r26, Y+2	; 0x02
    3050:	b9 81       	ldd	r27, Y+1	; 0x01
    3052:	ce 0f       	add	r28, r30
    3054:	d1 1d       	adc	r29, r1
    3056:	0f b6       	in	r0, 0x3f	; 63
    3058:	f8 94       	cli
    305a:	de bf       	out	0x3e, r29	; 62
    305c:	0f be       	out	0x3f, r0	; 63
    305e:	cd bf       	out	0x3d, r28	; 61
    3060:	ed 01       	movw	r28, r26
    3062:	08 95       	ret

00003064 <_exit>:
    3064:	f8 94       	cli

00003066 <__stop_program>:
    3066:	ff cf       	rjmp	.-2      	; 0x3066 <__stop_program>
