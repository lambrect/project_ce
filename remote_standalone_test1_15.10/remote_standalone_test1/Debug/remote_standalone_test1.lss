
remote_standalone_test1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c6  00800100  000030e6  0000317a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000030e6  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000548  008001c6  008001c6  00003240  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00003240  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000329c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 000021d0  00000000  00000000  000032dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0004f677  00000000  00000000  000054ac  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00003f81  00000000  00000000  00054b23  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000f5f1  00000000  00000000  00058aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000c628  00000000  00000000  00068098  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00010fbc  00000000  00000000  000746c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0005953d  00000000  00000000  0008567c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00002a90  00000000  00000000  000debb9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 55 03 	jmp	0x6aa	; 0x6aa <__ctors_end>
       4:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
       8:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
       c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      10:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      14:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      18:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      1c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      20:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      24:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      28:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      2c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      30:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      34:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      38:	0c 94 82 08 	jmp	0x1104	; 0x1104 <__vector_14>
      3c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      40:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      44:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      48:	0c 94 e6 07 	jmp	0xfcc	; 0xfcc <__vector_18>
      4c:	0c 94 c8 07 	jmp	0xf90	; 0xf90 <__vector_19>
      50:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      54:	0c 94 09 07 	jmp	0xe12	; 0xe12 <__vector_21>
      58:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      5c:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      60:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>
      64:	0c 94 72 03 	jmp	0x6e4	; 0x6e4 <__bad_interrupt>

00000068 <__trampolines_end>:
      68:	bf 02       	muls	r27, r31
      6a:	03 02       	muls	r16, r19
      6c:	03 03       	mulsu	r16, r19
      6e:	01 01       	movw	r0, r2
      70:	04 04       	cpc	r0, r4
      72:	06 00       	.word	0x0006	; ????
      74:	ff 05       	cpc	r31, r15
      76:	ff 05       	cpc	r31, r15
      78:	ff 01       	movw	r30, r30
      7a:	06 02       	muls	r16, r22
      7c:	09 06       	cpc	r0, r25
      7e:	24 20       	and	r2, r4
      80:	06 74       	andi	r16, 0x46	; 70
      82:	7c 36       	cpi	r23, 0x6C	; 108
      84:	00 21       	and	r16, r0
      86:	08 74       	andi	r16, 0x48	; 72
      88:	9c ac       	ldd	r9, Y+60	; 0x3c
      8a:	0e c4       	rjmp	.+2076   	; 0x8a8 <app_gui_init+0x3c>
      8c:	00 22       	and	r0, r16
      8e:	07 74       	andi	r16, 0x47	; 71
      90:	8c a4       	ldd	r8, Y+44	; 0x2c
      92:	9d 06       	cpc	r9, r29
      94:	23 0b       	sbc	r18, r19
      96:	74 8c       	ldd	r7, Z+28	; 0x1c
      98:	24 19       	sub	r18, r4
      9a:	94 64       	ori	r25, 0x44	; 68
      9c:	50 52       	subi	r21, 0x20	; 32
      9e:	00 24       	eor	r0, r0
      a0:	09 74       	andi	r16, 0x49	; 73
      a2:	9c 68       	ori	r25, 0x8C	; 140
      a4:	11 93       	st	Z+, r17
      a6:	29 02       	muls	r18, r25
      a8:	25 08       	sbc	r2, r5
      aa:	74 8c       	ldd	r7, Z+28	; 0x1c
      ac:	34 aa       	std	Z+52, r3	; 0x34
      ae:	a6 00       	.word	0x00a6	; ????
      b0:	26 0a       	sbc	r2, r22
      b2:	74 9c       	mul	r7, r4
      b4:	28 89       	ldd	r18, Y+16	; 0x10
      b6:	2a 51       	subi	r18, 0x1A	; 26
      b8:	12 02       	muls	r17, r18
      ba:	27 07       	cpc	r18, r23
      bc:	74 9c       	mul	r7, r4
      be:	2c 27       	eor	r18, r28
      c0:	02 28       	or	r0, r2
      c2:	07 74       	andi	r16, 0x47	; 71
      c4:	ac 5a       	subi	r26, 0xAC	; 172
      c6:	63 02       	muls	r22, r19
      c8:	29 08       	sbc	r2, r9
      ca:	74 8c       	ldd	r7, Z+28	; 0x1c
      cc:	30 6b       	ori	r19, 0xB0	; 176
      ce:	ca 00       	.word	0x00ca	; ????
      d0:	2a 09       	sbc	r18, r10
      d2:	74 8c       	ldd	r7, Z+28	; 0x1c
      d4:	24 8a       	std	Z+20, r2	; 0x14
      d6:	a6 4a       	sbci	r26, 0xA6	; 166
      d8:	0a 2b       	or	r16, r26
      da:	08 74       	andi	r16, 0x48	; 72
      dc:	9c 2c       	mov	r9, r12
      de:	9a b2       	in	r9, 0x1a	; 26
      e0:	18 2c       	mov	r1, r8
      e2:	07 74       	andi	r16, 0x47	; 71
      e4:	7c 5a       	subi	r23, 0xAC	; 172
      e6:	94 01       	movw	r18, r8
      e8:	2d 07       	cpc	r18, r29
      ea:	74 7c       	andi	r23, 0xC4	; 196
      ec:	64 87       	std	Z+12, r22	; 0x0c
      ee:	01 2e       	mov	r0, r17
      f0:	06 74       	andi	r16, 0x46	; 70
      f2:	7c 5a       	subi	r23, 0xAC	; 172
      f4:	0c 2f       	mov	r16, r28
      f6:	08 74       	andi	r16, 0x48	; 72
      f8:	ac 2c       	mov	r10, r12
      fa:	aa e5       	ldi	r26, 0x5A	; 90
      fc:	00 30       	cpi	r16, 0x00	; 0
      fe:	09 74       	andi	r16, 0x49	; 73
     100:	9c 28       	or	r9, r12
     102:	49 96       	adiw	r24, 0x19	; 25
     104:	52 0c       	add	r5, r2
     106:	31 08       	sbc	r3, r1
     108:	74 9c       	mul	r7, r4
     10a:	48 2b       	or	r20, r24
     10c:	ad 00       	.word	0x00ad	; ????
     10e:	32 09       	sbc	r19, r2
     110:	74 9c       	mul	r7, r4
     112:	28 c9       	rjmp	.-3504   	; 0xfffff364 <__eeprom_end+0xff7ef364>
     114:	a2 68       	ori	r26, 0x82	; 130
     116:	05 33       	cpi	r16, 0x35	; 53
     118:	08 74       	andi	r16, 0x48	; 72
     11a:	8c 2d       	mov	r24, r12
     11c:	0a 13       	cpse	r16, r26
     11e:	19 34       	cpi	r17, 0x49	; 73
     120:	08 74       	andi	r16, 0x48	; 72
     122:	8c a4       	ldd	r8, Y+44	; 0x2c
     124:	65 ab       	std	Z+53, r22	; 0x35
     126:	02 35       	cpi	r16, 0x52	; 82
     128:	08 74       	andi	r16, 0x48	; 72
     12a:	8c 25       	eor	r24, r12
     12c:	13 13       	cpse	r17, r19
     12e:	19 36       	cpi	r17, 0x69	; 105
     130:	09 74       	andi	r16, 0x49	; 73
     132:	1c 25       	eor	r17, r12
     134:	93 92       	.word	0x9293	; ????
     136:	28 06       	cpc	r2, r24
     138:	37 08       	sbc	r3, r7
     13a:	74 8c       	ldd	r7, Z+28	; 0x1c
     13c:	2d aa       	std	Y+53, r2	; 0x35
     13e:	e5 00       	.word	0x00e5	; ????
     140:	38 09       	sbc	r19, r8
     142:	74 1c       	adc	r7, r4
     144:	a5 54       	subi	r26, 0x45	; 69
     146:	49 64       	ori	r20, 0x49	; 73
     148:	00 39       	cpi	r16, 0x90	; 144
     14a:	09 74       	andi	r16, 0x49	; 73
     14c:	9c 28       	or	r9, r12
     14e:	89 b4       	in	r8, 0x29	; 41
     150:	44 06       	cpc	r4, r20
     152:	3a 07       	cpc	r19, r26
     154:	74 dc       	rcall	.-1816   	; 0xfffffa3e <__eeprom_end+0xff7efa3e>
     156:	1c 8c       	ldd	r1, Y+28	; 0x1c
     158:	01 3b       	cpi	r16, 0xB1	; 177
     15a:	08 74       	andi	r16, 0x48	; 72
     15c:	dc 1c       	adc	r13, r12
     15e:	8c 32       	cpi	r24, 0x2C	; 44
     160:	00 3c       	cpi	r16, 0xC0	; 192
     162:	07 74       	andi	r16, 0x47	; 71
     164:	ac c6       	rjmp	.+3416   	; 0xebe <i2c_start_wait+0x4e>
     166:	2a 00       	.word	0x002a	; ????
     168:	3d 07       	cpc	r19, r29
     16a:	74 cc       	rjmp	.-1816   	; 0xfffffa54 <__eeprom_end+0xff7efa54>
     16c:	75 87       	std	Z+13, r23	; 0x0d
     16e:	00 3e       	cpi	r16, 0xE0	; 224
     170:	07 74       	andi	r16, 0x47	; 71
     172:	8c b0       	in	r8, 0x0c	; 12
     174:	54 07       	cpc	r21, r20
     176:	3f 08       	sbc	r3, r15
     178:	74 0c       	add	r7, r4
     17a:	31 ca       	rjmp	.-2974   	; 0xfffff5de <__eeprom_end+0xff7ef5de>
     17c:	81 18       	sub	r8, r1
     17e:	40 07       	cpc	r20, r16
     180:	74 1c       	adc	r7, r4
     182:	a5 47       	sbci	r26, 0x75	; 117
     184:	15 41       	sbci	r17, 0x15	; 21
     186:	09 74       	andi	r16, 0x49	; 73
     188:	9c 28       	or	r9, r12
     18a:	49 96       	adiw	r24, 0x19	; 25
     18c:	ae 00       	.word	0x00ae	; ????
     18e:	42 0a       	sbc	r4, r18
     190:	74 0c       	add	r7, r4
     192:	29 49       	sbci	r18, 0x99	; 153
     194:	a4 24       	eor	r10, r4
     196:	91 01       	movw	r18, r2
     198:	43 09       	sbc	r20, r3
     19a:	74 9c       	mul	r7, r4
     19c:	28 a9       	ldd	r18, Y+48	; 0x30
     19e:	25 51       	subi	r18, 0x15	; 21
     1a0:	0c 44       	sbci	r16, 0x4C	; 76
     1a2:	08 74       	andi	r16, 0x48	; 72
     1a4:	0c 29       	or	r16, r12
     1a6:	e9 45       	sbci	r30, 0x59	; 89
     1a8:	06 45       	sbci	r16, 0x56	; 86
     1aa:	08 74       	andi	r16, 0x48	; 72
     1ac:	8c 25       	eor	r24, r12
     1ae:	93 b2       	in	r9, 0x13	; 19
     1b0:	15 46       	sbci	r17, 0x65	; 101
     1b2:	08 74       	andi	r16, 0x48	; 72
     1b4:	8c 25       	eor	r24, r12
     1b6:	93 b2       	in	r9, 0x13	; 19
     1b8:	1c 47       	sbci	r17, 0x7C	; 124
     1ba:	09 74       	andi	r16, 0x49	; 73
     1bc:	1c 25       	eor	r17, r12
     1be:	4b 9a       	sbi	0x09, 3	; 9
     1c0:	54 00       	.word	0x0054	; ????
     1c2:	48 08       	sbc	r4, r8
     1c4:	74 8c       	ldd	r7, Z+28	; 0x1c
     1c6:	a4 65       	ori	r26, 0x54	; 84
     1c8:	e9 0a       	sbc	r14, r25
     1ca:	49 08       	sbc	r4, r9
     1cc:	74 8c       	ldd	r7, Z+28	; 0x1c
     1ce:	29 2b       	or	r18, r25
     1d0:	ad 00       	.word	0x00ad	; ????
     1d2:	4a 08       	sbc	r4, r10
     1d4:	74 ac       	ldd	r7, Z+60	; 0x3c
     1d6:	ac 52       	subi	r26, 0x2C	; 44
     1d8:	8a 01       	movw	r16, r20
     1da:	4b 09       	sbc	r20, r11
     1dc:	74 8c       	ldd	r7, Z+28	; 0x1c
     1de:	a4 45       	sbci	r26, 0x54	; 84
     1e0:	4a 5a       	subi	r20, 0xAA	; 170
     1e2:	01 4c       	sbci	r16, 0xC1	; 193
     1e4:	07 74       	andi	r16, 0x47	; 71
     1e6:	8c ac       	ldd	r8, Y+60	; 0x3c
     1e8:	6d 05       	cpc	r22, r13
     1ea:	4d 08       	sbc	r4, r13
     1ec:	74 8c       	ldd	r7, Z+28	; 0x1c
     1ee:	24 b9       	out	0x04, r18	; 4
     1f0:	74 05       	cpc	r23, r4
     1f2:	4e 08       	sbc	r4, r14
     1f4:	74 ac       	ldd	r7, Z+60	; 0x3c
     1f6:	a4 b2       	in	r10, 0x14	; 20
     1f8:	b4 03       	fmuls	r19, r20
     1fa:	4f 08       	sbc	r4, r15
     1fc:	74 9c       	mul	r7, r4
     1fe:	28 e9       	ldi	r18, 0x98	; 152
     200:	29 06       	cpc	r2, r25
     202:	50 09       	sbc	r21, r0
     204:	74 0c       	add	r7, r4
     206:	29 49       	sbci	r18, 0x99	; 153
     208:	a4 2c       	mov	r10, r4
     20a:	07 51       	subi	r16, 0x17	; 23
     20c:	09 74       	andi	r16, 0x49	; 73
     20e:	9c 28       	or	r9, r12
     210:	e9 29       	or	r30, r9
     212:	4c 00       	.word	0x004c	; ????
     214:	52 09       	sbc	r21, r2
     216:	74 0c       	add	r7, r4
     218:	29 49       	sbci	r18, 0x99	; 153
     21a:	a4 a4       	ldd	r10, Z+44	; 0x2c
     21c:	15 53       	subi	r17, 0x35	; 53
     21e:	08 74       	andi	r16, 0x48	; 72
     220:	1c 25       	eor	r17, r12
     222:	ac c8       	rjmp	.-3752   	; 0xfffff37c <__eeprom_end+0xff7ef37c>
     224:	00 54       	subi	r16, 0x40	; 64
     226:	07 74       	andi	r16, 0x47	; 71
     228:	8c 29       	or	r24, r12
     22a:	6b 06       	cpc	r6, r27
     22c:	55 08       	sbc	r5, r5
     22e:	74 8c       	ldd	r7, Z+28	; 0x1c
     230:	a4 5f       	subi	r26, 0xF4	; 244
     232:	56 00       	.word	0x0056	; ????
     234:	56 08       	sbc	r5, r6
     236:	74 8c       	ldd	r7, Z+28	; 0x1c
     238:	a4 97       	sbiw	r28, 0x24	; 36
     23a:	29 06       	cpc	r2, r25
     23c:	57 08       	sbc	r5, r7
     23e:	74 8c       	ldd	r7, Z+28	; 0x1c
     240:	a4 e5       	ldi	r26, 0x54	; 84
     242:	52 05       	cpc	r21, r2
     244:	58 08       	sbc	r5, r8
     246:	74 8c       	ldd	r7, Z+28	; 0x1c
     248:	a4 a9       	ldd	r26, Z+52	; 0x34
     24a:	d2 0a       	sbc	r13, r18
     24c:	59 08       	sbc	r5, r9
     24e:	74 8c       	ldd	r7, Z+28	; 0x1c
     250:	a4 29       	or	r26, r4
     252:	2b 03       	fmul	r18, r19
     254:	5a 08       	sbc	r5, r10
     256:	74 8c       	ldd	r7, Z+28	; 0x1c
     258:	2d aa       	std	Y+53, r2	; 0x35
     25a:	ad 00       	.word	0x00ad	; ????
     25c:	5b 08       	sbc	r5, r11
     25e:	74 1c       	adc	r7, r4
     260:	29 ab       	std	Y+49, r18	; 0x31
     262:	a9 00       	.word	0x00a9	; ????
     264:	5c 08       	sbc	r5, r12
     266:	74 8c       	ldd	r7, Z+28	; 0x1c
     268:	2c ac       	ldd	r2, Y+60	; 0x3c
     26a:	a5 00       	.word	0x00a5	; ????
     26c:	5d 07       	cpc	r21, r29
     26e:	74 0c       	add	r7, r4
     270:	ad 49       	sbci	r26, 0x9D	; 157
     272:	06 5e       	subi	r16, 0xE6	; 230
     274:	08 74       	andi	r16, 0x48	; 72
     276:	9c 28       	or	r9, r12
     278:	c9 69       	ori	r28, 0x99	; 153
     27a:	00 5f       	subi	r16, 0xF0	; 240
     27c:	06 74       	andi	r16, 0x46	; 70
     27e:	7c f2       	brlt	.-98     	; 0x21e <__trampolines_end+0x1b6>
     280:	02 60       	ori	r16, 0x02	; 2
     282:	07 74       	andi	r16, 0x47	; 71
     284:	9c 30       	cpi	r25, 0x0C	; 12
     286:	a7 01       	movw	r20, r14
     288:	61 07       	cpc	r22, r17
     28a:	74 5c       	subi	r23, 0xC4	; 196
     28c:	a5 93       	las	Z, r26
     28e:	0a 62       	ori	r16, 0x2A	; 42
     290:	09 74       	andi	r16, 0x49	; 73
     292:	8c 4c       	sbci	r24, 0xCC	; 204
     294:	4a 5a       	subi	r20, 0xAA	; 170
     296:	64 00       	.word	0x0064	; ????
     298:	63 08       	sbc	r6, r3
     29a:	74 5c       	subi	r23, 0xC4	; 196
     29c:	25 0b       	sbc	r18, r21
     29e:	55 00       	.word	0x0055	; ????
     2a0:	64 08       	sbc	r6, r4
     2a2:	74 ac       	ldd	r7, Z+60	; 0x3c
     2a4:	48 e9       	ldi	r20, 0x98	; 152
     2a6:	a4 02       	muls	r26, r20
     2a8:	65 08       	sbc	r6, r5
     2aa:	74 dc       	rcall	.-1816   	; 0xfffffb94 <__eeprom_end+0xff7efb94>
     2ac:	28 49       	sbci	r18, 0x98	; 152
     2ae:	34 15       	cp	r19, r4
     2b0:	66 08       	sbc	r6, r6
     2b2:	74 ac       	ldd	r7, Z+60	; 0x3c
     2b4:	d2 94       	swap	r13
     2b6:	c5 00       	.word	0x00c5	; ????
     2b8:	67 09       	sbc	r22, r7
     2ba:	74 5c       	subi	r23, 0xC4	; 196
     2bc:	a5 a4       	ldd	r10, Z+45	; 0x2d
     2be:	25 12       	cpse	r2, r21
     2c0:	00 68       	ori	r16, 0x80	; 128
     2c2:	08 74       	andi	r16, 0x48	; 72
     2c4:	8c 4c       	sbci	r24, 0xCC	; 204
     2c6:	4a 7a       	andi	r20, 0xAA	; 170
     2c8:	05 69       	ori	r16, 0x95	; 149
     2ca:	08 74       	andi	r16, 0x48	; 72
     2cc:	9c 58       	subi	r25, 0x8C	; 140
     2ce:	8b 56       	subi	r24, 0x6B	; 107
     2d0:	00 6a       	ori	r16, 0xA0	; 160
     2d2:	09 74       	andi	r16, 0x49	; 73
     2d4:	ac 1c       	adc	r10, r12
     2d6:	c8 2a       	or	r12, r24
     2d8:	12 00       	.word	0x0012	; ????
     2da:	6b 09       	sbc	r22, r11
     2dc:	74 8c       	ldd	r7, Z+28	; 0x1c
     2de:	2c 49       	sbci	r18, 0x9C	; 156
     2e0:	a4 a4       	ldd	r10, Z+44	; 0x2c
     2e2:	15 6c       	ori	r17, 0xC5	; 197
     2e4:	07 74       	andi	r16, 0x47	; 71
     2e6:	0c ad       	ldd	r16, Y+60	; 0x3c
     2e8:	69 05       	cpc	r22, r9
     2ea:	6d 08       	sbc	r6, r13
     2ec:	74 cc       	rjmp	.-1816   	; 0xfffffbd6 <__eeprom_end+0xff7efbd6>
     2ee:	24 59       	subi	r18, 0x94	; 148
     2f0:	ba 02       	muls	r27, r26
     2f2:	6e 07       	cpc	r22, r30
     2f4:	74 4c       	sbci	r23, 0xC4	; 196
     2f6:	29 e9       	ldi	r18, 0x99	; 153
     2f8:	15 6f       	ori	r17, 0xF5	; 245
     2fa:	08 74       	andi	r16, 0x48	; 72
     2fc:	dc 28       	or	r13, r12
     2fe:	69 8a       	std	Y+17, r6	; 0x11
     300:	01 70       	andi	r16, 0x01	; 1
     302:	09 74       	andi	r16, 0x49	; 73
     304:	4c 29       	or	r20, r12
     306:	49 a4       	ldd	r4, Y+41	; 0x29
     308:	2c 03       	fmul	r18, r20
     30a:	71 08       	sbc	r7, r1
     30c:	74 5c       	subi	r23, 0xC4	; 196
     30e:	a5 93       	las	Z, r26
     310:	96 00       	.word	0x0096	; ????
     312:	72 08       	sbc	r7, r2
     314:	74 cc       	rjmp	.-1816   	; 0xfffffbfe <__eeprom_end+0xff7efbfe>
     316:	24 91       	lpm	r18, Z
     318:	b2 1c       	adc	r11, r2
     31a:	73 08       	sbc	r7, r3
     31c:	74 5c       	subi	r23, 0xC4	; 196
     31e:	45 4c       	sbci	r20, 0xC5	; 197
     320:	64 00       	.word	0x0064	; ????
     322:	74 08       	sbc	r7, r4
     324:	74 9c       	mul	r7, r4
     326:	68 ca       	rjmp	.-2864   	; 0xfffff7f8 <__eeprom_end+0xff7ef7f8>
     328:	c2 14       	cp	r12, r2
     32a:	75 07       	cpc	r23, r21
     32c:	74 cc       	rjmp	.-1816   	; 0xfffffc16 <__eeprom_end+0xff7efc16>
     32e:	a4 27       	eor	r26, r20
     330:	15 76       	andi	r17, 0x65	; 101
     332:	07 74       	andi	r16, 0x47	; 71
     334:	cc a4       	ldd	r12, Y+44	; 0x2c
     336:	a7 18       	sub	r10, r7
     338:	77 08       	sbc	r7, r7
     33a:	74 cc       	rjmp	.-1816   	; 0xfffffc24 <__eeprom_end+0xff7efc24>
     33c:	a4 65       	ori	r26, 0x54	; 84
     33e:	a9 02       	muls	r26, r25
     340:	78 09       	sbc	r23, r8
     342:	74 cc       	rjmp	.-1816   	; 0xfffffc2c <__eeprom_end+0xff7efc2c>
     344:	24 ca       	rjmp	.-3000   	; 0xfffff78e <__eeprom_end+0xff7ef78e>
     346:	a2 24       	eor	r10, r2
     348:	05 79       	andi	r16, 0x95	; 149
     34a:	09 74       	andi	r16, 0x49	; 73
     34c:	cc a4       	ldd	r12, Y+44	; 0x2c
     34e:	49 4b       	sbci	r20, 0xB9	; 185
     350:	24 00       	.word	0x0024	; ????
     352:	7a 08       	sbc	r7, r10
     354:	74 cc       	rjmp	.-1816   	; 0xfffffc3e <__eeprom_end+0xff7efc3e>
     356:	2d 8a       	std	Y+21, r2	; 0x15
     358:	56 00       	.word	0x0056	; ????
     35a:	7b 08       	sbc	r7, r11
     35c:	74 ac       	ldd	r7, Z+60	; 0x3c
     35e:	92 56       	subi	r25, 0x62	; 98
     360:	4c 00       	.word	0x004c	; ????
     362:	7c 07       	cpc	r23, r28
     364:	74 9c       	mul	r7, r4
     366:	ac 33       	cpi	r26, 0x3C	; 60
     368:	00 7d       	andi	r16, 0xD0	; 208
     36a:	09 74       	andi	r16, 0x49	; 73
     36c:	8c 30       	cpi	r24, 0x0C	; 12
     36e:	93 b2       	in	r9, 0x13	; 19
     370:	28 03       	fmul	r18, r16
     372:	7e 08       	sbc	r7, r14
     374:	74 9c       	mul	r7, r4
     376:	44 c9       	rjmp	.-3448   	; 0xfffff600 <__eeprom_end+0xff7ef600>
     378:	69 00       	.word	0x0069	; ????
     37a:	a0 06       	cpc	r10, r16
     37c:	74 7c       	andi	r23, 0xC4	; 196
     37e:	36 00       	.word	0x0036	; ????
     380:	a1 08       	sbc	r10, r1
     382:	74 9c       	mul	r7, r4
     384:	1c c8       	rjmp	.-4040   	; 0xfffff3be <__eeprom_end+0xff7ef3be>
     386:	ca 00       	.word	0x00ca	; ????
     388:	a2 08       	sbc	r10, r2
     38a:	74 9c       	mul	r7, r4
     38c:	68 c9       	rjmp	.-3376   	; 0xfffff65e <__eeprom_end+0xff7ef65e>
     38e:	a6 18       	sub	r10, r6
     390:	a3 08       	sbc	r10, r3
     392:	74 ac       	ldd	r7, Z+60	; 0x3c
     394:	9a 54       	subi	r25, 0x4A	; 74
     396:	49 01       	movw	r8, r18
     398:	a4 09       	sbc	r26, r4
     39a:	74 cc       	rjmp	.-1816   	; 0xfffffc84 <__eeprom_end+0xff7efc84>
     39c:	28 91       	.word	0x9128	; ????
     39e:	94 28       	or	r9, r4
     3a0:	04 a5       	ldd	r16, Z+44	; 0x2c
     3a2:	09 74       	andi	r16, 0x49	; 73
     3a4:	8c 24       	eor	r8, r12
     3a6:	8a a6       	std	Y+42, r8	; 0x2a
     3a8:	2c 06       	cpc	r2, r28
     3aa:	a6 08       	sbc	r10, r6
     3ac:	74 9c       	mul	r7, r4
     3ae:	2c 07       	cpc	r18, r28
     3b0:	b2 18       	sub	r11, r2
     3b2:	a7 09       	sbc	r26, r7
     3b4:	74 1c       	adc	r7, r4
     3b6:	53 12       	cpse	r5, r19
     3b8:	69 89       	ldd	r22, Y+17	; 0x11
     3ba:	04 a8       	ldd	r0, Z+52	; 0x34
     3bc:	06 74       	andi	r16, 0x46	; 70
     3be:	8c 24       	eor	r8, r12
     3c0:	67 a9       	ldd	r22, Z+55	; 0x37
     3c2:	0a 74       	andi	r16, 0x4A	; 74
     3c4:	1c 25       	eor	r17, r12
     3c6:	5a 16       	cp	r5, r26
     3c8:	29 51       	subi	r18, 0x19	; 25
     3ca:	00 aa       	std	Z+48, r0	; 0x30
     3cc:	08 74       	andi	r16, 0x48	; 72
     3ce:	1c a5       	ldd	r17, Y+44	; 0x2c
     3d0:	a4 ae       	std	Z+60, r10	; 0x3c
     3d2:	00 ab       	std	Z+48, r16	; 0x30
     3d4:	09 74       	andi	r16, 0x49	; 73
     3d6:	dc 44       	sbci	r29, 0x4C	; 76
     3d8:	89 92       	st	Y+, r8
     3da:	1c 01       	movw	r2, r24
     3dc:	ac 08       	sbc	r10, r12
     3de:	74 7c       	andi	r23, 0xC4	; 196
     3e0:	64 cb       	rjmp	.-2360   	; 0xfffffaaa <__eeprom_end+0xff7efaaa>
     3e2:	21 00       	.word	0x0021	; ????
     3e4:	ad 07       	cpc	r26, r29
     3e6:	74 7c       	andi	r23, 0xC4	; 196
     3e8:	64 87       	std	Z+12, r22	; 0x0c
     3ea:	01 ae       	std	Z+57, r0	; 0x39
     3ec:	09 74       	andi	r16, 0x49	; 73
     3ee:	1c 65       	ori	r17, 0x5C	; 92
     3f0:	58 12       	cpse	r5, r24
     3f2:	1d 02       	muls	r17, r29
     3f4:	af 06       	cpc	r10, r31
     3f6:	74 8c       	ldd	r7, Z+28	; 0x1c
     3f8:	9d 01       	movw	r18, r26
     3fa:	b0 08       	sbc	r11, r0
     3fc:	74 9c       	mul	r7, r4
     3fe:	28 89       	ldd	r18, Y+16	; 0x10
     400:	72 02       	muls	r23, r18
     402:	b1 08       	sbc	r11, r1
     404:	74 9c       	mul	r7, r4
     406:	68 8a       	std	Y+16, r6	; 0x10
     408:	57 00       	.word	0x0057	; ????
     40a:	b2 08       	sbc	r11, r2
     40c:	74 0c       	add	r7, r4
     40e:	2d ca       	rjmp	.-2982   	; 0xfffff86a <__eeprom_end+0xff7ef86a>
     410:	74 0c       	add	r7, r4
     412:	b3 08       	sbc	r11, r3
     414:	74 0c       	add	r7, r4
     416:	2d 0a       	sbc	r2, r29
     418:	a3 1c       	adc	r10, r3
     41a:	b4 06       	cpc	r11, r20
     41c:	74 ac       	ldd	r7, Z+60	; 0x3c
     41e:	3a 11       	cpse	r19, r10
     420:	b5 08       	sbc	r11, r5
     422:	74 cc       	rjmp	.-1816   	; 0xfffffd0c <__eeprom_end+0xff7efd0c>
     424:	a4 17       	cp	r26, r20
     426:	29 03       	fmul	r18, r17
     428:	b6 08       	sbc	r11, r6
     42a:	74 9c       	mul	r7, r4
     42c:	41 59       	subi	r20, 0x91	; 145
     42e:	7a 04       	cpc	r7, r10
     430:	b7 06       	cpc	r11, r23
     432:	74 7c       	andi	r23, 0xC4	; 196
     434:	28 27       	eor	r18, r24
     436:	b8 07       	cpc	r27, r24
     438:	74 7c       	andi	r23, 0xC4	; 196
     43a:	42 14       	cp	r4, r2
     43c:	03 b9       	out	0x03, r16	; 3
     43e:	08 74       	andi	r16, 0x48	; 72
     440:	9c 48       	sbci	r25, 0x8C	; 140
     442:	ab 63       	ori	r26, 0x3B	; 59
     444:	00 ba       	out	0x10, r0	; 16
     446:	08 74       	andi	r16, 0x48	; 72
     448:	9c 28       	or	r9, r12
     44a:	89 e2       	ldi	r24, 0x29	; 41
     44c:	15 bb       	out	0x15, r17	; 21
     44e:	09 74       	andi	r16, 0x49	; 73
     450:	cc 24       	eor	r12, r12
     452:	4a 94       	dec	r4
     454:	1c 02       	muls	r17, r28
     456:	bc 09       	sbc	r27, r12
     458:	74 8c       	ldd	r7, Z+28	; 0x1c
     45a:	ac 98       	cbi	0x15, 4	; 21
     45c:	24 5b       	subi	r18, 0xB4	; 180
     45e:	00 bd       	out	0x20, r16	; 32
     460:	09 74       	andi	r16, 0x49	; 73
     462:	8c ac       	ldd	r8, Y+60	; 0x3c
     464:	a2 45       	sbci	r26, 0x52	; 82
     466:	99 00       	.word	0x0099	; ????
     468:	be 09       	sbc	r27, r14
     46a:	74 0c       	add	r7, r4
     46c:	2d 0a       	sbc	r2, r29
     46e:	13 5b       	subi	r17, 0xB3	; 179
     470:	00 bf       	out	0x30, r16	; 48
     472:	08 74       	andi	r16, 0x48	; 72
     474:	9c 1c       	adc	r9, r12
     476:	88 42       	sbci	r24, 0x28	; 40
     478:	15 c0       	rjmp	.+42     	; 0x4a4 <__LOCK_REGION_LENGTH__+0xa4>
     47a:	09 74       	andi	r16, 0x49	; 73
     47c:	8c 30       	cpi	r24, 0x0C	; 12
     47e:	4a 92       	st	-Y, r4
     480:	a5 0a       	sbc	r10, r21
     482:	c1 08       	sbc	r12, r1
     484:	74 ac       	ldd	r7, Z+60	; 0x3c
     486:	96 64       	ori	r25, 0x46	; 70
     488:	a9 02       	muls	r26, r25
     48a:	c2 09       	sbc	r28, r2
     48c:	74 0c       	add	r7, r4
     48e:	2d 4a       	sbci	r18, 0xAD	; 173
     490:	92 a5       	ldd	r25, Z+42	; 0x2a
     492:	0a c3       	rjmp	.+1556   	; 0xaa8 <__stack+0x1a9>
     494:	09 74       	andi	r16, 0x49	; 73
     496:	1c 53       	subi	r17, 0x3C	; 60
     498:	92 2c       	mov	r9, r2
     49a:	55 00       	.word	0x0055	; ????
     49c:	c4 09       	sbc	r28, r4
     49e:	74 8c       	ldd	r7, Z+28	; 0x1c
     4a0:	24 aa       	std	Z+52, r2	; 0x34
     4a2:	24 4b       	sbci	r18, 0xB4	; 180
     4a4:	15 c5       	rjmp	.+2602   	; 0xed0 <i2c_start_wait+0x60>
     4a6:	09 74       	andi	r16, 0x49	; 73
     4a8:	9c 2c       	mov	r9, r12
     4aa:	4a 92       	st	-Y, r4
     4ac:	a5 0a       	sbc	r10, r21
     4ae:	c6 0a       	sbc	r12, r22
     4b0:	74 9c       	mul	r7, r4
     4b2:	21 49       	sbci	r18, 0x91	; 145
     4b4:	06 a5       	ldd	r16, Z+46	; 0x2e
     4b6:	22 02       	muls	r18, r18
     4b8:	c7 09       	sbc	r28, r7
     4ba:	74 9c       	mul	r7, r4
     4bc:	28 a9       	ldd	r18, Y+48	; 0x30
     4be:	25 51       	subi	r18, 0x15	; 21
     4c0:	0d c8       	rjmp	.-4070   	; 0xfffff4dc <__eeprom_end+0xff7ef4dc>
     4c2:	08 74       	andi	r16, 0x48	; 72
     4c4:	8c 6c       	ori	r24, 0xCC	; 204
     4c6:	91 b2       	in	r9, 0x11	; 17
     4c8:	15 c9       	rjmp	.-3542   	; 0xfffff6f4 <__eeprom_end+0xff7ef6f4>
     4ca:	08 74       	andi	r16, 0x48	; 72
     4cc:	ac 64       	ori	r26, 0x4C	; 76
     4ce:	91 b2       	in	r9, 0x11	; 17
     4d0:	15 ca       	rjmp	.-3030   	; 0xfffff8fc <__eeprom_end+0xff7ef8fc>
     4d2:	08 74       	andi	r16, 0x48	; 72
     4d4:	1c 65       	ori	r17, 0x5C	; 92
     4d6:	91 b2       	in	r9, 0x11	; 17
     4d8:	15 cb       	rjmp	.-2518   	; 0xfffffb04 <__eeprom_end+0xff7efb04>
     4da:	09 74       	andi	r16, 0x49	; 73
     4dc:	8c 24       	eor	r8, r12
     4de:	59 a4       	ldd	r5, Y+41	; 0x29
     4e0:	6c 05       	cpc	r22, r12
     4e2:	cc 08       	sbc	r12, r12
     4e4:	74 8c       	ldd	r7, Z+28	; 0x1c
     4e6:	6c ca       	rjmp	.-2856   	; 0xfffff9c0 <__eeprom_end+0xff7ef9c0>
     4e8:	a2 15       	cp	r26, r2
     4ea:	cd 08       	sbc	r12, r13
     4ec:	74 ac       	ldd	r7, Z+60	; 0x3c
     4ee:	64 ca       	rjmp	.-2872   	; 0xfffff9b8 <__eeprom_end+0xff7ef9b8>
     4f0:	a2 15       	cp	r26, r2
     4f2:	ce 08       	sbc	r12, r14
     4f4:	74 9c       	mul	r7, r4
     4f6:	68 ca       	rjmp	.-2864   	; 0xfffff9c8 <__eeprom_end+0xff7ef9c8>
     4f8:	a2 15       	cp	r26, r2
     4fa:	cf 09       	sbc	r28, r15
     4fc:	74 8c       	ldd	r7, Z+28	; 0x1c
     4fe:	24 ca       	rjmp	.-3000   	; 0xfffff948 <__eeprom_end+0xff7ef948>
     500:	4a 2b       	or	r20, r26
     502:	00 d0       	rcall	.+0      	; 0x504 <__LOCK_REGION_LENGTH__+0x104>
     504:	09 74       	andi	r16, 0x49	; 73
     506:	8c 29       	or	r24, r12
     508:	59 2a       	or	r5, r25
     50a:	43 0a       	sbc	r4, r19
     50c:	d1 09       	sbc	r29, r1
     50e:	74 9c       	mul	r7, r4
     510:	44 49       	sbci	r20, 0x94	; 148
     512:	2e 55       	subi	r18, 0x5E	; 94
     514:	00 d2       	rcall	.+1024   	; 0x916 <__stack+0x17>
     516:	09 74       	andi	r16, 0x49	; 73
     518:	8c 30       	cpi	r24, 0x0C	; 12
     51a:	4a 9a       	sbi	0x09, 2	; 9
     51c:	62 00       	.word	0x0062	; ????
     51e:	d3 07       	cpc	r29, r19
     520:	74 ac       	ldd	r7, Z+60	; 0x3c
     522:	96 a6       	std	Z+46, r9	; 0x2e
     524:	18 d4       	rcall	.+2096   	; 0xd56 <app_speaker+0x3a>
     526:	09 74       	andi	r16, 0x49	; 73
     528:	9c 2c       	mov	r9, r12
     52a:	4a 9a       	sbi	0x09, 2	; 9
     52c:	62 00       	.word	0x0062	; ????
     52e:	d5 08       	sbc	r13, r5
     530:	74 9c       	mul	r7, r4
     532:	61 e9       	ldi	r22, 0x91	; 145
     534:	14 03       	mulsu	r17, r20
     536:	d6 09       	sbc	r29, r6
     538:	74 8c       	ldd	r7, Z+28	; 0x1c
     53a:	24 aa       	std	Z+52, r2	; 0x34
     53c:	34 c5       	rjmp	.+2664   	; 0xfa6 <__vector_19+0x16>
     53e:	00 d7       	rcall	.+3584   	; 0x1340 <u8g2_draw_circle_section+0x5e>
     540:	09 74       	andi	r16, 0x49	; 73
     542:	cc 24       	eor	r12, r12
     544:	aa e4       	ldi	r26, 0x4A	; 74
     546:	10 00       	.word	0x0010	; ????
     548:	d8 09       	sbc	r29, r8
     54a:	74 1c       	adc	r7, r4
     54c:	a5 b2       	in	r10, 0x15	; 21
     54e:	54 64       	ori	r21, 0x44	; 68
     550:	00 d9       	rcall	.-3584   	; 0xfffff752 <__eeprom_end+0xff7ef752>
     552:	09 74       	andi	r16, 0x49	; 73
     554:	8c 30       	cpi	r24, 0x0C	; 12
     556:	4a 5a       	subi	r20, 0xAA	; 170
     558:	56 00       	.word	0x0056	; ????
     55a:	da 07       	cpc	r29, r26
     55c:	74 ac       	ldd	r7, Z+60	; 0x3c
     55e:	96 96       	adiw	r26, 0x26	; 38
     560:	15 db       	rcall	.-2518   	; 0xfffffb8c <__eeprom_end+0xff7efb8c>
     562:	08 74       	andi	r16, 0x48	; 72
     564:	9c 38       	cpi	r25, 0x8C	; 140
     566:	69 59       	subi	r22, 0x99	; 153
     568:	01 dc       	rcall	.-2046   	; 0xfffffd6c <__eeprom_end+0xff7efd6c>
     56a:	09 74       	andi	r16, 0x49	; 73
     56c:	8c 24       	eor	r8, r12
     56e:	4d 5a       	subi	r20, 0xAD	; 173
     570:	56 00       	.word	0x0056	; ????
     572:	dd 08       	sbc	r13, r13
     574:	74 ac       	ldd	r7, Z+60	; 0x3c
     576:	34 89       	ldd	r19, Z+20	; 0x14
     578:	b2 18       	sub	r11, r2
     57a:	de 09       	sbc	r29, r14
     57c:	74 8c       	ldd	r7, Z+28	; 0x1c
     57e:	4c 4a       	sbci	r20, 0xAC	; 172
     580:	12 29       	or	r17, r2
     582:	07 df       	rcall	.-498    	; 0x392 <__trampolines_end+0x32a>
     584:	0b 74       	andi	r16, 0x4B	; 75
     586:	9c 28       	or	r9, r12
     588:	49 a4       	ldd	r4, Y+41	; 0x29
     58a:	24 59       	subi	r18, 0x94	; 148
     58c:	32 00       	.word	0x0032	; ????
     58e:	e0 09       	sbc	r30, r0
     590:	74 8c       	ldd	r7, Z+28	; 0x1c
     592:	30 53       	subi	r19, 0x30	; 48
     594:	4a 2a       	or	r4, r26
     596:	00 e1       	ldi	r16, 0x10	; 16
     598:	08 74       	andi	r16, 0x48	; 72
     59a:	ac 9a       	sbi	0x15, 4	; 21
     59c:	52 52       	subi	r21, 0x22	; 34
     59e:	01 e2       	ldi	r16, 0x21	; 33
     5a0:	08 74       	andi	r16, 0x48	; 72
     5a2:	1c 59       	subi	r17, 0x9C	; 156
     5a4:	29 a9       	ldd	r18, Y+49	; 0x31
     5a6:	00 e3       	ldi	r16, 0x30	; 48
     5a8:	09 74       	andi	r16, 0x49	; 73
     5aa:	9c 44       	sbci	r25, 0x4C	; 76
     5ac:	89 94       	.word	0x9489	; ????
     5ae:	92 0a       	sbc	r9, r18
     5b0:	e4 09       	sbc	r30, r4
     5b2:	74 8c       	ldd	r7, Z+28	; 0x1c
     5b4:	24 56       	subi	r18, 0x64	; 100
     5b6:	4a 2a       	or	r4, r26
     5b8:	00 e5       	ldi	r16, 0x50	; 80
     5ba:	09 74       	andi	r16, 0x49	; 73
     5bc:	9c 1c       	adc	r9, r12
     5be:	50 4a       	sbci	r21, 0xA0	; 160
     5c0:	2a 00       	.word	0x002a	; ????
     5c2:	e6 08       	sbc	r14, r6
     5c4:	74 dc       	rcall	.-1816   	; 0xfffffeae <__eeprom_end+0xff7efeae>
     5c6:	21 59       	subi	r18, 0x91	; 145
     5c8:	a2 11       	cpse	r26, r2
     5ca:	e7 09       	sbc	r30, r7
     5cc:	74 dc       	rcall	.-1816   	; 0xfffffeb6 <__eeprom_end+0xff7efeb6>
     5ce:	28 29       	or	r18, r8
     5d0:	4a 11       	cpse	r20, r10
     5d2:	00 e8       	ldi	r16, 0x80	; 128
     5d4:	09 74       	andi	r16, 0x49	; 73
     5d6:	8c 30       	cpi	r24, 0x0C	; 12
     5d8:	4a 12       	cpse	r4, r26
     5da:	4d 05       	cpc	r20, r13
     5dc:	e9 08       	sbc	r14, r9
     5de:	74 ac       	ldd	r7, Z+60	; 0x3c
     5e0:	96 44       	sbci	r25, 0x46	; 70
     5e2:	53 01       	movw	r10, r6
     5e4:	ea 09       	sbc	r30, r10
     5e6:	74 0c       	add	r7, r4
     5e8:	2d 4a       	sbci	r18, 0xAD	; 173
     5ea:	12 4d       	sbci	r17, 0xD2	; 210
     5ec:	05 eb       	ldi	r16, 0xB5	; 181
     5ee:	09 74       	andi	r16, 0x49	; 73
     5f0:	8c 24       	eor	r8, r12
     5f2:	aa 24       	eor	r10, r10
     5f4:	9a 0a       	sbc	r9, r26
     5f6:	ec 08       	sbc	r14, r12
     5f8:	74 8c       	ldd	r7, Z+28	; 0x1c
     5fa:	30 2b       	or	r19, r16
     5fc:	ad 00       	.word	0x00ad	; ????
     5fe:	ed 08       	sbc	r14, r13
     600:	74 ac       	ldd	r7, Z+60	; 0x3c
     602:	44 2b       	or	r20, r20
     604:	ad 00       	.word	0x00ad	; ????
     606:	ee 09       	sbc	r30, r14
     608:	74 9c       	mul	r7, r4
     60a:	28 89       	ldd	r18, Y+16	; 0x10
     60c:	b2 68       	ori	r27, 0x82	; 130
     60e:	05 ef       	ldi	r16, 0xF5	; 245
     610:	08 74       	andi	r16, 0x48	; 72
     612:	8c 24       	eor	r8, r12
     614:	d5 a2       	std	Z+37, r13	; 0x25
     616:	15 f0       	brhs	.+4      	; 0x61c <__LOCK_REGION_LENGTH__+0x21c>
     618:	09 74       	andi	r16, 0x49	; 73
     61a:	8c 24       	eor	r8, r12
     61c:	ca 94       	dec	r12
     61e:	52 0c       	add	r5, r2
     620:	f1 09       	sbc	r31, r1
     622:	74 9c       	mul	r7, r4
     624:	44 49       	sbci	r20, 0x94	; 148
     626:	a4 a4       	ldd	r10, Z+44	; 0x2c
     628:	15 f2       	brhs	.-124    	; 0x5ae <__LOCK_REGION_LENGTH__+0x1ae>
     62a:	09 74       	andi	r16, 0x49	; 73
     62c:	8c 30       	cpi	r24, 0x0C	; 12
     62e:	8b 92       	.word	0x928b	; ????
     630:	28 06       	cpc	r2, r24
     632:	f3 09       	sbc	r31, r3
     634:	74 ac       	ldd	r7, Z+60	; 0x3c
     636:	5a 94       	dec	r5
     638:	44 31       	cpi	r20, 0x14	; 20
     63a:	00 f4       	brcc	.+0      	; 0x63c <__LOCK_REGION_LENGTH__+0x23c>
     63c:	09 74       	andi	r16, 0x49	; 73
     63e:	9c 1c       	adc	r9, r12
     640:	88 92       	.word	0x9288	; ????
     642:	28 06       	cpc	r2, r24
     644:	f5 08       	sbc	r15, r5
     646:	74 8c       	ldd	r7, Z+28	; 0x1c
     648:	39 4a       	sbci	r19, 0xA9	; 169
     64a:	a2 18       	sub	r10, r2
     64c:	f6 09       	sbc	r31, r6
     64e:	74 8c       	ldd	r7, Z+28	; 0x1c
     650:	24 8e       	std	Z+28, r2	; 0x1c
     652:	92 28       	or	r9, r2
     654:	06 f7       	brtc	.-64     	; 0x616 <__LOCK_REGION_LENGTH__+0x216>
     656:	07 74       	andi	r16, 0x47	; 71
     658:	9c 78       	andi	r25, 0x8C	; 140
     65a:	8e 01       	movw	r16, r28
     65c:	f8 07       	cpc	r31, r24
     65e:	74 5c       	subi	r23, 0xC4	; 196
     660:	a5 8b       	std	Z+21, r26	; 0x15
     662:	0c f9       	.word	0xf90c	; ????
     664:	09 74       	andi	r16, 0x49	; 73
     666:	8c 30       	cpi	r24, 0x0C	; 12
     668:	4a 9a       	sbi	0x09, 2	; 9
     66a:	54 00       	.word	0x0054	; ????
     66c:	fa 07       	cpc	r31, r26
     66e:	74 ac       	ldd	r7, Z+60	; 0x3c
     670:	96 26       	eor	r9, r22
     672:	15 fb       	bst	r17, 5
     674:	08 74       	andi	r16, 0x48	; 72
     676:	9c 38       	cpi	r25, 0x8C	; 140
     678:	69 52       	subi	r22, 0x29	; 41
     67a:	01 fc       	sbrc	r0, 1
     67c:	09 74       	andi	r16, 0x49	; 73
     67e:	8c 24       	eor	r8, r12
     680:	4d 9a       	sbi	0x09, 5	; 9
     682:	54 00       	.word	0x0054	; ????
     684:	fd 09       	sbc	r31, r13
     686:	74 ac       	ldd	r7, Z+60	; 0x3c
     688:	96 64       	ori	r25, 0x46	; 70
     68a:	4b 24       	eor	r4, r11
     68c:	00 fe       	sbrs	r0, 0
     68e:	0a 74       	andi	r16, 0x4A	; 74
     690:	8c 2c       	mov	r8, r12
     692:	93 92       	.word	0x9293	; ????
     694:	44 ca       	rjmp	.-2936   	; 0xfffffb1e <__eeprom_end+0xff7efb1e>
     696:	00 ff       	sbrs	r16, 0
     698:	0a 74       	andi	r16, 0x4A	; 74
     69a:	8c 24       	eor	r8, r12
     69c:	4d 92       	st	X+, r4
     69e:	2d 91       	ld	r18, X+
     6a0:	00 00       	nop
     6a2:	00 00       	nop
     6a4:	04 ff       	sbrs	r16, 4
     6a6:	ff 00       	.word	0x00ff	; ????
	...

000006aa <__ctors_end>:
     6aa:	11 24       	eor	r1, r1
     6ac:	1f be       	out	0x3f, r1	; 63
     6ae:	cf ef       	ldi	r28, 0xFF	; 255
     6b0:	d8 e0       	ldi	r29, 0x08	; 8
     6b2:	de bf       	out	0x3e, r29	; 62
     6b4:	cd bf       	out	0x3d, r28	; 61

000006b6 <__do_copy_data>:
     6b6:	11 e0       	ldi	r17, 0x01	; 1
     6b8:	a0 e0       	ldi	r26, 0x00	; 0
     6ba:	b1 e0       	ldi	r27, 0x01	; 1
     6bc:	e6 ee       	ldi	r30, 0xE6	; 230
     6be:	f0 e3       	ldi	r31, 0x30	; 48
     6c0:	02 c0       	rjmp	.+4      	; 0x6c6 <__do_copy_data+0x10>
     6c2:	05 90       	lpm	r0, Z+
     6c4:	0d 92       	st	X+, r0
     6c6:	a6 3c       	cpi	r26, 0xC6	; 198
     6c8:	b1 07       	cpc	r27, r17
     6ca:	d9 f7       	brne	.-10     	; 0x6c2 <__do_copy_data+0xc>

000006cc <__do_clear_bss>:
     6cc:	27 e0       	ldi	r18, 0x07	; 7
     6ce:	a6 ec       	ldi	r26, 0xC6	; 198
     6d0:	b1 e0       	ldi	r27, 0x01	; 1
     6d2:	01 c0       	rjmp	.+2      	; 0x6d6 <.do_clear_bss_start>

000006d4 <.do_clear_bss_loop>:
     6d4:	1d 92       	st	X+, r1

000006d6 <.do_clear_bss_start>:
     6d6:	ae 30       	cpi	r26, 0x0E	; 14
     6d8:	b2 07       	cpc	r27, r18
     6da:	e1 f7       	brne	.-8      	; 0x6d4 <.do_clear_bss_loop>
     6dc:	0e 94 5f 08 	call	0x10be	; 0x10be <main>
     6e0:	0c 94 71 18 	jmp	0x30e2	; 0x30e2 <_exit>

000006e4 <__bad_interrupt>:
     6e4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000006e8 <app_adc_init>:

/*** Apps ***/
void app_adc_init(void *pvParameters){
	// Get Context Pointer
	// Save a copy of the incoming pointer
	contextPtr = (context_t * )pvParameters;
     6e8:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <contextPtr+0x1>
     6ec:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <contextPtr>
     6f0:	08 95       	ret

000006f2 <app_adc>:
	if(contextPtr == NULL){
		return;
	}
}

void app_adc(){
     6f2:	cf 92       	push	r12
     6f4:	df 92       	push	r13
     6f6:	ef 92       	push	r14
     6f8:	ff 92       	push	r15
     6fa:	0f 93       	push	r16
     6fc:	1f 93       	push	r17
     6fe:	cf 93       	push	r28
     700:	df 93       	push	r29
     702:	cd b7       	in	r28, 0x3d	; 61
     704:	de b7       	in	r29, 0x3e	; 62
     706:	28 97       	sbiw	r28, 0x08	; 8
     708:	0f b6       	in	r0, 0x3f	; 63
     70a:	f8 94       	cli
     70c:	de bf       	out	0x3e, r29	; 62
     70e:	0f be       	out	0x3f, r0	; 63
     710:	cd bf       	out	0x3d, r28	; 61
	adc_data_processed_t adc_buffer;
	
	// Set ADC Params
	adc_set_refs(AVcc);		// Set Reference
     712:	81 e0       	ldi	r24, 0x01	; 1
     714:	0e 94 d7 06 	call	0xdae	; 0xdae <adc_set_refs>
	adc_set_adps(DIV32);	// Set Prescaler
     718:	85 e0       	ldi	r24, 0x05	; 5
     71a:	0e 94 e2 06 	call	0xdc4	; 0xdc4 <adc_set_adps>
	adc_enable();
     71e:	0e 94 f3 06 	call	0xde6	; 0xde6 <adc_enable>
	
	// Get reading for X axis
	adc_set_channel(ADC0);
     722:	80 e0       	ldi	r24, 0x00	; 0
     724:	0e 94 c2 06 	call	0xd84	; 0xd84 <adc_set_channel>
	while(adc_is_converting());
     728:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <adc_is_converting>
     72c:	81 11       	cpse	r24, r1
     72e:	fc cf       	rjmp	.-8      	; 0x728 <app_adc+0x36>
	adc_start_single();
     730:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <adc_start_single>
	while(!adc_is_finished());
     734:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <adc_is_finished>
     738:	88 23       	and	r24, r24
     73a:	e1 f3       	breq	.-8      	; 0x734 <app_adc+0x42>
	contextPtr->buf_adc_data_raw.x = adc_get_value();			// Save Raw Data
     73c:	00 91 c7 05 	lds	r16, 0x05C7	; 0x8005c7 <contextPtr>
     740:	10 91 c8 05 	lds	r17, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     744:	0e 94 02 07 	call	0xe04	; 0xe04 <adc_get_value>
     748:	f8 01       	movw	r30, r16
     74a:	93 83       	std	Z+3, r25	; 0x03
     74c:	82 83       	std	Z+2, r24	; 0x02
	adc_buffer.x = (contextPtr->buf_adc_data_raw.x >> 1) - 256;	// Save the calculated Data
     74e:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     752:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     756:	02 81       	ldd	r16, Z+2	; 0x02
     758:	13 81       	ldd	r17, Z+3	; 0x03
     75a:	16 95       	lsr	r17
     75c:	07 95       	ror	r16
     75e:	1a 95       	dec	r17
	
	// Get reading for Y axis
	adc_set_channel(ADC1);
     760:	81 e0       	ldi	r24, 0x01	; 1
     762:	0e 94 c2 06 	call	0xd84	; 0xd84 <adc_set_channel>
	while(adc_is_converting());
     766:	0e 94 fc 06 	call	0xdf8	; 0xdf8 <adc_is_converting>
     76a:	81 11       	cpse	r24, r1
     76c:	fc cf       	rjmp	.-8      	; 0x766 <app_adc+0x74>
	adc_start_single();
     76e:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <adc_start_single>
	while(!adc_is_finished());
     772:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <adc_is_finished>
     776:	88 23       	and	r24, r24
     778:	e1 f3       	breq	.-8      	; 0x772 <app_adc+0x80>
	contextPtr->buf_adc_data_raw.y = adc_get_value();
     77a:	e0 90 c7 05 	lds	r14, 0x05C7	; 0x8005c7 <contextPtr>
     77e:	f0 90 c8 05 	lds	r15, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     782:	0e 94 02 07 	call	0xe04	; 0xe04 <adc_get_value>
     786:	f7 01       	movw	r30, r14
     788:	95 83       	std	Z+5, r25	; 0x05
     78a:	84 83       	std	Z+4, r24	; 0x04
	adc_buffer.y = 255 - (contextPtr->buf_adc_data_raw.y >> 1);
     78c:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     790:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     794:	84 81       	ldd	r24, Z+4	; 0x04
     796:	95 81       	ldd	r25, Z+5	; 0x05
     798:	96 95       	lsr	r25
     79a:	87 95       	ror	r24
     79c:	2f ef       	ldi	r18, 0xFF	; 255
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	79 01       	movw	r14, r18
     7a2:	e8 1a       	sub	r14, r24
     7a4:	f9 0a       	sbc	r15, r25
	 * Get reading for Vcc
	 * 
	 * Need to wait after switching to 1V1 before getting useful data.
	 * https://www.avrfreaks.net/forum/avrs-measure-their-own-vcc-do-it-badly
	 */
	adc_set_channel(C1V1);
     7a6:	8e e0       	ldi	r24, 0x0E	; 14
     7a8:	0e 94 c2 06 	call	0xd84	; 0xd84 <adc_set_channel>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     7ac:	8f e9       	ldi	r24, 0x9F	; 159
     7ae:	9f e0       	ldi	r25, 0x0F	; 15
     7b0:	01 97       	sbiw	r24, 0x01	; 1
     7b2:	f1 f7       	brne	.-4      	; 0x7b0 <app_adc+0xbe>
     7b4:	00 c0       	rjmp	.+0      	; 0x7b6 <app_adc+0xc4>
     7b6:	00 00       	nop
	_delay_ms(1);
	adc_start_single();
     7b8:	0e 94 ea 06 	call	0xdd4	; 0xdd4 <adc_start_single>
	while(!adc_is_finished());
     7bc:	0e 94 f9 06 	call	0xdf2	; 0xdf2 <adc_is_finished>
     7c0:	88 23       	and	r24, r24
     7c2:	e1 f3       	breq	.-8      	; 0x7bc <app_adc+0xca>
	contextPtr->buf_adc_data_raw.vin = adc_get_value();
     7c4:	c0 90 c7 05 	lds	r12, 0x05C7	; 0x8005c7 <contextPtr>
     7c8:	d0 90 c8 05 	lds	r13, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     7cc:	0e 94 02 07 	call	0xe04	; 0xe04 <adc_get_value>
     7d0:	f6 01       	movw	r30, r12
     7d2:	97 83       	std	Z+7, r25	; 0x07
     7d4:	86 83       	std	Z+6, r24	; 0x06
	adc_buffer.vin = contextPtr->buf_adc_data_raw.vin;
     7d6:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     7da:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     7de:	46 81       	ldd	r20, Z+6	; 0x06
     7e0:	57 81       	ldd	r21, Z+7	; 0x07
	
	// Set the move flag if value crossed deadzone
	adc_buffer.move_x = abs(adc_buffer.x) >= 10;
     7e2:	98 01       	movw	r18, r16
     7e4:	17 fd       	sbrc	r17, 7
     7e6:	3d c0       	rjmp	.+122    	; 0x862 <app_adc+0x170>
     7e8:	91 e0       	ldi	r25, 0x01	; 1
     7ea:	2a 30       	cpi	r18, 0x0A	; 10
     7ec:	31 05       	cpc	r19, r1
     7ee:	0c f4       	brge	.+2      	; 0x7f2 <app_adc+0x100>
     7f0:	90 e0       	ldi	r25, 0x00	; 0
	adc_buffer.move_y = abs(adc_buffer.y) >= 10;
     7f2:	97 01       	movw	r18, r14
     7f4:	f7 fc       	sbrc	r15, 7
     7f6:	30 c0       	rjmp	.+96     	; 0x858 <app_adc+0x166>
     7f8:	81 e0       	ldi	r24, 0x01	; 1
     7fa:	2a 30       	cpi	r18, 0x0A	; 10
     7fc:	31 05       	cpc	r19, r1
     7fe:	0c f4       	brge	.+2      	; 0x802 <app_adc+0x110>
     800:	80 e0       	ldi	r24, 0x00	; 0
	
	// Send or cancel a test alarm
	if(PIND & (1 << PIND2)){
     802:	4a 99       	sbic	0x09, 2	; 9
     804:	26 c0       	rjmp	.+76     	; 0x852 <app_adc+0x160>
		contextPtr->persistant_alarms[1] = alarm_sound3;
	}else{
		contextPtr->persistant_alarms[1] = alarm_stop;
     806:	15 8a       	std	Z+21, r1	; 0x15
	}
	
	// Send the adc values to buffer
	// Critical section, ensure data integrity
	cli();
     808:	f8 94       	cli
	contextPtr->buf_adc_data_processed = adc_buffer;
     80a:	a0 91 c7 05 	lds	r26, 0x05C7	; 0x8005c7 <contextPtr>
     80e:	b0 91 c8 05 	lds	r27, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     812:	1a 83       	std	Y+2, r17	; 0x02
     814:	09 83       	std	Y+1, r16	; 0x01
     816:	fc 82       	std	Y+4, r15	; 0x04
     818:	eb 82       	std	Y+3, r14	; 0x03
     81a:	9d 83       	std	Y+5, r25	; 0x05
     81c:	8e 83       	std	Y+6, r24	; 0x06
     81e:	58 87       	std	Y+8, r21	; 0x08
     820:	4f 83       	std	Y+7, r20	; 0x07
     822:	88 e0       	ldi	r24, 0x08	; 8
     824:	fe 01       	movw	r30, r28
     826:	31 96       	adiw	r30, 0x01	; 1
     828:	18 96       	adiw	r26, 0x08	; 8
     82a:	01 90       	ld	r0, Z+
     82c:	0d 92       	st	X+, r0
     82e:	8a 95       	dec	r24
     830:	e1 f7       	brne	.-8      	; 0x82a <app_adc+0x138>
	sei();
     832:	78 94       	sei
}
     834:	28 96       	adiw	r28, 0x08	; 8
     836:	0f b6       	in	r0, 0x3f	; 63
     838:	f8 94       	cli
     83a:	de bf       	out	0x3e, r29	; 62
     83c:	0f be       	out	0x3f, r0	; 63
     83e:	cd bf       	out	0x3d, r28	; 61
     840:	df 91       	pop	r29
     842:	cf 91       	pop	r28
     844:	1f 91       	pop	r17
     846:	0f 91       	pop	r16
     848:	ff 90       	pop	r15
     84a:	ef 90       	pop	r14
     84c:	df 90       	pop	r13
     84e:	cf 90       	pop	r12
     850:	08 95       	ret
	adc_buffer.move_x = abs(adc_buffer.x) >= 10;
	adc_buffer.move_y = abs(adc_buffer.y) >= 10;
	
	// Send or cancel a test alarm
	if(PIND & (1 << PIND2)){
		contextPtr->persistant_alarms[1] = alarm_sound3;
     852:	28 e1       	ldi	r18, 0x18	; 24
     854:	25 8b       	std	Z+21, r18	; 0x15
     856:	d8 cf       	rjmp	.-80     	; 0x808 <app_adc+0x116>
	contextPtr->buf_adc_data_raw.vin = adc_get_value();
	adc_buffer.vin = contextPtr->buf_adc_data_raw.vin;
	
	// Set the move flag if value crossed deadzone
	adc_buffer.move_x = abs(adc_buffer.x) >= 10;
	adc_buffer.move_y = abs(adc_buffer.y) >= 10;
     858:	22 27       	eor	r18, r18
     85a:	33 27       	eor	r19, r19
     85c:	2e 19       	sub	r18, r14
     85e:	3f 09       	sbc	r19, r15
     860:	cb cf       	rjmp	.-106    	; 0x7f8 <app_adc+0x106>
	while(!adc_is_finished());
	contextPtr->buf_adc_data_raw.vin = adc_get_value();
	adc_buffer.vin = contextPtr->buf_adc_data_raw.vin;
	
	// Set the move flag if value crossed deadzone
	adc_buffer.move_x = abs(adc_buffer.x) >= 10;
     862:	22 27       	eor	r18, r18
     864:	33 27       	eor	r19, r19
     866:	20 1b       	sub	r18, r16
     868:	31 0b       	sbc	r19, r17
     86a:	be cf       	rjmp	.-132    	; 0x7e8 <app_adc+0xf6>

0000086c <app_gui_init>:
uint16_t last_time;

/*** Apps ***/
void app_gui_init(void * pvParameters){
	// Get Context Pointer
	contextPtr = (context_t * )pvParameters;
     86c:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <contextPtr+0x1>
     870:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <contextPtr>
	if(contextPtr == NULL){
     874:	89 2b       	or	r24, r25
     876:	d9 f0       	breq	.+54     	; 0x8ae <app_gui_init+0x42>
		return;
	}
	
	// U8G2 Setup
	u8g2_Setup_sh1106_i2c_128x64_noname_f(&u8g2, U8G2_R0, u8x8_byte_avr_hw_i2c, u8x8_avr_delay);
     878:	2c e3       	ldi	r18, 0x3C	; 60
     87a:	32 e1       	ldi	r19, 0x12	; 18
     87c:	46 ef       	ldi	r20, 0xF6	; 246
     87e:	51 e1       	ldi	r21, 0x11	; 17
     880:	6b e5       	ldi	r22, 0x5B	; 91
     882:	71 e0       	ldi	r23, 0x01	; 1
     884:	89 ec       	ldi	r24, 0xC9	; 201
     886:	95 e0       	ldi	r25, 0x05	; 5
     888:	0e 94 24 0a 	call	0x1448	; 0x1448 <u8g2_Setup_sh1106_i2c_128x64_noname_f>
	u8g2_SetI2CAddress(&u8g2, 0x78);
     88c:	88 e7       	ldi	r24, 0x78	; 120
     88e:	80 93 df 05 	sts	0x05DF, r24	; 0x8005df <u8g2+0x16>
	
	// Start Display
	u8g2_InitDisplay(&u8g2);
     892:	89 ec       	ldi	r24, 0xC9	; 201
     894:	95 e0       	ldi	r25, 0x05	; 5
     896:	0e 94 0c 14 	call	0x2818	; 0x2818 <u8x8_InitDisplay>
	u8g2_SetPowerSave(&u8g2, 0);
     89a:	60 e0       	ldi	r22, 0x00	; 0
     89c:	89 ec       	ldi	r24, 0xC9	; 201
     89e:	95 e0       	ldi	r25, 0x05	; 5
     8a0:	0e 94 16 14 	call	0x282c	; 0x282c <u8x8_SetPowerSave>
	u8g2_SetContrast(&u8g2, 0);
     8a4:	60 e0       	ldi	r22, 0x00	; 0
     8a6:	89 ec       	ldi	r24, 0xC9	; 201
     8a8:	95 e0       	ldi	r25, 0x05	; 5
     8aa:	0c 94 20 14 	jmp	0x2840	; 0x2840 <u8x8_SetContrast>
     8ae:	08 95       	ret

000008b0 <app_gui>:
}

void app_gui(){
     8b0:	af 92       	push	r10
     8b2:	bf 92       	push	r11
     8b4:	cf 92       	push	r12
     8b6:	df 92       	push	r13
     8b8:	ef 92       	push	r14
     8ba:	ff 92       	push	r15
     8bc:	0f 93       	push	r16
     8be:	1f 93       	push	r17
     8c0:	cf 93       	push	r28
     8c2:	df 93       	push	r29
     8c4:	cd b7       	in	r28, 0x3d	; 61
     8c6:	de b7       	in	r29, 0x3e	; 62
     8c8:	e2 97       	sbiw	r28, 0x32	; 50
     8ca:	0f b6       	in	r0, 0x3f	; 63
     8cc:	f8 94       	cli
     8ce:	de bf       	out	0x3e, r29	; 62
     8d0:	0f be       	out	0x3f, r0	; 63
     8d2:	cd bf       	out	0x3d, r28	; 61
	// Utility Buffer
	char buffer[50];
	
	/*** Calculate data for UI elements ***/
	// Calculate FPS
	uint16_t diff_time = contextPtr->millis - last_time;
     8d4:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     8d8:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     8dc:	a0 80       	ld	r10, Z
     8de:	b1 80       	ldd	r11, Z+1	; 0x01
     8e0:	80 91 2e 06 	lds	r24, 0x062E	; 0x80062e <last_time>
     8e4:	90 91 2f 06 	lds	r25, 0x062F	; 0x80062f <last_time+0x1>
     8e8:	a8 1a       	sub	r10, r24
     8ea:	b9 0a       	sbc	r11, r25
	last_time = contextPtr->millis;
     8ec:	80 81       	ld	r24, Z
     8ee:	91 81       	ldd	r25, Z+1	; 0x01
     8f0:	90 93 2f 06 	sts	0x062F, r25	; 0x80062f <last_time+0x1>
     8f4:	80 93 2e 06 	sts	0x062E, r24	; 0x80062e <last_time>
	
	/*** Draw the UI elements ***/
	u8g2_ClearBuffer(&u8g2);
     8f8:	89 ec       	ldi	r24, 0xC9	; 201
     8fa:	95 e0       	ldi	r25, 0x05	; 5
     8fc:	0e 94 52 09 	call	0x12a4	; 0x12a4 <u8g2_ClearBuffer>
	
	u8g2_SetFontMode(&u8g2, 0);
     900:	60 e0       	ldi	r22, 0x00	; 0
     902:	89 ec       	ldi	r24, 0xC9	; 201
     904:	95 e0       	ldi	r25, 0x05	; 5
     906:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&u8g2, 1);
     90a:	61 e0       	ldi	r22, 0x01	; 1
     90c:	89 ec       	ldi	r24, 0xC9	; 201
     90e:	95 e0       	ldi	r25, 0x05	; 5
     910:	0e 94 1a 10 	call	0x2034	; 0x2034 <u8g2_SetDrawColor>
	
	drawCursorWithFrame(&u8g2, 90, 28, 32, 32, contextPtr->buf_adc_data_raw.x / 32, contextPtr->buf_adc_data_raw.y / 32);
     914:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     918:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     91c:	c4 80       	ldd	r12, Z+4	; 0x04
     91e:	d5 80       	ldd	r13, Z+5	; 0x05
     920:	e2 80       	ldd	r14, Z+2	; 0x02
     922:	f3 80       	ldd	r15, Z+3	; 0x03
     924:	d6 94       	lsr	r13
     926:	c7 94       	ror	r12
     928:	d2 94       	swap	r13
     92a:	c2 94       	swap	r12
     92c:	8f e0       	ldi	r24, 0x0F	; 15
     92e:	c8 22       	and	r12, r24
     930:	cd 24       	eor	r12, r13
     932:	d8 22       	and	r13, r24
     934:	cd 24       	eor	r12, r13
     936:	f6 94       	lsr	r15
     938:	e7 94       	ror	r14
     93a:	f2 94       	swap	r15
     93c:	e2 94       	swap	r14
     93e:	9f e0       	ldi	r25, 0x0F	; 15
     940:	e9 22       	and	r14, r25
     942:	ef 24       	eor	r14, r15
     944:	f9 22       	and	r15, r25
     946:	ef 24       	eor	r14, r15
     948:	00 e2       	ldi	r16, 0x20	; 32
     94a:	20 e2       	ldi	r18, 0x20	; 32
     94c:	4c e1       	ldi	r20, 0x1C	; 28
     94e:	6a e5       	ldi	r22, 0x5A	; 90
     950:	89 ec       	ldi	r24, 0xC9	; 201
     952:	95 e0       	ldi	r25, 0x05	; 5
     954:	0e 94 01 08 	call	0x1002	; 0x1002 <drawCursorWithFrame>
	
	drawHBarGraph(&u8g2, 95, 0, 32, 6, (204L * (32 - 2)) / contextPtr->buf_adc_data_processed.vin, true);
     958:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     95c:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     960:	26 85       	ldd	r18, Z+14	; 0x0e
     962:	37 85       	ldd	r19, Z+15	; 0x0f
     964:	40 e0       	ldi	r20, 0x00	; 0
     966:	50 e0       	ldi	r21, 0x00	; 0
     968:	68 ee       	ldi	r22, 0xE8	; 232
     96a:	77 e1       	ldi	r23, 0x17	; 23
     96c:	80 e0       	ldi	r24, 0x00	; 0
     96e:	90 e0       	ldi	r25, 0x00	; 0
     970:	0e 94 39 15 	call	0x2a72	; 0x2a72 <__divmodsi4>
     974:	cc 24       	eor	r12, r12
     976:	c3 94       	inc	r12
     978:	e2 2e       	mov	r14, r18
     97a:	06 e0       	ldi	r16, 0x06	; 6
     97c:	20 e2       	ldi	r18, 0x20	; 32
     97e:	40 e0       	ldi	r20, 0x00	; 0
     980:	6f e5       	ldi	r22, 0x5F	; 95
     982:	89 ec       	ldi	r24, 0xC9	; 201
     984:	95 e0       	ldi	r25, 0x05	; 5
     986:	0e 94 30 08 	call	0x1060	; 0x1060 <drawHBarGraph>
	
	u8g2_SetFont(&u8g2, u8g2_font_4x6_mf);
     98a:	68 e6       	ldi	r22, 0x68	; 104
     98c:	70 e0       	ldi	r23, 0x00	; 0
     98e:	89 ec       	ldi	r24, 0xC9	; 201
     990:	95 e0       	ldi	r25, 0x05	; 5
     992:	0e 94 98 0e 	call	0x1d30	; 0x1d30 <u8g2_SetFont>
	
	snprintf(buffer, 50, "TIME: %u", contextPtr->millis);
     996:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     99a:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     99e:	80 81       	ld	r24, Z
     9a0:	91 81       	ldd	r25, Z+1	; 0x01
     9a2:	9f 93       	push	r25
     9a4:	8f 93       	push	r24
     9a6:	80 e0       	ldi	r24, 0x00	; 0
     9a8:	91 e0       	ldi	r25, 0x01	; 1
     9aa:	9f 93       	push	r25
     9ac:	8f 93       	push	r24
     9ae:	1f 92       	push	r1
     9b0:	22 e3       	ldi	r18, 0x32	; 50
     9b2:	f2 2e       	mov	r15, r18
     9b4:	ff 92       	push	r15
     9b6:	8e 01       	movw	r16, r28
     9b8:	0f 5f       	subi	r16, 0xFF	; 255
     9ba:	1f 4f       	sbci	r17, 0xFF	; 255
     9bc:	1f 93       	push	r17
     9be:	0f 93       	push	r16
     9c0:	0e 94 79 15 	call	0x2af2	; 0x2af2 <snprintf>
	u8g2_DrawStr(&u8g2, 0, 5, buffer);
     9c4:	98 01       	movw	r18, r16
     9c6:	45 e0       	ldi	r20, 0x05	; 5
     9c8:	60 e0       	ldi	r22, 0x00	; 0
     9ca:	89 ec       	ldi	r24, 0xC9	; 201
     9cc:	95 e0       	ldi	r25, 0x05	; 5
     9ce:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	snprintf(buffer, 50, "FPS: %u", 1000 / diff_time);
     9d2:	88 ee       	ldi	r24, 0xE8	; 232
     9d4:	93 e0       	ldi	r25, 0x03	; 3
     9d6:	b5 01       	movw	r22, r10
     9d8:	0e 94 03 15 	call	0x2a06	; 0x2a06 <__udivmodhi4>
     9dc:	7f 93       	push	r23
     9de:	6f 93       	push	r22
     9e0:	89 e0       	ldi	r24, 0x09	; 9
     9e2:	91 e0       	ldi	r25, 0x01	; 1
     9e4:	9f 93       	push	r25
     9e6:	8f 93       	push	r24
     9e8:	1f 92       	push	r1
     9ea:	ff 92       	push	r15
     9ec:	1f 93       	push	r17
     9ee:	0f 93       	push	r16
     9f0:	0e 94 79 15 	call	0x2af2	; 0x2af2 <snprintf>
	u8g2_DrawStr(&u8g2, 0, 11, buffer);
     9f4:	98 01       	movw	r18, r16
     9f6:	4b e0       	ldi	r20, 0x0B	; 11
     9f8:	60 e0       	ldi	r22, 0x00	; 0
     9fa:	89 ec       	ldi	r24, 0xC9	; 201
     9fc:	95 e0       	ldi	r25, 0x05	; 5
     9fe:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	
	snprintf(buffer, 50, "L/R:%4d", contextPtr->buf_adc_data_processed.x);
     a02:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     a06:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     a0a:	80 85       	ldd	r24, Z+8	; 0x08
     a0c:	91 85       	ldd	r25, Z+9	; 0x09
     a0e:	9f 93       	push	r25
     a10:	8f 93       	push	r24
     a12:	81 e1       	ldi	r24, 0x11	; 17
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	9f 93       	push	r25
     a18:	8f 93       	push	r24
     a1a:	1f 92       	push	r1
     a1c:	ff 92       	push	r15
     a1e:	1f 93       	push	r17
     a20:	0f 93       	push	r16
     a22:	0e 94 79 15 	call	0x2af2	; 0x2af2 <snprintf>
	u8g2_DrawStr(&u8g2, 0, 17, buffer);
     a26:	98 01       	movw	r18, r16
     a28:	41 e1       	ldi	r20, 0x11	; 17
     a2a:	60 e0       	ldi	r22, 0x00	; 0
     a2c:	89 ec       	ldi	r24, 0xC9	; 201
     a2e:	95 e0       	ldi	r25, 0x05	; 5
     a30:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	snprintf(buffer, 50, "F/B:%4d", contextPtr->buf_adc_data_processed.y);
     a34:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     a38:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     a3c:	82 85       	ldd	r24, Z+10	; 0x0a
     a3e:	93 85       	ldd	r25, Z+11	; 0x0b
     a40:	9f 93       	push	r25
     a42:	8f 93       	push	r24
     a44:	89 e1       	ldi	r24, 0x19	; 25
     a46:	91 e0       	ldi	r25, 0x01	; 1
     a48:	9f 93       	push	r25
     a4a:	8f 93       	push	r24
     a4c:	1f 92       	push	r1
     a4e:	ff 92       	push	r15
     a50:	1f 93       	push	r17
     a52:	0f 93       	push	r16
     a54:	0e 94 79 15 	call	0x2af2	; 0x2af2 <snprintf>
	u8g2_DrawStr(&u8g2, 0, 23, buffer);
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
     a62:	98 01       	movw	r18, r16
     a64:	47 e1       	ldi	r20, 0x17	; 23
     a66:	60 e0       	ldi	r22, 0x00	; 0
     a68:	89 ec       	ldi	r24, 0xC9	; 201
     a6a:	95 e0       	ldi	r25, 0x05	; 5
     a6c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	snprintf(buffer, 50, "M_X: %c, M_Y: %c", contextPtr->buf_adc_data_processed.move_x ? 'Y' : 'N', contextPtr->buf_adc_data_processed.move_y ? 'Y' : 'N');
     a70:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     a74:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     a78:	85 85       	ldd	r24, Z+13	; 0x0d
     a7a:	81 11       	cpse	r24, r1
     a7c:	9e c0       	rjmp	.+316    	; 0xbba <__stack+0x2bb>
     a7e:	9e e4       	ldi	r25, 0x4E	; 78
     a80:	84 85       	ldd	r24, Z+12	; 0x0c
     a82:	81 11       	cpse	r24, r1
     a84:	9f c0       	rjmp	.+318    	; 0xbc4 <__stack+0x2c5>
     a86:	8e e4       	ldi	r24, 0x4E	; 78
     a88:	1f 92       	push	r1
     a8a:	9f 93       	push	r25
     a8c:	1f 92       	push	r1
     a8e:	8f 93       	push	r24
     a90:	81 e2       	ldi	r24, 0x21	; 33
     a92:	91 e0       	ldi	r25, 0x01	; 1
     a94:	9f 93       	push	r25
     a96:	8f 93       	push	r24
     a98:	1f 92       	push	r1
     a9a:	82 e3       	ldi	r24, 0x32	; 50
     a9c:	8f 93       	push	r24
     a9e:	1f 93       	push	r17
     aa0:	0f 93       	push	r16
     aa2:	0e 94 79 15 	call	0x2af2	; 0x2af2 <snprintf>
	u8g2_DrawStr(&u8g2, 0, 29, buffer);
     aa6:	98 01       	movw	r18, r16
     aa8:	4d e1       	ldi	r20, 0x1D	; 29
     aaa:	60 e0       	ldi	r22, 0x00	; 0
     aac:	89 ec       	ldi	r24, 0xC9	; 201
     aae:	95 e0       	ldi	r25, 0x05	; 5
     ab0:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	
	
	if(contextPtr->persistant_alarms[0] != alarm_stop){
     ab4:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     ab8:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     abc:	84 89       	ldd	r24, Z+20	; 0x14
     abe:	0f b6       	in	r0, 0x3f	; 63
     ac0:	f8 94       	cli
     ac2:	de bf       	out	0x3e, r29	; 62
     ac4:	0f be       	out	0x3f, r0	; 63
     ac6:	cd bf       	out	0x3d, r28	; 61
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
     ac8:	09 e0       	ldi	r16, 0x09	; 9
     aca:	27 e1       	ldi	r18, 0x17	; 23
     acc:	4f e1       	ldi	r20, 0x1F	; 31
     ace:	60 e0       	ldi	r22, 0x00	; 0
	u8g2_DrawStr(&u8g2, 0, 23, buffer);
	snprintf(buffer, 50, "M_X: %c, M_Y: %c", contextPtr->buf_adc_data_processed.move_x ? 'Y' : 'N', contextPtr->buf_adc_data_processed.move_y ? 'Y' : 'N');
	u8g2_DrawStr(&u8g2, 0, 29, buffer);
	
	
	if(contextPtr->persistant_alarms[0] != alarm_stop){
     ad0:	88 23       	and	r24, r24
     ad2:	09 f4       	brne	.+2      	; 0xad6 <__stack+0x1d7>
     ad4:	87 c0       	rjmp	.+270    	; 0xbe4 <__stack+0x2e5>
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
     ad6:	89 ec       	ldi	r24, 0xC9	; 201
     ad8:	95 e0       	ldi	r25, 0x05	; 5
     ada:	0e 94 9b 08 	call	0x1136	; 0x1136 <u8g2_DrawBox>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 31, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[1] != alarm_stop){
     ade:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     ae2:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     ae6:	85 89       	ldd	r24, Z+21	; 0x15
		u8g2_DrawBox(&u8g2, 0, 39, 23, 9);
     ae8:	09 e0       	ldi	r16, 0x09	; 9
     aea:	27 e1       	ldi	r18, 0x17	; 23
     aec:	47 e2       	ldi	r20, 0x27	; 39
     aee:	60 e0       	ldi	r22, 0x00	; 0
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 31, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[1] != alarm_stop){
     af0:	88 23       	and	r24, r24
     af2:	09 f4       	brne	.+2      	; 0xaf6 <__stack+0x1f7>
     af4:	72 c0       	rjmp	.+228    	; 0xbda <__stack+0x2db>
		u8g2_DrawBox(&u8g2, 0, 39, 23, 9);
     af6:	89 ec       	ldi	r24, 0xC9	; 201
     af8:	95 e0       	ldi	r25, 0x05	; 5
     afa:	0e 94 9b 08 	call	0x1136	; 0x1136 <u8g2_DrawBox>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 39, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[2] != alarm_stop){
     afe:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     b02:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     b06:	86 89       	ldd	r24, Z+22	; 0x16
     b08:	88 23       	and	r24, r24
     b0a:	09 f4       	brne	.+2      	; 0xb0e <__stack+0x20f>
     b0c:	5d c0       	rjmp	.+186    	; 0xbc8 <__stack+0x2c9>
		u8g2_DrawBox(&u8g2, 0, 47, 23, 8);
     b0e:	08 e0       	ldi	r16, 0x08	; 8
     b10:	27 e1       	ldi	r18, 0x17	; 23
     b12:	4f e2       	ldi	r20, 0x2F	; 47
     b14:	60 e0       	ldi	r22, 0x00	; 0
     b16:	89 ec       	ldi	r24, 0xC9	; 201
     b18:	95 e0       	ldi	r25, 0x05	; 5
     b1a:	0e 94 9b 08 	call	0x1136	; 0x1136 <u8g2_DrawBox>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[3] != alarm_stop){
     b1e:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     b22:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     b26:	87 89       	ldd	r24, Z+23	; 0x17
		u8g2_DrawBox(&u8g2, 0, 55, 23, 9);
     b28:	09 e0       	ldi	r16, 0x09	; 9
     b2a:	27 e1       	ldi	r18, 0x17	; 23
     b2c:	47 e3       	ldi	r20, 0x37	; 55
     b2e:	60 e0       	ldi	r22, 0x00	; 0
		u8g2_DrawBox(&u8g2, 0, 47, 23, 8);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[3] != alarm_stop){
     b30:	81 11       	cpse	r24, r1
     b32:	5d c0       	rjmp	.+186    	; 0xbee <__stack+0x2ef>
		u8g2_DrawBox(&u8g2, 0, 55, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 55, 23, 9);
     b34:	89 ec       	ldi	r24, 0xC9	; 201
     b36:	95 e0       	ldi	r25, 0x05	; 5
     b38:	0e 94 c3 08 	call	0x1186	; 0x1186 <u8g2_DrawFrame>
	}
	
	u8g2_SetFontMode(&u8g2, 1);
     b3c:	61 e0       	ldi	r22, 0x01	; 1
     b3e:	89 ec       	ldi	r24, 0xC9	; 201
     b40:	95 e0       	ldi	r25, 0x05	; 5
     b42:	0e 94 84 0e 	call	0x1d08	; 0x1d08 <u8g2_SetFontMode>
	u8g2_SetDrawColor(&u8g2, 2);
     b46:	62 e0       	ldi	r22, 0x02	; 2
     b48:	89 ec       	ldi	r24, 0xC9	; 201
     b4a:	95 e0       	ldi	r25, 0x05	; 5
     b4c:	0e 94 1a 10 	call	0x2034	; 0x2034 <u8g2_SetDrawColor>
	
	u8g2_DrawStr(&u8g2, 2, 38, "TEST0");
     b50:	22 e3       	ldi	r18, 0x32	; 50
     b52:	31 e0       	ldi	r19, 0x01	; 1
     b54:	46 e2       	ldi	r20, 0x26	; 38
     b56:	62 e0       	ldi	r22, 0x02	; 2
     b58:	89 ec       	ldi	r24, 0xC9	; 201
     b5a:	95 e0       	ldi	r25, 0x05	; 5
     b5c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 2, 46, "TEST1");
     b60:	28 e3       	ldi	r18, 0x38	; 56
     b62:	31 e0       	ldi	r19, 0x01	; 1
     b64:	4e e2       	ldi	r20, 0x2E	; 46
     b66:	62 e0       	ldi	r22, 0x02	; 2
     b68:	89 ec       	ldi	r24, 0xC9	; 201
     b6a:	95 e0       	ldi	r25, 0x05	; 5
     b6c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 2, 54, "TEST2");
     b70:	2e e3       	ldi	r18, 0x3E	; 62
     b72:	31 e0       	ldi	r19, 0x01	; 1
     b74:	46 e3       	ldi	r20, 0x36	; 54
     b76:	62 e0       	ldi	r22, 0x02	; 2
     b78:	89 ec       	ldi	r24, 0xC9	; 201
     b7a:	95 e0       	ldi	r25, 0x05	; 5
     b7c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	u8g2_DrawStr(&u8g2, 2, 62, "TEST3");
     b80:	24 e4       	ldi	r18, 0x44	; 68
     b82:	31 e0       	ldi	r19, 0x01	; 1
     b84:	4e e3       	ldi	r20, 0x3E	; 62
     b86:	62 e0       	ldi	r22, 0x02	; 2
     b88:	89 ec       	ldi	r24, 0xC9	; 201
     b8a:	95 e0       	ldi	r25, 0x05	; 5
     b8c:	0e 94 89 0e 	call	0x1d12	; 0x1d12 <u8g2_DrawStr>
	
	
	
	u8g2_SendBuffer(&u8g2);
     b90:	89 ec       	ldi	r24, 0xC9	; 201
     b92:	95 e0       	ldi	r25, 0x05	; 5
     b94:	0e 94 67 09 	call	0x12ce	; 0x12ce <u8g2_SendBuffer>
     b98:	e2 96       	adiw	r28, 0x32	; 50
     b9a:	0f b6       	in	r0, 0x3f	; 63
     b9c:	f8 94       	cli
     b9e:	de bf       	out	0x3e, r29	; 62
     ba0:	0f be       	out	0x3f, r0	; 63
     ba2:	cd bf       	out	0x3d, r28	; 61
     ba4:	df 91       	pop	r29
     ba6:	cf 91       	pop	r28
     ba8:	1f 91       	pop	r17
     baa:	0f 91       	pop	r16
     bac:	ff 90       	pop	r15
     bae:	ef 90       	pop	r14
     bb0:	df 90       	pop	r13
     bb2:	cf 90       	pop	r12
     bb4:	bf 90       	pop	r11
     bb6:	af 90       	pop	r10
     bb8:	08 95       	ret
	
	snprintf(buffer, 50, "L/R:%4d", contextPtr->buf_adc_data_processed.x);
	u8g2_DrawStr(&u8g2, 0, 17, buffer);
	snprintf(buffer, 50, "F/B:%4d", contextPtr->buf_adc_data_processed.y);
	u8g2_DrawStr(&u8g2, 0, 23, buffer);
	snprintf(buffer, 50, "M_X: %c, M_Y: %c", contextPtr->buf_adc_data_processed.move_x ? 'Y' : 'N', contextPtr->buf_adc_data_processed.move_y ? 'Y' : 'N');
     bba:	99 e5       	ldi	r25, 0x59	; 89
     bbc:	84 85       	ldd	r24, Z+12	; 0x0c
     bbe:	88 23       	and	r24, r24
     bc0:	09 f4       	brne	.+2      	; 0xbc4 <__stack+0x2c5>
     bc2:	61 cf       	rjmp	.-318    	; 0xa86 <__stack+0x187>
     bc4:	89 e5       	ldi	r24, 0x59	; 89
     bc6:	60 cf       	rjmp	.-320    	; 0xa88 <__stack+0x189>
	}
	
	if(contextPtr->persistant_alarms[2] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 47, 23, 8);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
     bc8:	09 e0       	ldi	r16, 0x09	; 9
     bca:	27 e1       	ldi	r18, 0x17	; 23
     bcc:	4f e2       	ldi	r20, 0x2F	; 47
     bce:	60 e0       	ldi	r22, 0x00	; 0
     bd0:	89 ec       	ldi	r24, 0xC9	; 201
     bd2:	95 e0       	ldi	r25, 0x05	; 5
     bd4:	0e 94 c3 08 	call	0x1186	; 0x1186 <u8g2_DrawFrame>
     bd8:	a2 cf       	rjmp	.-188    	; 0xb1e <__stack+0x21f>
	}
	
	if(contextPtr->persistant_alarms[1] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 39, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 39, 23, 9);
     bda:	89 ec       	ldi	r24, 0xC9	; 201
     bdc:	95 e0       	ldi	r25, 0x05	; 5
     bde:	0e 94 c3 08 	call	0x1186	; 0x1186 <u8g2_DrawFrame>
     be2:	8d cf       	rjmp	.-230    	; 0xafe <__stack+0x1ff>
	
	
	if(contextPtr->persistant_alarms[0] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 31, 23, 9);
		} else {
		u8g2_DrawFrame(&u8g2, 0, 31, 23, 9);
     be4:	89 ec       	ldi	r24, 0xC9	; 201
     be6:	95 e0       	ldi	r25, 0x05	; 5
     be8:	0e 94 c3 08 	call	0x1186	; 0x1186 <u8g2_DrawFrame>
     bec:	78 cf       	rjmp	.-272    	; 0xade <__stack+0x1df>
		} else {
		u8g2_DrawFrame(&u8g2, 0, 47, 23, 9);
	}
	
	if(contextPtr->persistant_alarms[3] != alarm_stop){
		u8g2_DrawBox(&u8g2, 0, 55, 23, 9);
     bee:	89 ec       	ldi	r24, 0xC9	; 201
     bf0:	95 e0       	ldi	r25, 0x05	; 5
     bf2:	0e 94 9b 08 	call	0x1136	; 0x1136 <u8g2_DrawBox>
     bf6:	a2 cf       	rjmp	.-188    	; 0xb3c <__stack+0x23d>

00000bf8 <app_serial_init>:
context_t *contextPtr;

/*** Apps ***/
void app_serial_init(void *pvParameters){
	// Get Context Pointer
	contextPtr = (context_t * )pvParameters;
     bf8:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <contextPtr+0x1>
     bfc:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <contextPtr>
	if(contextPtr == NULL){
     c00:	89 2b       	or	r24, r25
     c02:	71 f0       	breq	.+28     	; 0xc20 <app_serial_init+0x28>
	}
	
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) __attribute__((always_inline));
	static inline void uart0_set_FrameFormat(uint8_t UCSRC_reg) // UCSRC_reg can be used to set other than 8n1 transmission
	{
		UCSR0C_REGISTER = UCSRC_reg;
     c04:	86 e0       	ldi	r24, 0x06	; 6
     c06:	80 93 c2 00 	sts	0x00C2, r24	; 0x8000c2 <__DATA_REGION_ORIGIN__+0x62>
	{
	#ifdef USART0_RS485_MODE
		RS485_CONTROL0_DDR |= (1<<RS485_CONTROL0_IONUM); // default pin state is low
	#endif
		
		UBRR0L_REGISTER = (uint8_t) ubrr_value;
     c0a:	80 e1       	ldi	r24, 0x10	; 16
     c0c:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <__DATA_REGION_ORIGIN__+0x64>
		
	#ifdef USART_SKIP_UBRRH_IF_ZERO
		if(__builtin_constant_p(ubrr_value))
			if(((ubrr_value>>8) != 0)) // requires -Os flag - do not use in non-inline functions
	#endif
			UBRR0H_REGISTER = (ubrr_value>>8);
     c10:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <__DATA_REGION_ORIGIN__+0x65>
		
	#ifdef USART0_U2X_SPEED
		#ifdef USART0_MPCM_MODE
			UCSR0A_REGISTER = (1<<U2X0_BIT)|(1<<MPCM0_BIT);
		#else
			UCSR0A_REGISTER = (1<<U2X0_BIT); // enable double speed
     c14:	82 e0       	ldi	r24, 0x02	; 2
     c16:	80 93 c0 00 	sts	0x00C0, r24	; 0x8000c0 <__DATA_REGION_ORIGIN__+0x60>
		#endif
	#elif defined(USART0_MPCM_MODE)
		UCSR0A_REGISTER |= (1<<MPCM0_BIT);
	#endif
		
		UCSR0B_REGISTER = USART0_CONFIG_B;
     c1a:	88 e9       	ldi	r24, 0x98	; 152
     c1c:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     c20:	08 95       	ret

00000c22 <app_serial>:
	// Init Serial Driver
	uart_set_FrameFormat(USART_8BIT_DATA|USART_1STOP_BIT|USART_NO_PARITY|USART_ASYNC_MODE);
	uart_init(DOUBLE_BAUD_CALC(115200));
};

void app_serial(){
     c22:	0f 93       	push	r16
     c24:	1f 93       	push	r17
     c26:	cf 93       	push	r28
     c28:	df 93       	push	r29
     c2a:	cd b7       	in	r28, 0x3d	; 61
     c2c:	de b7       	in	r29, 0x3e	; 62
     c2e:	ea 97       	sbiw	r28, 0x3a	; 58
     c30:	0f b6       	in	r0, 0x3f	; 63
     c32:	f8 94       	cli
     c34:	de bf       	out	0x3e, r29	; 62
     c36:	0f be       	out	0x3f, r0	; 63
     c38:	cd bf       	out	0x3d, r28	; 61
	// Utility Buffers
	char buffer[50];
	
	// Receive ADC data buffer
	adc_data_processed_t adc_buffer = contextPtr->buf_adc_data_processed;
     c3a:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     c3e:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
     c42:	88 e0       	ldi	r24, 0x08	; 8
     c44:	38 96       	adiw	r30, 0x08	; 8
     c46:	de 01       	movw	r26, r28
     c48:	d3 96       	adiw	r26, 0x33	; 51
     c4a:	01 90       	ld	r0, Z+
     c4c:	0d 92       	st	X+, r0
     c4e:	8a 95       	dec	r24
     c50:	e1 f7       	brne	.-8      	; 0xc4a <app_serial+0x28>
     c52:	3b a9       	ldd	r19, Y+51	; 0x33
     c54:	2c a9       	ldd	r18, Y+52	; 0x34
     c56:	9d a9       	ldd	r25, Y+53	; 0x35
     c58:	8e a9       	ldd	r24, Y+54	; 0x36
     c5a:	48 ad       	ldd	r20, Y+56	; 0x38
	
	if(adc_buffer.move_x || adc_buffer.move_y){
     c5c:	5f a9       	ldd	r21, Y+55	; 0x37
     c5e:	51 11       	cpse	r21, r1
     c60:	29 c0       	rjmp	.+82     	; 0xcb4 <app_serial+0x92>
     c62:	44 23       	and	r20, r20
     c64:	e1 f0       	breq	.+56     	; 0xc9e <app_serial+0x7c>
		snprintf(buffer, 50, "X: %4d, Y: %4d\n\r", adc_buffer.move_x ? adc_buffer.x : 0, adc_buffer.move_y ? adc_buffer.y : 0);
     c66:	30 e0       	ldi	r19, 0x00	; 0
     c68:	20 e0       	ldi	r18, 0x00	; 0
     c6a:	8f 93       	push	r24
     c6c:	9f 93       	push	r25
     c6e:	2f 93       	push	r18
     c70:	3f 93       	push	r19
     c72:	8a e4       	ldi	r24, 0x4A	; 74
     c74:	91 e0       	ldi	r25, 0x01	; 1
     c76:	9f 93       	push	r25
     c78:	8f 93       	push	r24
     c7a:	1f 92       	push	r1
     c7c:	82 e3       	ldi	r24, 0x32	; 50
     c7e:	8f 93       	push	r24
     c80:	8e 01       	movw	r16, r28
     c82:	0f 5f       	subi	r16, 0xFF	; 255
     c84:	1f 4f       	sbci	r17, 0xFF	; 255
     c86:	1f 93       	push	r17
     c88:	0f 93       	push	r16
     c8a:	0e 94 79 15 	call	0x2af2	; 0x2af2 <snprintf>
		uart_puts(buffer);
     c8e:	c8 01       	movw	r24, r16
     c90:	0e 94 a7 07 	call	0xf4e	; 0xf4e <uart0_putstr>
     c94:	0f b6       	in	r0, 0x3f	; 63
     c96:	f8 94       	cli
     c98:	de bf       	out	0x3e, r29	; 62
     c9a:	0f be       	out	0x3f, r0	; 63
     c9c:	cd bf       	out	0x3d, r28	; 61
	}
     c9e:	ea 96       	adiw	r28, 0x3a	; 58
     ca0:	0f b6       	in	r0, 0x3f	; 63
     ca2:	f8 94       	cli
     ca4:	de bf       	out	0x3e, r29	; 62
     ca6:	0f be       	out	0x3f, r0	; 63
     ca8:	cd bf       	out	0x3d, r28	; 61
     caa:	df 91       	pop	r29
     cac:	cf 91       	pop	r28
     cae:	1f 91       	pop	r17
     cb0:	0f 91       	pop	r16
     cb2:	08 95       	ret
	
	// Receive ADC data buffer
	adc_data_processed_t adc_buffer = contextPtr->buf_adc_data_processed;
	
	if(adc_buffer.move_x || adc_buffer.move_y){
		snprintf(buffer, 50, "X: %4d, Y: %4d\n\r", adc_buffer.move_x ? adc_buffer.x : 0, adc_buffer.move_y ? adc_buffer.y : 0);
     cb4:	41 11       	cpse	r20, r1
     cb6:	d9 cf       	rjmp	.-78     	; 0xc6a <app_serial+0x48>
     cb8:	90 e0       	ldi	r25, 0x00	; 0
     cba:	80 e0       	ldi	r24, 0x00	; 0
     cbc:	d6 cf       	rjmp	.-84     	; 0xc6a <app_serial+0x48>

00000cbe <app_speaker_init>:
}

/*** Apps ***/
void app_speaker_init(void *pvParameters){
	// Get Context Pointer
	contextPtr = (context_t * )pvParameters;
     cbe:	90 93 c8 05 	sts	0x05C8, r25	; 0x8005c8 <contextPtr+0x1>
     cc2:	80 93 c7 05 	sts	0x05C7, r24	; 0x8005c7 <contextPtr>
	if(contextPtr == NULL){
     cc6:	89 2b       	or	r24, r25
     cc8:	41 f1       	breq	.+80     	; 0xd1a <app_speaker_init+0x5c>
		return;
	}
	
	DDRD |= (1 << DDD3);
     cca:	53 9a       	sbi	0x0a, 3	; 10
	OCR2A = 0;
     ccc:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
	OCR2B = 0;
     cd0:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
	TCNT2 = 0;
     cd4:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <__DATA_REGION_ORIGIN__+0x52>
	TIMSK2 = 0;
     cd8:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <__DATA_REGION_ORIGIN__+0x10>
	TCCR2A = (1 << WGM21) | (1 << WGM20);
     cdc:	83 e0       	ldi	r24, 0x03	; 3
     cde:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
	TCCR2B = (1 << WGM22) | (1 << CS22) | (1 << CS21);
     ce2:	8e e0       	ldi	r24, 0x0E	; 14
     ce4:	80 93 b1 00 	sts	0x00B1, r24	; 0x8000b1 <__DATA_REGION_ORIGIN__+0x51>

/*** Support Functions ***/
// Set timer 2 to output a waveform
void setBuzzer(uint16_t val){
	if(val > 0){
		OCR2A = val;
     ce8:	88 e1       	ldi	r24, 0x18	; 24
     cea:	80 93 b3 00 	sts	0x00B3, r24	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		OCR2B = val / 2;
     cee:	8c e0       	ldi	r24, 0x0C	; 12
     cf0:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
		TCCR2A |= 1 << COM2B1;
     cf4:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     cf8:	80 62       	ori	r24, 0x20	; 32
     cfa:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     cfe:	2f ef       	ldi	r18, 0xFF	; 255
     d00:	81 ee       	ldi	r24, 0xE1	; 225
     d02:	94 e0       	ldi	r25, 0x04	; 4
     d04:	21 50       	subi	r18, 0x01	; 1
     d06:	80 40       	sbci	r24, 0x00	; 0
     d08:	90 40       	sbci	r25, 0x00	; 0
     d0a:	e1 f7       	brne	.-8      	; 0xd04 <app_speaker_init+0x46>
     d0c:	00 c0       	rjmp	.+0      	; 0xd0e <app_speaker_init+0x50>
     d0e:	00 00       	nop
	}else{
		TCCR2A &= ~(1 << COM2B1);
     d10:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     d14:	8f 7d       	andi	r24, 0xDF	; 223
     d16:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     d1a:	08 95       	ret

00000d1c <app_speaker>:
	setBuzzer(alarm_sound3);
	_delay_ms(100);
	setBuzzer(alarm_stop);
}

void app_speaker(){
     d1c:	e0 91 c7 05 	lds	r30, 0x05C7	; 0x8005c7 <contextPtr>
     d20:	f0 91 c8 05 	lds	r31, 0x05C8	; 0x8005c8 <contextPtr+0x1>
	// Check for alarms
	bool alarm_present;
	for(uint8_t varLoop = 0; varLoop < PERSISTANT_ALARMS_SIZE; varLoop++){
		if(contextPtr->persistant_alarms[varLoop] != alarm_stop){
     d24:	84 89       	ldd	r24, Z+20	; 0x14
     d26:	81 11       	cpse	r24, r1
     d28:	0f c0       	rjmp	.+30     	; 0xd48 <app_speaker+0x2c>
     d2a:	85 89       	ldd	r24, Z+21	; 0x15
     d2c:	81 11       	cpse	r24, r1
     d2e:	21 c0       	rjmp	.+66     	; 0xd72 <app_speaker+0x56>
     d30:	86 89       	ldd	r24, Z+22	; 0x16
     d32:	81 11       	cpse	r24, r1
     d34:	21 c0       	rjmp	.+66     	; 0xd78 <app_speaker+0x5c>
     d36:	87 89       	ldd	r24, Z+23	; 0x17
     d38:	81 11       	cpse	r24, r1
     d3a:	21 c0       	rjmp	.+66     	; 0xd7e <app_speaker+0x62>
	if(val > 0){
		OCR2A = val;
		OCR2B = val / 2;
		TCCR2A |= 1 << COM2B1;
	}else{
		TCCR2A &= ~(1 << COM2B1);
     d3c:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     d40:	8f 7d       	andi	r24, 0xDF	; 223
     d42:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     d46:	08 95       	ret

void app_speaker(){
	// Check for alarms
	bool alarm_present;
	for(uint8_t varLoop = 0; varLoop < PERSISTANT_ALARMS_SIZE; varLoop++){
		if(contextPtr->persistant_alarms[varLoop] != alarm_stop){
     d48:	80 e0       	ldi	r24, 0x00	; 0
     d4a:	90 e0       	ldi	r25, 0x00	; 0
			alarm_present = true;
			setBuzzer(contextPtr->persistant_alarms[varLoop]);
     d4c:	e8 0f       	add	r30, r24
     d4e:	f9 1f       	adc	r31, r25
     d50:	24 89       	ldd	r18, Z+20	; 0x14
     d52:	82 2f       	mov	r24, r18
     d54:	90 e0       	ldi	r25, 0x00	; 0
context_t *contextPtr;

/*** Support Functions ***/
// Set timer 2 to output a waveform
void setBuzzer(uint16_t val){
	if(val > 0){
     d56:	00 97       	sbiw	r24, 0x00	; 0
     d58:	89 f3       	breq	.-30     	; 0xd3c <app_speaker+0x20>
		OCR2A = val;
     d5a:	20 93 b3 00 	sts	0x00B3, r18	; 0x8000b3 <__DATA_REGION_ORIGIN__+0x53>
		OCR2B = val / 2;
     d5e:	96 95       	lsr	r25
     d60:	87 95       	ror	r24
     d62:	80 93 b4 00 	sts	0x00B4, r24	; 0x8000b4 <__DATA_REGION_ORIGIN__+0x54>
		TCCR2A |= 1 << COM2B1;
     d66:	80 91 b0 00 	lds	r24, 0x00B0	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     d6a:	80 62       	ori	r24, 0x20	; 32
     d6c:	80 93 b0 00 	sts	0x00B0, r24	; 0x8000b0 <__DATA_REGION_ORIGIN__+0x50>
     d70:	08 95       	ret

void app_speaker(){
	// Check for alarms
	bool alarm_present;
	for(uint8_t varLoop = 0; varLoop < PERSISTANT_ALARMS_SIZE; varLoop++){
		if(contextPtr->persistant_alarms[varLoop] != alarm_stop){
     d72:	81 e0       	ldi	r24, 0x01	; 1
     d74:	90 e0       	ldi	r25, 0x00	; 0
     d76:	ea cf       	rjmp	.-44     	; 0xd4c <app_speaker+0x30>
     d78:	82 e0       	ldi	r24, 0x02	; 2
     d7a:	90 e0       	ldi	r25, 0x00	; 0
     d7c:	e7 cf       	rjmp	.-50     	; 0xd4c <app_speaker+0x30>
     d7e:	83 e0       	ldi	r24, 0x03	; 3
     d80:	90 e0       	ldi	r25, 0x00	; 0
     d82:	e4 cf       	rjmp	.-56     	; 0xd4c <app_speaker+0x30>

00000d84 <adc_set_channel>:
	adc_finish = false;
}

// Enable the ADC
void adc_disable(){
	ADCSRA |= 1 << ADEN;
     d84:	ec e7       	ldi	r30, 0x7C	; 124
     d86:	f0 e0       	ldi	r31, 0x00	; 0
     d88:	90 81       	ld	r25, Z
     d8a:	90 7f       	andi	r25, 0xF0	; 240
     d8c:	28 2f       	mov	r18, r24
     d8e:	2f 70       	andi	r18, 0x0F	; 15
     d90:	92 2b       	or	r25, r18
     d92:	90 83       	st	Z, r25
     d94:	21 e0       	ldi	r18, 0x01	; 1
     d96:	30 e0       	ldi	r19, 0x00	; 0
     d98:	a9 01       	movw	r20, r18
     d9a:	02 c0       	rjmp	.+4      	; 0xda0 <adc_set_channel+0x1c>
     d9c:	44 0f       	add	r20, r20
     d9e:	55 1f       	adc	r21, r21
     da0:	8a 95       	dec	r24
     da2:	e2 f7       	brpl	.-8      	; 0xd9c <adc_set_channel+0x18>
     da4:	ca 01       	movw	r24, r20
     da6:	8f 73       	andi	r24, 0x3F	; 63
     da8:	80 93 7e 00 	sts	0x007E, r24	; 0x80007e <__DATA_REGION_ORIGIN__+0x1e>
     dac:	08 95       	ret

00000dae <adc_set_refs>:
     dae:	ec e7       	ldi	r30, 0x7C	; 124
     db0:	f0 e0       	ldi	r31, 0x00	; 0
     db2:	20 81       	ld	r18, Z
     db4:	20 7c       	andi	r18, 0xC0	; 192
     db6:	30 e4       	ldi	r19, 0x40	; 64
     db8:	83 9f       	mul	r24, r19
     dba:	c0 01       	movw	r24, r0
     dbc:	11 24       	eor	r1, r1
     dbe:	82 2b       	or	r24, r18
     dc0:	80 83       	st	Z, r24
     dc2:	08 95       	ret

00000dc4 <adc_set_adps>:
     dc4:	ea e7       	ldi	r30, 0x7A	; 122
     dc6:	f0 e0       	ldi	r31, 0x00	; 0
     dc8:	90 81       	ld	r25, Z
     dca:	98 7f       	andi	r25, 0xF8	; 248
     dcc:	87 70       	andi	r24, 0x07	; 7
     dce:	89 2b       	or	r24, r25
     dd0:	80 83       	st	Z, r24
     dd2:	08 95       	ret

00000dd4 <adc_start_single>:
     dd4:	ea e7       	ldi	r30, 0x7A	; 122
     dd6:	f0 e0       	ldi	r31, 0x00	; 0
     dd8:	80 81       	ld	r24, Z
     dda:	87 70       	andi	r24, 0x07	; 7
     ddc:	88 6c       	ori	r24, 0xC8	; 200
     dde:	80 83       	st	Z, r24
     de0:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
     de4:	08 95       	ret

00000de6 <adc_enable>:
}

// Disable the ADC
void adc_enable(){
	ADCSRA &= ~(1 << ADEN);
     de6:	ea e7       	ldi	r30, 0x7A	; 122
     de8:	f0 e0       	ldi	r31, 0x00	; 0
     dea:	80 81       	ld	r24, Z
     dec:	8f 77       	andi	r24, 0x7F	; 127
     dee:	80 83       	st	Z, r24
     df0:	08 95       	ret

00000df2 <adc_is_finished>:
}

// Get if a conversion has finished
bool adc_is_finished(){
	return adc_finish;
     df2:	80 91 c6 01 	lds	r24, 0x01C6	; 0x8001c6 <__data_end>
}
     df6:	08 95       	ret

00000df8 <adc_is_converting>:

// Get if a conversion is in progress
bool adc_is_converting(){
	return ADCSRA & (1 << ADSC);
     df8:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <__DATA_REGION_ORIGIN__+0x1a>
}
     dfc:	86 fb       	bst	r24, 6
     dfe:	88 27       	eor	r24, r24
     e00:	80 f9       	bld	r24, 0
     e02:	08 95       	ret

00000e04 <adc_get_value>:

// Get the current ADC value.
uint16_t adc_get_value(){
	adc_finish = false;	// Reset the flag
     e04:	10 92 c6 01 	sts	0x01C6, r1	; 0x8001c6 <__data_end>
	return adc_value;	// Return the ADC Value
     e08:	80 91 30 06 	lds	r24, 0x0630	; 0x800630 <adc_value>
     e0c:	90 91 31 06 	lds	r25, 0x0631	; 0x800631 <adc_value+0x1>
}
     e10:	08 95       	ret

00000e12 <__vector_21>:

// ISRs
ISR(ADC_vect){	// ADC Interrupt
     e12:	1f 92       	push	r1
     e14:	0f 92       	push	r0
     e16:	0f b6       	in	r0, 0x3f	; 63
     e18:	0f 92       	push	r0
     e1a:	11 24       	eor	r1, r1
     e1c:	8f 93       	push	r24
     e1e:	9f 93       	push	r25
	adc_value = ADC;
     e20:	80 91 78 00 	lds	r24, 0x0078	; 0x800078 <__DATA_REGION_ORIGIN__+0x18>
     e24:	90 91 79 00 	lds	r25, 0x0079	; 0x800079 <__DATA_REGION_ORIGIN__+0x19>
     e28:	90 93 31 06 	sts	0x0631, r25	; 0x800631 <adc_value+0x1>
     e2c:	80 93 30 06 	sts	0x0630, r24	; 0x800630 <adc_value>
	adc_finish = true;
     e30:	81 e0       	ldi	r24, 0x01	; 1
     e32:	80 93 c6 01 	sts	0x01C6, r24	; 0x8001c6 <__data_end>
     e36:	9f 91       	pop	r25
     e38:	8f 91       	pop	r24
     e3a:	0f 90       	pop	r0
     e3c:	0f be       	out	0x3f, r0	; 63
     e3e:	0f 90       	pop	r0
     e40:	1f 90       	pop	r1
     e42:	18 95       	reti

00000e44 <i2c_init>:
*************************************************************************/
unsigned char i2c_rep_start(unsigned char address)
{
    return i2c_start( address );

}/* i2c_rep_start */
     e44:	9b 01       	movw	r18, r22
     e46:	ac 01       	movw	r20, r24
     e48:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     e4c:	60 e0       	ldi	r22, 0x00	; 0
     e4e:	74 e2       	ldi	r23, 0x24	; 36
     e50:	84 ef       	ldi	r24, 0xF4	; 244
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
     e58:	da 01       	movw	r26, r20
     e5a:	c9 01       	movw	r24, r18
     e5c:	40 97       	sbiw	r24, 0x10	; 16
     e5e:	a1 09       	sbc	r26, r1
     e60:	b1 09       	sbc	r27, r1
     e62:	b6 95       	lsr	r27
     e64:	a7 95       	ror	r26
     e66:	97 95       	ror	r25
     e68:	87 95       	ror	r24
     e6a:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__DATA_REGION_ORIGIN__+0x58>
     e6e:	08 95       	ret

00000e70 <i2c_start_wait>:
     e70:	44 ea       	ldi	r20, 0xA4	; 164
     e72:	54 e8       	ldi	r21, 0x84	; 132
     e74:	64 e9       	ldi	r22, 0x94	; 148
     e76:	40 93 bc 00 	sts	0x00BC, r20	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     e7a:	20 e0       	ldi	r18, 0x00	; 0
     e7c:	30 e0       	ldi	r19, 0x00	; 0
     e7e:	05 c0       	rjmp	.+10     	; 0xe8a <i2c_start_wait+0x1a>
     e80:	2f 5f       	subi	r18, 0xFF	; 255
     e82:	3f 4f       	sbci	r19, 0xFF	; 255
     e84:	20 38       	cpi	r18, 0x80	; 128
     e86:	31 05       	cpc	r19, r1
     e88:	21 f0       	breq	.+8      	; 0xe92 <i2c_start_wait+0x22>
     e8a:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     e8e:	97 ff       	sbrs	r25, 7
     e90:	f7 cf       	rjmp	.-18     	; 0xe80 <i2c_start_wait+0x10>
     e92:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     e96:	98 7f       	andi	r25, 0xF8	; 248
     e98:	98 30       	cpi	r25, 0x08	; 8
     e9a:	11 f0       	breq	.+4      	; 0xea0 <i2c_start_wait+0x30>
     e9c:	90 31       	cpi	r25, 0x10	; 16
     e9e:	59 f7       	brne	.-42     	; 0xe76 <i2c_start_wait+0x6>
     ea0:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
     ea4:	50 93 bc 00 	sts	0x00BC, r21	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ea8:	20 e0       	ldi	r18, 0x00	; 0
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	05 c0       	rjmp	.+10     	; 0xeb8 <i2c_start_wait+0x48>
     eae:	2f 5f       	subi	r18, 0xFF	; 255
     eb0:	3f 4f       	sbci	r19, 0xFF	; 255
     eb2:	20 38       	cpi	r18, 0x80	; 128
     eb4:	31 05       	cpc	r19, r1
     eb6:	21 f0       	breq	.+8      	; 0xec0 <i2c_start_wait+0x50>
     eb8:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ebc:	97 ff       	sbrs	r25, 7
     ebe:	f7 cf       	rjmp	.-18     	; 0xeae <i2c_start_wait+0x3e>
     ec0:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>
     ec4:	98 7f       	andi	r25, 0xF8	; 248
     ec6:	90 32       	cpi	r25, 0x20	; 32
     ec8:	19 f0       	breq	.+6      	; 0xed0 <i2c_start_wait+0x60>
     eca:	98 35       	cpi	r25, 0x58	; 88
     ecc:	09 f0       	breq	.+2      	; 0xed0 <i2c_start_wait+0x60>
     ece:	08 95       	ret
     ed0:	60 93 bc 00 	sts	0x00BC, r22	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ed4:	20 e0       	ldi	r18, 0x00	; 0
     ed6:	30 e0       	ldi	r19, 0x00	; 0
     ed8:	05 c0       	rjmp	.+10     	; 0xee4 <i2c_start_wait+0x74>
     eda:	2f 5f       	subi	r18, 0xFF	; 255
     edc:	3f 4f       	sbci	r19, 0xFF	; 255
     ede:	20 38       	cpi	r18, 0x80	; 128
     ee0:	31 05       	cpc	r19, r1
     ee2:	49 f2       	breq	.-110    	; 0xe76 <i2c_start_wait+0x6>
     ee4:	90 91 bc 00 	lds	r25, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     ee8:	94 fd       	sbrc	r25, 4
     eea:	f7 cf       	rjmp	.-18     	; 0xeda <i2c_start_wait+0x6a>
     eec:	c4 cf       	rjmp	.-120    	; 0xe76 <i2c_start_wait+0x6>

00000eee <i2c_stop>:
void i2c_stop(void)
{
	uint32_t  i2c_timer = 0;

    /* send stop condition */
	TWCR = (1<<TWINT) | (1<<TWEN) | (1<<TWSTO);
     eee:	84 e9       	ldi	r24, 0x94	; 148
     ef0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
	
	// wait until stop condition is executed and bus released
	i2c_timer = I2C_TIMER_DELAY;
	while((TWCR & (1<<TWSTO)) && i2c_timer--);
     ef4:	80 e0       	ldi	r24, 0x00	; 0
     ef6:	90 e0       	ldi	r25, 0x00	; 0
     ef8:	04 c0       	rjmp	.+8      	; 0xf02 <i2c_stop+0x14>
     efa:	01 96       	adiw	r24, 0x01	; 1
     efc:	80 38       	cpi	r24, 0x80	; 128
     efe:	91 05       	cpc	r25, r1
     f00:	21 f0       	breq	.+8      	; 0xf0a <i2c_stop+0x1c>
     f02:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f06:	24 fd       	sbrc	r18, 4
     f08:	f8 cf       	rjmp	.-16     	; 0xefa <i2c_stop+0xc>
     f0a:	08 95       	ret

00000f0c <i2c_write>:
{	
	uint32_t  i2c_timer = 0;
    uint8_t   twst;
    
	// send data to the previously addressed device
	TWDR = data;
     f0c:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__DATA_REGION_ORIGIN__+0x5b>
	TWCR = (1<<TWINT) | (1<<TWEN);
     f10:	84 e8       	ldi	r24, 0x84	; 132
     f12:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
     f16:	8f e7       	ldi	r24, 0x7F	; 127
     f18:	90 e0       	ldi	r25, 0x00	; 0
     f1a:	a0 e0       	ldi	r26, 0x00	; 0
     f1c:	b0 e0       	ldi	r27, 0x00	; 0
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
     f1e:	04 c0       	rjmp	.+8      	; 0xf28 <i2c_write+0x1c>
     f20:	01 97       	sbiw	r24, 0x01	; 1
     f22:	a1 09       	sbc	r26, r1
     f24:	b1 09       	sbc	r27, r1
     f26:	40 f0       	brcs	.+16     	; 0xf38 <i2c_write+0x2c>
     f28:	20 91 bc 00 	lds	r18, 0x00BC	; 0x8000bc <__DATA_REGION_ORIGIN__+0x5c>
     f2c:	27 ff       	sbrs	r18, 7
     f2e:	f8 cf       	rjmp	.-16     	; 0xf20 <i2c_write+0x14>
	if(i2c_timer == 0)
     f30:	89 2b       	or	r24, r25
     f32:	8a 2b       	or	r24, r26
     f34:	8b 2b       	or	r24, r27
     f36:	39 f0       	breq	.+14     	; 0xf46 <i2c_write+0x3a>
		return 1;

	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
     f38:	90 91 b9 00 	lds	r25, 0x00B9	; 0x8000b9 <__DATA_REGION_ORIGIN__+0x59>

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     f3c:	98 7f       	andi	r25, 0xF8	; 248
     f3e:	81 e0       	ldi	r24, 0x01	; 1
     f40:	98 32       	cpi	r25, 0x28	; 40
     f42:	19 f0       	breq	.+6      	; 0xf4a <i2c_write+0x3e>
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     f44:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     f46:	81 e0       	ldi	r24, 0x01	; 1
	// check value of TWI Status Register. Mask prescaler bits
	twst = TW_STATUS & 0xF8;
	if( twst != TW_MT_DATA_ACK) return 1;
	return 0;

}/* i2c_write */
     f48:	08 95       	ret

	// wait until transmission completed
	i2c_timer = I2C_TIMER_DELAY;
	while(!(TWCR & (1<<TWINT)) && i2c_timer--);
	if(i2c_timer == 0)
		return 1;
     f4a:	80 e0       	ldi	r24, 0x00	; 0
     f4c:	08 95       	ret

00000f4e <uart0_putstr>:
//Return    : Next byte in buffer.
//******************************************************************
	uint8_t uart0_peek(void)
	{
		return rx0_buffer[(rx0_Tail+1) & RX0_BUFFER_MASK];
	}
     f4e:	fc 01       	movw	r30, r24
     f50:	20 81       	ld	r18, Z
     f52:	22 23       	and	r18, r18
     f54:	e1 f0       	breq	.+56     	; 0xf8e <uart0_putstr+0x40>
     f56:	dc 01       	movw	r26, r24
     f58:	11 96       	adiw	r26, 0x01	; 1
     f5a:	90 91 74 06 	lds	r25, 0x0674	; 0x800674 <tx0_Head>
     f5e:	9f 5f       	subi	r25, 0xFF	; 255
     f60:	9f 73       	andi	r25, 0x3F	; 63
     f62:	80 91 73 06 	lds	r24, 0x0673	; 0x800673 <tx0_Tail>
     f66:	98 17       	cp	r25, r24
     f68:	e1 f3       	breq	.-8      	; 0xf62 <uart0_putstr+0x14>
     f6a:	e9 2f       	mov	r30, r25
     f6c:	f0 e0       	ldi	r31, 0x00	; 0
     f6e:	ed 5c       	subi	r30, 0xCD	; 205
     f70:	f9 4f       	sbci	r31, 0xF9	; 249
     f72:	20 83       	st	Z, r18
     f74:	8f b7       	in	r24, 0x3f	; 63
     f76:	f8 94       	cli
     f78:	90 93 74 06 	sts	0x0674, r25	; 0x800674 <tx0_Head>
     f7c:	90 91 c1 00 	lds	r25, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     f80:	90 62       	ori	r25, 0x20	; 32
     f82:	90 93 c1 00 	sts	0x00C1, r25	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     f86:	8f bf       	out	0x3f, r24	; 63
     f88:	2d 91       	ld	r18, X+
     f8a:	21 11       	cpse	r18, r1
     f8c:	e6 cf       	rjmp	.-52     	; 0xf5a <uart0_putstr+0xc>
     f8e:	08 95       	ret

00000f90 <__vector_19>:

#ifndef NO_TX0_INTERRUPT

	ISR(UDRE0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     f90:	0f 93       	push	r16
     f92:	0f b7       	in	r16, 0x3f	; 63
     f94:	ef 93       	push	r30
     f96:	ff 93       	push	r31
     f98:	e0 91 73 06 	lds	r30, 0x0673	; 0x800673 <tx0_Tail>
     f9c:	f0 91 74 06 	lds	r31, 0x0674	; 0x800674 <tx0_Head>
     fa0:	e3 95       	inc	r30
     fa2:	ef 73       	andi	r30, 0x3F	; 63
     fa4:	ef 13       	cpse	r30, r31
     fa6:	05 c0       	rjmp	.+10     	; 0xfb2 <USART0_TX_CONTINUE>
     fa8:	f0 91 c1 00 	lds	r31, 0x00C1	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>
     fac:	ff 7d       	andi	r31, 0xDF	; 223
     fae:	f0 93 c1 00 	sts	0x00C1, r31	; 0x8000c1 <__DATA_REGION_ORIGIN__+0x61>

00000fb2 <USART0_TX_CONTINUE>:
     fb2:	e0 93 73 06 	sts	0x0673, r30	; 0x800673 <tx0_Tail>
     fb6:	f0 e0       	ldi	r31, 0x00	; 0
     fb8:	ed 5c       	subi	r30, 0xCD	; 205
     fba:	f9 4f       	sbci	r31, 0xF9	; 249
     fbc:	e0 81       	ld	r30, Z
     fbe:	e0 93 c6 00 	sts	0x00C6, r30	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>

00000fc2 <USART0_TX_EXIT>:
     fc2:	ff 91       	pop	r31
     fc4:	ef 91       	pop	r30
     fc6:	0f bf       	out	0x3f, r16	; 63
     fc8:	0f 91       	pop	r16
     fca:	18 95       	reti

00000fcc <__vector_18>:

#ifndef NO_RX0_INTERRUPT

	ISR(RX0_INTERRUPT, ISR_NAKED)
	{
		asm volatile("\n\t"
     fcc:	0f 93       	push	r16
     fce:	0f b7       	in	r16, 0x3f	; 63
     fd0:	9f 93       	push	r25
     fd2:	90 91 c6 00 	lds	r25, 0x00C6	; 0x8000c6 <__DATA_REGION_ORIGIN__+0x66>
     fd6:	ef 93       	push	r30
     fd8:	ff 93       	push	r31
     fda:	e0 91 32 06 	lds	r30, 0x0632	; 0x800632 <rx0_Head>
     fde:	f0 91 f5 06 	lds	r31, 0x06F5	; 0x8006f5 <rx0_Tail>
     fe2:	e3 95       	inc	r30
     fe4:	ef 77       	andi	r30, 0x7F	; 127
     fe6:	fe 17       	cp	r31, r30
     fe8:	31 f0       	breq	.+12     	; 0xff6 <USART0_RX_EXIT>
     fea:	e0 93 32 06 	sts	0x0632, r30	; 0x800632 <rx0_Head>
     fee:	f0 e0       	ldi	r31, 0x00	; 0
     ff0:	eb 58       	subi	r30, 0x8B	; 139
     ff2:	f9 4f       	sbci	r31, 0xF9	; 249
     ff4:	90 83       	st	Z, r25

00000ff6 <USART0_RX_EXIT>:
     ff6:	ff 91       	pop	r31
     ff8:	ef 91       	pop	r30
     ffa:	9f 91       	pop	r25
     ffc:	0f bf       	out	0x3f, r16	; 63
     ffe:	0f 91       	pop	r16
    1000:	18 95       	reti

00001002 <drawCursorWithFrame>:
#include "u8g2.h"

// Application
#include "display_extras.h"

void drawCursorWithFrame(u8g2_t *u8g2, uint8_t pos_x, uint8_t pos_y, uint8_t w, uint8_t h, uint16_t cursor_x, uint16_t cursor_y){
    1002:	af 92       	push	r10
    1004:	bf 92       	push	r11
    1006:	cf 92       	push	r12
    1008:	ef 92       	push	r14
    100a:	0f 93       	push	r16
    100c:	cf 93       	push	r28
    100e:	df 93       	push	r29
    1010:	5c 01       	movw	r10, r24
    1012:	c6 2f       	mov	r28, r22
    1014:	d4 2f       	mov	r29, r20
	// Frame
	u8g2_DrawFrame(u8g2, pos_x, pos_y, w, h);
    1016:	0e 94 c3 08 	call	0x1186	; 0x1186 <u8g2_DrawFrame>
	
	// Cursor
	u8g2_DrawLine(u8g2, pos_x + cursor_x - 4, pos_y + cursor_y, pos_x + cursor_x + 4, pos_y + cursor_y);
    101a:	ce 0d       	add	r28, r14
    101c:	dc 0d       	add	r29, r12
    101e:	24 e0       	ldi	r18, 0x04	; 4
    1020:	2c 0f       	add	r18, r28
    1022:	6c ef       	ldi	r22, 0xFC	; 252
    1024:	6c 0f       	add	r22, r28
    1026:	0d 2f       	mov	r16, r29
    1028:	4d 2f       	mov	r20, r29
    102a:	c5 01       	movw	r24, r10
    102c:	0e 94 43 10 	call	0x2086	; 0x2086 <u8g2_DrawLine>
	u8g2_DrawLine(u8g2, pos_x + cursor_x, pos_y + cursor_y - 4, pos_x + cursor_x, pos_y + cursor_y + 4);
    1030:	04 e0       	ldi	r16, 0x04	; 4
    1032:	0d 0f       	add	r16, r29
    1034:	4c ef       	ldi	r20, 0xFC	; 252
    1036:	4d 0f       	add	r20, r29
    1038:	2c 2f       	mov	r18, r28
    103a:	6c 2f       	mov	r22, r28
    103c:	c5 01       	movw	r24, r10
    103e:	0e 94 43 10 	call	0x2086	; 0x2086 <u8g2_DrawLine>
	u8g2_DrawCircle(u8g2, pos_x + cursor_x, pos_y + cursor_y, 2, U8G2_DRAW_ALL);
    1042:	0f e0       	ldi	r16, 0x0F	; 15
    1044:	22 e0       	ldi	r18, 0x02	; 2
    1046:	4d 2f       	mov	r20, r29
    1048:	6c 2f       	mov	r22, r28
    104a:	c5 01       	movw	r24, r10
    104c:	0e 94 cd 09 	call	0x139a	; 0x139a <u8g2_DrawCircle>
}
    1050:	df 91       	pop	r29
    1052:	cf 91       	pop	r28
    1054:	0f 91       	pop	r16
    1056:	ef 90       	pop	r14
    1058:	cf 90       	pop	r12
    105a:	bf 90       	pop	r11
    105c:	af 90       	pop	r10
    105e:	08 95       	ret

00001060 <drawHBarGraph>:

void drawHBarGraph(u8g2_t *u8g2, uint8_t pos_x, uint8_t pos_y, uint8_t w, uint8_t h, uint8_t fill_px, bool start_from_right){
    1060:	af 92       	push	r10
    1062:	bf 92       	push	r11
    1064:	cf 92       	push	r12
    1066:	ef 92       	push	r14
    1068:	ff 92       	push	r15
    106a:	0f 93       	push	r16
    106c:	1f 93       	push	r17
    106e:	cf 93       	push	r28
    1070:	df 93       	push	r29
    1072:	5c 01       	movw	r10, r24
    1074:	c6 2f       	mov	r28, r22
    1076:	d4 2f       	mov	r29, r20
    1078:	f2 2e       	mov	r15, r18
    107a:	10 2f       	mov	r17, r16
	// Frame
	u8g2_DrawFrame(u8g2, pos_x, pos_y, w, h);
    107c:	0e 94 c3 08 	call	0x1186	; 0x1186 <u8g2_DrawFrame>
	
	// Bar
	if(start_from_right){
		u8g2_DrawBox(u8g2, pos_x - 1 + w - fill_px, pos_y + 1, fill_px, h - 2);
    1080:	0e ef       	ldi	r16, 0xFE	; 254
    1082:	01 0f       	add	r16, r17
    1084:	41 e0       	ldi	r20, 0x01	; 1
    1086:	4d 0f       	add	r20, r29
void drawHBarGraph(u8g2_t *u8g2, uint8_t pos_x, uint8_t pos_y, uint8_t w, uint8_t h, uint8_t fill_px, bool start_from_right){
	// Frame
	u8g2_DrawFrame(u8g2, pos_x, pos_y, w, h);
	
	// Bar
	if(start_from_right){
    1088:	c1 10       	cpse	r12, r1
    108a:	10 c0       	rjmp	.+32     	; 0x10ac <drawHBarGraph+0x4c>
		u8g2_DrawBox(u8g2, pos_x - 1 + w - fill_px, pos_y + 1, fill_px, h - 2);
	} else {
		u8g2_DrawBox(u8g2, pos_x + 1, pos_y + 1, fill_px, h - 2);
    108c:	61 e0       	ldi	r22, 0x01	; 1
    108e:	6c 0f       	add	r22, r28
    1090:	2e 2d       	mov	r18, r14
    1092:	c5 01       	movw	r24, r10
    1094:	0e 94 9b 08 	call	0x1136	; 0x1136 <u8g2_DrawBox>
	}
    1098:	df 91       	pop	r29
    109a:	cf 91       	pop	r28
    109c:	1f 91       	pop	r17
    109e:	0f 91       	pop	r16
    10a0:	ff 90       	pop	r15
    10a2:	ef 90       	pop	r14
    10a4:	cf 90       	pop	r12
    10a6:	bf 90       	pop	r11
    10a8:	af 90       	pop	r10
    10aa:	08 95       	ret
	// Frame
	u8g2_DrawFrame(u8g2, pos_x, pos_y, w, h);
	
	// Bar
	if(start_from_right){
		u8g2_DrawBox(u8g2, pos_x - 1 + w - fill_px, pos_y + 1, fill_px, h - 2);
    10ac:	6e 2d       	mov	r22, r14
    10ae:	60 95       	com	r22
    10b0:	6f 0d       	add	r22, r15
    10b2:	6c 0f       	add	r22, r28
    10b4:	2e 2d       	mov	r18, r14
    10b6:	c5 01       	movw	r24, r10
    10b8:	0e 94 9b 08 	call	0x1136	; 0x1136 <u8g2_DrawBox>
    10bc:	ed cf       	rjmp	.-38     	; 0x1098 <drawHBarGraph+0x38>

000010be <main>:
// Global variable between all modules
context_t contextInst;

int main(void){
	// Initialize Modules
	app_adc_init(&contextInst);
    10be:	86 ef       	ldi	r24, 0xF6	; 246
    10c0:	96 e0       	ldi	r25, 0x06	; 6
    10c2:	0e 94 74 03 	call	0x6e8	; 0x6e8 <app_adc_init>
	app_gui_init(&contextInst);
    10c6:	86 ef       	ldi	r24, 0xF6	; 246
    10c8:	96 e0       	ldi	r25, 0x06	; 6
    10ca:	0e 94 36 04 	call	0x86c	; 0x86c <app_gui_init>
	app_speaker_init(&contextInst);
    10ce:	86 ef       	ldi	r24, 0xF6	; 246
    10d0:	96 e0       	ldi	r25, 0x06	; 6
    10d2:	0e 94 5f 06 	call	0xcbe	; 0xcbe <app_speaker_init>
	app_serial_init(&contextInst);
    10d6:	86 ef       	ldi	r24, 0xF6	; 246
    10d8:	96 e0       	ldi	r25, 0x06	; 6
    10da:	0e 94 fc 05 	call	0xbf8	; 0xbf8 <app_serial_init>
	
	// Start System Timer
	OCR0A = 249;
    10de:	89 ef       	ldi	r24, 0xF9	; 249
    10e0:	87 bd       	out	0x27, r24	; 39
	TIMSK0 = 1 << OCIE0A;
    10e2:	82 e0       	ldi	r24, 0x02	; 2
    10e4:	80 93 6e 00 	sts	0x006E, r24	; 0x80006e <__DATA_REGION_ORIGIN__+0xe>
	TCCR0A = (1 << WGM01) | (1 << WGM00);
    10e8:	83 e0       	ldi	r24, 0x03	; 3
    10ea:	84 bd       	out	0x24, r24	; 36
	TCCR0B = (1 << WGM02) | (1 << CS01) | (1 << CS00);
    10ec:	8b e0       	ldi	r24, 0x0B	; 11
    10ee:	85 bd       	out	0x25, r24	; 37
	
	sei();
    10f0:	78 94       	sei
	
	while(true){
		app_adc();
    10f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <app_adc>
		app_gui();
    10f6:	0e 94 58 04 	call	0x8b0	; 0x8b0 <app_gui>
		app_speaker();
    10fa:	0e 94 8e 06 	call	0xd1c	; 0xd1c <app_speaker>
		app_serial();
    10fe:	0e 94 11 06 	call	0xc22	; 0xc22 <app_serial>
    1102:	f7 cf       	rjmp	.-18     	; 0x10f2 <main+0x34>

00001104 <__vector_14>:
	}
}

ISR(TIMER0_COMPA_vect){
    1104:	1f 92       	push	r1
    1106:	0f 92       	push	r0
    1108:	0f b6       	in	r0, 0x3f	; 63
    110a:	0f 92       	push	r0
    110c:	11 24       	eor	r1, r1
    110e:	8f 93       	push	r24
    1110:	9f 93       	push	r25
    1112:	ef 93       	push	r30
    1114:	ff 93       	push	r31
	contextInst.millis++;
    1116:	e6 ef       	ldi	r30, 0xF6	; 246
    1118:	f6 e0       	ldi	r31, 0x06	; 6
    111a:	80 81       	ld	r24, Z
    111c:	91 81       	ldd	r25, Z+1	; 0x01
    111e:	01 96       	adiw	r24, 0x01	; 1
    1120:	91 83       	std	Z+1, r25	; 0x01
    1122:	80 83       	st	Z, r24
    1124:	ff 91       	pop	r31
    1126:	ef 91       	pop	r30
    1128:	9f 91       	pop	r25
    112a:	8f 91       	pop	r24
    112c:	0f 90       	pop	r0
    112e:	0f be       	out	0x3f, r0	; 63
    1130:	0f 90       	pop	r0
    1132:	1f 90       	pop	r1
    1134:	18 95       	reti

00001136 <u8g2_DrawBox>:
/*
  draw a filled box
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawBox(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    1136:	df 92       	push	r13
    1138:	ef 92       	push	r14
    113a:	ff 92       	push	r15
    113c:	0f 93       	push	r16
    113e:	1f 93       	push	r17
    1140:	cf 93       	push	r28
    1142:	df 93       	push	r29
    1144:	7c 01       	movw	r14, r24
    1146:	16 2f       	mov	r17, r22
    1148:	c4 2f       	mov	r28, r20
    114a:	d2 2e       	mov	r13, r18
    114c:	d0 2f       	mov	r29, r16
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    114e:	04 2f       	mov	r16, r20
    1150:	0d 0f       	add	r16, r29
    1152:	26 2f       	mov	r18, r22
    1154:	2d 0d       	add	r18, r13
    1156:	0e 94 24 10 	call	0x2048	; 0x2048 <u8g2_IsIntersection>
    115a:	81 11       	cpse	r24, r1
    115c:	0a c0       	rjmp	.+20     	; 0x1172 <u8g2_DrawBox+0x3c>
    115e:	0b c0       	rjmp	.+22     	; 0x1176 <u8g2_DrawBox+0x40>
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    1160:	00 e0       	ldi	r16, 0x00	; 0
    1162:	2d 2d       	mov	r18, r13
    1164:	4c 2f       	mov	r20, r28
    1166:	61 2f       	mov	r22, r17
    1168:	c7 01       	movw	r24, r14
    116a:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
    y++;    
    116e:	cf 5f       	subi	r28, 0xFF	; 255
    h--;
    1170:	d1 50       	subi	r29, 0x01	; 1
{
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  while( h != 0 )
    1172:	d1 11       	cpse	r29, r1
    1174:	f5 cf       	rjmp	.-22     	; 0x1160 <u8g2_DrawBox+0x2a>
  { 
    u8g2_DrawHVLine(u8g2, x, y, w, 0);
    y++;    
    h--;
  }
}
    1176:	df 91       	pop	r29
    1178:	cf 91       	pop	r28
    117a:	1f 91       	pop	r17
    117c:	0f 91       	pop	r16
    117e:	ff 90       	pop	r15
    1180:	ef 90       	pop	r14
    1182:	df 90       	pop	r13
    1184:	08 95       	ret

00001186 <u8g2_DrawFrame>:
/*
  draw a frame (empty box)
  restriction: does not work for w = 0 or h = 0
*/
void u8g2_DrawFrame(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t w, u8g2_uint_t h)
{
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	7c 01       	movw	r14, r24
    1198:	d6 2f       	mov	r29, r22
    119a:	c4 2f       	mov	r28, r20
    119c:	d2 2e       	mov	r13, r18
    119e:	10 2f       	mov	r17, r16
  u8g2_uint_t xtmp = x;
  
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    11a0:	c6 2e       	mov	r12, r22
    11a2:	c2 0e       	add	r12, r18
    11a4:	04 2f       	mov	r16, r20
    11a6:	01 0f       	add	r16, r17
    11a8:	2c 2d       	mov	r18, r12
    11aa:	0e 94 24 10 	call	0x2048	; 0x2048 <u8g2_IsIntersection>
    11ae:	81 11       	cpse	r24, r1
    11b0:	09 c0       	rjmp	.+18     	; 0x11c4 <u8g2_DrawFrame+0x3e>
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
      y+=h;
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
  }
}
    11b2:	df 91       	pop	r29
    11b4:	cf 91       	pop	r28
    11b6:	1f 91       	pop	r17
    11b8:	0f 91       	pop	r16
    11ba:	ff 90       	pop	r15
    11bc:	ef 90       	pop	r14
    11be:	df 90       	pop	r13
    11c0:	cf 90       	pop	r12
    11c2:	08 95       	ret
#ifdef U8G2_WITH_INTERSECTION
  if ( u8g2_IsIntersection(u8g2, x, y, x+w, y+h) == 0 ) 
    return;
#endif /* U8G2_WITH_INTERSECTION */
  
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
    11c4:	00 e0       	ldi	r16, 0x00	; 0
    11c6:	2d 2d       	mov	r18, r13
    11c8:	4c 2f       	mov	r20, r28
    11ca:	6d 2f       	mov	r22, r29
    11cc:	c7 01       	movw	r24, r14
    11ce:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
  if (h >= 2) {
    11d2:	12 30       	cpi	r17, 0x02	; 2
    11d4:	70 f3       	brcs	.-36     	; 0x11b2 <u8g2_DrawFrame+0x2c>
    h-=2;
    11d6:	12 50       	subi	r17, 0x02	; 2
    y++;
    11d8:	cf 5f       	subi	r28, 0xFF	; 255
    if (h > 0) {
    11da:	11 11       	cpse	r17, r1
    11dc:	08 c0       	rjmp	.+16     	; 0x11ee <u8g2_DrawFrame+0x68>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
      y+=h;
    }
    u8g2_DrawHVLine(u8g2, xtmp, y, w, 0);
    11de:	00 e0       	ldi	r16, 0x00	; 0
    11e0:	2d 2d       	mov	r18, r13
    11e2:	4c 2f       	mov	r20, r28
    11e4:	6d 2f       	mov	r22, r29
    11e6:	c7 01       	movw	r24, r14
    11e8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
    11ec:	e2 cf       	rjmp	.-60     	; 0x11b2 <u8g2_DrawFrame+0x2c>
  u8g2_DrawHVLine(u8g2, x, y, w, 0);
  if (h >= 2) {
    h-=2;
    y++;
    if (h > 0) {
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    11ee:	01 e0       	ldi	r16, 0x01	; 1
    11f0:	21 2f       	mov	r18, r17
    11f2:	4c 2f       	mov	r20, r28
    11f4:	6d 2f       	mov	r22, r29
    11f6:	c7 01       	movw	r24, r14
    11f8:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
      x+=w;
      x--;
      u8g2_DrawHVLine(u8g2, x, y, h, 1);
    11fc:	6f ef       	ldi	r22, 0xFF	; 255
    11fe:	6c 0d       	add	r22, r12
    1200:	21 2f       	mov	r18, r17
    1202:	4c 2f       	mov	r20, r28
    1204:	c7 01       	movw	r24, r14
    1206:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
      y+=h;
    120a:	c1 0f       	add	r28, r17
    120c:	e8 cf       	rjmp	.-48     	; 0x11de <u8g2_DrawFrame+0x58>

0000120e <u8g2_send_buffer>:
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    120e:	af 92       	push	r10
    1210:	bf 92       	push	r11
    1212:	cf 92       	push	r12
    1214:	df 92       	push	r13
    1216:	ef 92       	push	r14
    1218:	ff 92       	push	r15
    121a:	0f 93       	push	r16
    121c:	1f 93       	push	r17
    121e:	cf 93       	push	r28
    1220:	df 93       	push	r29
    1222:	6c 01       	movw	r12, r24
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
    1224:	dc 01       	movw	r26, r24
    1226:	94 96       	adiw	r26, 0x24	; 36
    1228:	bc 90       	ld	r11, X
    122a:	94 97       	sbiw	r26, 0x24	; 36
  dest_row = u8g2->tile_curr_row;
    122c:	95 96       	adiw	r26, 0x25	; 37
    122e:	dc 91       	ld	r29, X
    1230:	95 97       	sbiw	r26, 0x25	; 37
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    1232:	ed 91       	ld	r30, X+
    1234:	fc 91       	ld	r31, X
    1236:	a1 88       	ldd	r10, Z+17	; 0x11
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    1238:	cd 2f       	mov	r28, r29
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    123a:	e1 2c       	mov	r14, r1
    123c:	f1 2c       	mov	r15, r1
    123e:	08 c0       	rjmp	.+16     	; 0x1250 <u8g2_send_buffer+0x42>
    1240:	ff ef       	ldi	r31, 0xFF	; 255
    1242:	ef 1a       	sub	r14, r31
    1244:	ff 0a       	sbc	r15, r31
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
    1246:	ca 15       	cp	r28, r10
    1248:	10 f5       	brcc	.+68     	; 0x128e <u8g2_send_buffer+0x80>
    124a:	d6 01       	movw	r26, r12
    124c:	ed 91       	ld	r30, X+
    124e:	fc 91       	ld	r31, X
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    1250:	20 89       	ldd	r18, Z+16	; 0x10
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    1252:	f6 01       	movw	r30, r12
    1254:	02 a1       	ldd	r16, Z+34	; 0x22
    1256:	13 a1       	ldd	r17, Z+35	; 0x23
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    1258:	42 2f       	mov	r20, r18
    125a:	50 e0       	ldi	r21, 0x00	; 0
    125c:	44 0f       	add	r20, r20
    125e:	55 1f       	adc	r21, r21
    1260:	44 0f       	add	r20, r20
    1262:	55 1f       	adc	r21, r21
    1264:	44 0f       	add	r20, r20
    1266:	55 1f       	adc	r21, r21
    1268:	4e 9d       	mul	r20, r14
    126a:	c0 01       	movw	r24, r0
    126c:	4f 9d       	mul	r20, r15
    126e:	90 0d       	add	r25, r0
    1270:	5e 9d       	mul	r21, r14
    1272:	90 0d       	add	r25, r0
    1274:	11 24       	eor	r1, r1
    1276:	08 0f       	add	r16, r24
    1278:	19 1f       	adc	r17, r25
    127a:	4c 2f       	mov	r20, r28
    127c:	60 e0       	ldi	r22, 0x00	; 0
    127e:	c6 01       	movw	r24, r12
    1280:	0e 94 df 13 	call	0x27be	; 0x27be <u8x8_DrawTile>
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    1284:	cf 5f       	subi	r28, 0xFF	; 255
  } while( src_row < src_max && dest_row < dest_max );
    1286:	8c 2f       	mov	r24, r28
    1288:	8d 1b       	sub	r24, r29
    128a:	8b 15       	cp	r24, r11
    128c:	c8 f2       	brcs	.-78     	; 0x1240 <u8g2_send_buffer+0x32>
}
    128e:	df 91       	pop	r29
    1290:	cf 91       	pop	r28
    1292:	1f 91       	pop	r17
    1294:	0f 91       	pop	r16
    1296:	ff 90       	pop	r15
    1298:	ef 90       	pop	r14
    129a:	df 90       	pop	r13
    129c:	cf 90       	pop	r12
    129e:	bf 90       	pop	r11
    12a0:	af 90       	pop	r10
    12a2:	08 95       	ret

000012a4 <u8g2_ClearBuffer>:
#include "u8g2.h"
#include <string.h>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
    12a4:	fc 01       	movw	r30, r24
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    12a6:	a0 81       	ld	r26, Z
    12a8:	b1 81       	ldd	r27, Z+1	; 0x01
    12aa:	50 96       	adiw	r26, 0x10	; 16
    12ac:	9c 91       	ld	r25, X
  cnt *= u8g2->tile_buf_height;
    12ae:	44 a1       	ldd	r20, Z+36	; 0x24
    12b0:	94 9f       	mul	r25, r20
    12b2:	a0 01       	movw	r20, r0
    12b4:	11 24       	eor	r1, r1
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    12b6:	44 0f       	add	r20, r20
    12b8:	55 1f       	adc	r21, r21
    12ba:	44 0f       	add	r20, r20
    12bc:	55 1f       	adc	r21, r21
    12be:	44 0f       	add	r20, r20
    12c0:	55 1f       	adc	r21, r21
    12c2:	60 e0       	ldi	r22, 0x00	; 0
    12c4:	70 e0       	ldi	r23, 0x00	; 0
    12c6:	82 a1       	ldd	r24, Z+34	; 0x22
    12c8:	93 a1       	ldd	r25, Z+35	; 0x23
    12ca:	0c 94 72 15 	jmp	0x2ae4	; 0x2ae4 <memset>

000012ce <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    12ce:	cf 93       	push	r28
    12d0:	df 93       	push	r29
    12d2:	ec 01       	movw	r28, r24
  u8g2_send_buffer(u8g2);
    12d4:	0e 94 07 09 	call	0x120e	; 0x120e <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    12d8:	ce 01       	movw	r24, r28
}
    12da:	df 91       	pop	r29
    12dc:	cf 91       	pop	r28

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    12de:	0c 94 2a 14 	jmp	0x2854	; 0x2854 <u8x8_RefreshDisplay>

000012e2 <u8g2_draw_circle_section>:
static void u8g2_draw_filled_ellipse_section(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t x0, u8g2_uint_t y0, uint8_t option)
{
    /* upper right */
    if ( option & U8G2_DRAW_UPPER_RIGHT )
    {
      u8g2_DrawVLine(u8g2, x0+x, y0-y, y+1);
    12e2:	cf 92       	push	r12
    12e4:	df 92       	push	r13
    12e6:	ef 92       	push	r14
    12e8:	0f 93       	push	r16
    12ea:	1f 93       	push	r17
    12ec:	cf 93       	push	r28
    12ee:	df 93       	push	r29
    12f0:	6c 01       	movw	r12, r24
    12f2:	d6 2f       	mov	r29, r22
    12f4:	14 2f       	mov	r17, r20
    12f6:	c2 2f       	mov	r28, r18
    12f8:	e0 fc       	sbrc	r14, 0
    12fa:	41 c0       	rjmp	.+130    	; 0x137e <u8g2_draw_circle_section+0x9c>
    12fc:	e1 fc       	sbrc	r14, 1
    12fe:	30 c0       	rjmp	.+96     	; 0x1360 <u8g2_draw_circle_section+0x7e>
    1300:	e3 fc       	sbrc	r14, 3
    1302:	1f c0       	rjmp	.+62     	; 0x1342 <u8g2_draw_circle_section+0x60>
    1304:	e2 fc       	sbrc	r14, 2
    1306:	08 c0       	rjmp	.+16     	; 0x1318 <u8g2_draw_circle_section+0x36>
    1308:	df 91       	pop	r29
    130a:	cf 91       	pop	r28
    130c:	1f 91       	pop	r17
    130e:	0f 91       	pop	r16
    1310:	ef 90       	pop	r14
    1312:	df 90       	pop	r13
    1314:	cf 90       	pop	r12
    1316:	08 95       	ret
    1318:	40 2f       	mov	r20, r16
    131a:	41 0f       	add	r20, r17
    131c:	6c 2f       	mov	r22, r28
    131e:	6d 1b       	sub	r22, r29
    1320:	c6 01       	movw	r24, r12
    1322:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    1326:	40 2f       	mov	r20, r16
    1328:	4d 0f       	add	r20, r29
    132a:	6c 2f       	mov	r22, r28
    132c:	61 1b       	sub	r22, r17
    132e:	c6 01       	movw	r24, r12
    1330:	df 91       	pop	r29
    1332:	cf 91       	pop	r28
    1334:	1f 91       	pop	r17
    1336:	0f 91       	pop	r16
    1338:	ef 90       	pop	r14
    133a:	df 90       	pop	r13
    133c:	cf 90       	pop	r12
    133e:	0c 94 e9 0f 	jmp	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    1342:	40 2f       	mov	r20, r16
    1344:	41 0f       	add	r20, r17
    1346:	6c 2f       	mov	r22, r28
    1348:	6d 0f       	add	r22, r29
    134a:	c6 01       	movw	r24, r12
    134c:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    1350:	40 2f       	mov	r20, r16
    1352:	4d 0f       	add	r20, r29
    1354:	61 2f       	mov	r22, r17
    1356:	6c 0f       	add	r22, r28
    1358:	c6 01       	movw	r24, r12
    135a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    135e:	d2 cf       	rjmp	.-92     	; 0x1304 <u8g2_draw_circle_section+0x22>
    1360:	40 2f       	mov	r20, r16
    1362:	41 1b       	sub	r20, r17
    1364:	6c 2f       	mov	r22, r28
    1366:	6d 1b       	sub	r22, r29
    1368:	c6 01       	movw	r24, r12
    136a:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    136e:	40 2f       	mov	r20, r16
    1370:	4d 1b       	sub	r20, r29
    1372:	6c 2f       	mov	r22, r28
    1374:	61 1b       	sub	r22, r17
    1376:	c6 01       	movw	r24, r12
    1378:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    137c:	c1 cf       	rjmp	.-126    	; 0x1300 <u8g2_draw_circle_section+0x1e>
    137e:	40 2f       	mov	r20, r16
    1380:	41 1b       	sub	r20, r17
    1382:	62 2f       	mov	r22, r18
    1384:	6d 0f       	add	r22, r29
    1386:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    138a:	40 2f       	mov	r20, r16
    138c:	4d 1b       	sub	r20, r29
    138e:	61 2f       	mov	r22, r17
    1390:	6c 0f       	add	r22, r28
    1392:	c6 01       	movw	r24, r12
    1394:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    1398:	b1 cf       	rjmp	.-158    	; 0x12fc <u8g2_draw_circle_section+0x1a>

0000139a <u8g2_DrawCircle>:
      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    }
}

void u8g2_DrawCircle(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t rad, uint8_t option)
{
    139a:	8f 92       	push	r8
    139c:	9f 92       	push	r9
    139e:	af 92       	push	r10
    13a0:	bf 92       	push	r11
    13a2:	cf 92       	push	r12
    13a4:	df 92       	push	r13
    13a6:	ef 92       	push	r14
    13a8:	ff 92       	push	r15
    13aa:	0f 93       	push	r16
    13ac:	1f 93       	push	r17
    13ae:	cf 93       	push	r28
    13b0:	df 93       	push	r29
    13b2:	5c 01       	movw	r10, r24
    13b4:	c6 2e       	mov	r12, r22
    13b6:	94 2e       	mov	r9, r20
    13b8:	c2 2f       	mov	r28, r18
    13ba:	80 2e       	mov	r8, r16
  /* check for bounding box */
#ifdef U8G2_WITH_INTERSECTION
  {
    if ( u8g2_IsIntersection(u8g2, x0-rad, y0-rad, x0+rad+1, y0+rad+1) == 0 ) 
    13bc:	01 e0       	ldi	r16, 0x01	; 1
    13be:	02 0f       	add	r16, r18
    13c0:	04 0f       	add	r16, r20
    13c2:	21 e0       	ldi	r18, 0x01	; 1
    13c4:	26 0f       	add	r18, r22
    13c6:	2c 0f       	add	r18, r28
    13c8:	4c 1b       	sub	r20, r28
    13ca:	6c 1b       	sub	r22, r28
    13cc:	0e 94 24 10 	call	0x2048	; 0x2048 <u8g2_IsIntersection>
    13d0:	81 11       	cpse	r24, r1
    13d2:	0d c0       	rjmp	.+26     	; 0x13ee <u8g2_DrawCircle+0x54>
#endif /* U8G2_WITH_INTERSECTION */
  
  
  /* draw circle */
  u8g2_draw_circle(u8g2, x0, y0, rad, option);
}
    13d4:	df 91       	pop	r29
    13d6:	cf 91       	pop	r28
    13d8:	1f 91       	pop	r17
    13da:	0f 91       	pop	r16
    13dc:	ff 90       	pop	r15
    13de:	ef 90       	pop	r14
    13e0:	df 90       	pop	r13
    13e2:	cf 90       	pop	r12
    13e4:	bf 90       	pop	r11
    13e6:	af 90       	pop	r10
    13e8:	9f 90       	pop	r9
    13ea:	8f 90       	pop	r8
    13ec:	08 95       	ret
    u8g2_int_t ddF_y;
    u8g2_uint_t x;
    u8g2_uint_t y;

    f = 1;
    f -= rad;
    13ee:	d1 e0       	ldi	r29, 0x01	; 1
    13f0:	dc 1b       	sub	r29, r28
    ddF_x = 1;
    ddF_y = 0;
    ddF_y -= rad;
    ddF_y *= 2;
    13f2:	dc 2e       	mov	r13, r28
    13f4:	d1 94       	neg	r13
    13f6:	dd 0c       	add	r13, r13
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    13f8:	e8 2c       	mov	r14, r8
    13fa:	09 2d       	mov	r16, r9
    13fc:	2c 2d       	mov	r18, r12
    13fe:	4c 2f       	mov	r20, r28
    1400:	60 e0       	ldi	r22, 0x00	; 0
    1402:	c5 01       	movw	r24, r10
    1404:	0e 94 71 09 	call	0x12e2	; 0x12e2 <u8g2_draw_circle_section>
    
    while ( x < y )
    1408:	cc 23       	and	r28, r28
    140a:	21 f3       	breq	.-56     	; 0x13d4 <u8g2_DrawCircle+0x3a>
    140c:	83 e0       	ldi	r24, 0x03	; 3
    140e:	f8 2e       	mov	r15, r24
    1410:	10 e0       	ldi	r17, 0x00	; 0
    {
      if (f >= 0) 
    1412:	d7 fd       	sbrc	r29, 7
    1414:	04 c0       	rjmp	.+8      	; 0x141e <u8g2_DrawCircle+0x84>
      {
        y--;
    1416:	c1 50       	subi	r28, 0x01	; 1
        ddF_y += 2;
    1418:	d3 94       	inc	r13
    141a:	d3 94       	inc	r13
        f += ddF_y;
    141c:	dd 0d       	add	r29, r13
      }
      x++;
    141e:	1f 5f       	subi	r17, 0xFF	; 255
      ddF_x += 2;
      f += ddF_x;
    1420:	df 0d       	add	r29, r15

      u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);    
    1422:	e8 2c       	mov	r14, r8
    1424:	09 2d       	mov	r16, r9
    1426:	2c 2d       	mov	r18, r12
    1428:	4c 2f       	mov	r20, r28
    142a:	61 2f       	mov	r22, r17
    142c:	c5 01       	movw	r24, r10
    142e:	0e 94 71 09 	call	0x12e2	; 0x12e2 <u8g2_draw_circle_section>
    1432:	f3 94       	inc	r15
    1434:	f3 94       	inc	r15
    x = 0;
    y = rad;

    u8g2_draw_circle_section(u8g2, x, y, x0, y0, option);
    
    while ( x < y )
    1436:	1c 17       	cp	r17, r28
    1438:	60 f3       	brcs	.-40     	; 0x1412 <u8g2_DrawCircle+0x78>
    143a:	cc cf       	rjmp	.-104    	; 0x13d4 <u8g2_DrawCircle+0x3a>

0000143c <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    143c:	28 e0       	ldi	r18, 0x08	; 8
    143e:	fc 01       	movw	r30, r24
    1440:	20 83       	st	Z, r18
  return buf;
  #endif
}
    1442:	87 ec       	ldi	r24, 0xC7	; 199
    1444:	91 e0       	ldi	r25, 0x01	; 1
    1446:	08 95       	ret

00001448 <u8g2_Setup_sh1106_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* sh1106 f */
void u8g2_Setup_sh1106_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    1448:	cf 92       	push	r12
    144a:	df 92       	push	r13
    144c:	ef 92       	push	r14
    144e:	ff 92       	push	r15
    1450:	0f 93       	push	r16
    1452:	1f 93       	push	r17
    1454:	cf 93       	push	r28
    1456:	df 93       	push	r29
    1458:	1f 92       	push	r1
    145a:	cd b7       	in	r28, 0x3d	; 61
    145c:	de b7       	in	r29, 0x3e	; 62
    145e:	7c 01       	movw	r14, r24
    1460:	6b 01       	movw	r12, r22
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_sh1106_128x64_noname, u8x8_cad_ssd13xx_i2c, byte_cb, gpio_and_delay_cb);
    1462:	89 01       	movw	r16, r18
    1464:	9a 01       	movw	r18, r20
    1466:	41 e4       	ldi	r20, 0x41	; 65
    1468:	53 e1       	ldi	r21, 0x13	; 19
    146a:	64 e3       	ldi	r22, 0x34	; 52
    146c:	74 e1       	ldi	r23, 0x14	; 20
    146e:	0e 94 e8 14 	call	0x29d0	; 0x29d0 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    1472:	ce 01       	movw	r24, r28
    1474:	01 96       	adiw	r24, 0x01	; 1
    1476:	0e 94 1e 0a 	call	0x143c	; 0x143c <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    147a:	86 01       	movw	r16, r12
    147c:	2f ed       	ldi	r18, 0xDF	; 223
    147e:	30 e1       	ldi	r19, 0x10	; 16
    1480:	49 81       	ldd	r20, Y+1	; 0x01
    1482:	bc 01       	movw	r22, r24
    1484:	c7 01       	movw	r24, r14
    1486:	0e 94 b3 11 	call	0x2366	; 0x2366 <u8g2_SetupBuffer>
}
    148a:	0f 90       	pop	r0
    148c:	df 91       	pop	r29
    148e:	cf 91       	pop	r28
    1490:	1f 91       	pop	r17
    1492:	0f 91       	pop	r16
    1494:	ff 90       	pop	r15
    1496:	ef 90       	pop	r14
    1498:	df 90       	pop	r13
    149a:	cf 90       	pop	r12
    149c:	08 95       	ret

0000149e <u8g2_font_get_word>:
  return tmp;
}

void u8g2_SetFontPosCenter(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_center;
    149e:	fc 01       	movw	r30, r24
    14a0:	e6 0f       	add	r30, r22
    14a2:	f1 1d       	adc	r31, r1
    14a4:	84 91       	lpm	r24, Z
    14a6:	90 e0       	ldi	r25, 0x00	; 0
    14a8:	98 2f       	mov	r25, r24
    14aa:	88 27       	eor	r24, r24
    14ac:	31 96       	adiw	r30, 0x01	; 1
    14ae:	e4 91       	lpm	r30, Z
    14b0:	8e 0f       	add	r24, r30
    14b2:	91 1d       	adc	r25, r1
    14b4:	08 95       	ret

000014b6 <u8g2_font_calc_vref_font>:
    14b6:	80 e0       	ldi	r24, 0x00	; 0
    14b8:	08 95       	ret

000014ba <u8g2_font_get_word.constprop.2>:
    14ba:	fc 01       	movw	r30, r24
    14bc:	84 91       	lpm	r24, Z
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	98 2f       	mov	r25, r24
    14c2:	88 27       	eor	r24, r24
    14c4:	31 96       	adiw	r30, 0x01	; 1
    14c6:	e4 91       	lpm	r30, Z
    14c8:	8e 0f       	add	r24, r30
    14ca:	91 1d       	adc	r25, r1
    14cc:	08 95       	ret

000014ce <u8g2_font_get_word.constprop.3>:
    14ce:	fc 01       	movw	r30, r24
    14d0:	32 96       	adiw	r30, 0x02	; 2
    14d2:	24 91       	lpm	r18, Z
    14d4:	30 e0       	ldi	r19, 0x00	; 0
    14d6:	32 2f       	mov	r19, r18
    14d8:	22 27       	eor	r18, r18
    14da:	31 96       	adiw	r30, 0x01	; 1
    14dc:	84 91       	lpm	r24, Z
    14de:	a9 01       	movw	r20, r18
    14e0:	48 0f       	add	r20, r24
    14e2:	51 1d       	adc	r21, r1
    14e4:	ca 01       	movw	r24, r20
    14e6:	08 95       	ret

000014e8 <u8g2_add_vector_y>:
    14e8:	21 30       	cpi	r18, 0x01	; 1
    14ea:	49 f0       	breq	.+18     	; 0x14fe <u8g2_add_vector_y+0x16>
    14ec:	30 f0       	brcs	.+12     	; 0x14fa <u8g2_add_vector_y+0x12>
    14ee:	22 30       	cpi	r18, 0x02	; 2
    14f0:	11 f4       	brne	.+4      	; 0x14f6 <u8g2_add_vector_y+0xe>
    14f2:	84 1b       	sub	r24, r20
    14f4:	08 95       	ret
    14f6:	86 1b       	sub	r24, r22
    14f8:	08 95       	ret
    14fa:	84 0f       	add	r24, r20
    14fc:	08 95       	ret
    14fe:	86 0f       	add	r24, r22
    1500:	08 95       	ret

00001502 <u8g2_add_vector_x>:
    1502:	21 30       	cpi	r18, 0x01	; 1
    1504:	49 f0       	breq	.+18     	; 0x1518 <u8g2_add_vector_x+0x16>
    1506:	30 f0       	brcs	.+12     	; 0x1514 <u8g2_add_vector_x+0x12>
    1508:	22 30       	cpi	r18, 0x02	; 2
    150a:	11 f4       	brne	.+4      	; 0x1510 <u8g2_add_vector_x+0xe>
    150c:	86 1b       	sub	r24, r22
    150e:	08 95       	ret
    1510:	84 0f       	add	r24, r20
    1512:	08 95       	ret
    1514:	86 0f       	add	r24, r22
    1516:	08 95       	ret
    1518:	84 1b       	sub	r24, r20
    151a:	08 95       	ret

0000151c <u8g2_font_decode_glyph>:
    151c:	2f 92       	push	r2
    151e:	3f 92       	push	r3
    1520:	4f 92       	push	r4
    1522:	5f 92       	push	r5
    1524:	6f 92       	push	r6
    1526:	7f 92       	push	r7
    1528:	8f 92       	push	r8
    152a:	9f 92       	push	r9
    152c:	af 92       	push	r10
    152e:	bf 92       	push	r11
    1530:	cf 92       	push	r12
    1532:	df 92       	push	r13
    1534:	ef 92       	push	r14
    1536:	ff 92       	push	r15
    1538:	0f 93       	push	r16
    153a:	1f 93       	push	r17
    153c:	cf 93       	push	r28
    153e:	df 93       	push	r29
    1540:	cd b7       	in	r28, 0x3d	; 61
    1542:	de b7       	in	r29, 0x3e	; 62
    1544:	61 97       	sbiw	r28, 0x11	; 17
    1546:	0f b6       	in	r0, 0x3f	; 63
    1548:	f8 94       	cli
    154a:	de bf       	out	0x3e, r29	; 62
    154c:	0f be       	out	0x3f, r0	; 63
    154e:	cd bf       	out	0x3d, r28	; 61
    1550:	dc 01       	movw	r26, r24
    1552:	da 96       	adiw	r26, 0x3a	; 58
    1554:	7c 93       	st	X, r23
    1556:	6e 93       	st	-X, r22
    1558:	d9 97       	sbiw	r26, 0x39	; 57
    155a:	9c 01       	movw	r18, r24
    155c:	2f 5b       	subi	r18, 0xBF	; 191
    155e:	3f 4f       	sbci	r19, 0xFF	; 255
    1560:	3c 83       	std	Y+4, r19	; 0x04
    1562:	2b 83       	std	Y+3, r18	; 0x03
    1564:	f9 01       	movw	r30, r18
    1566:	10 82       	st	Z, r1
    1568:	39 96       	adiw	r30, 0x09	; 9
    156a:	40 81       	ld	r20, Z
    156c:	fb 01       	movw	r30, r22
    156e:	c4 90       	lpm	r12, Z
    1570:	48 30       	cpi	r20, 0x08	; 8
    1572:	08 f4       	brcc	.+2      	; 0x1576 <u8g2_font_decode_glyph+0x5a>
    1574:	82 c2       	rjmp	.+1284   	; 0x1a7a <u8g2_font_decode_glyph+0x55e>
    1576:	9b 01       	movw	r18, r22
    1578:	2f 5f       	subi	r18, 0xFF	; 255
    157a:	3f 4f       	sbci	r19, 0xFF	; 255
    157c:	da 96       	adiw	r26, 0x3a	; 58
    157e:	3c 93       	st	X, r19
    1580:	2e 93       	st	-X, r18
    1582:	d9 97       	sbiw	r26, 0x39	; 57
    1584:	f9 01       	movw	r30, r18
    1586:	84 91       	lpm	r24, Z
    1588:	68 ef       	ldi	r22, 0xF8	; 248
    158a:	64 0f       	add	r22, r20
    158c:	79 01       	movw	r14, r18
    158e:	81 e0       	ldi	r24, 0x01	; 1
    1590:	90 e0       	ldi	r25, 0x00	; 0
    1592:	01 c0       	rjmp	.+2      	; 0x1596 <u8g2_font_decode_glyph+0x7a>
    1594:	88 0f       	add	r24, r24
    1596:	4a 95       	dec	r20
    1598:	ea f7       	brpl	.-6      	; 0x1594 <u8g2_font_decode_glyph+0x78>
    159a:	81 50       	subi	r24, 0x01	; 1
    159c:	c8 22       	and	r12, r24
    159e:	eb 81       	ldd	r30, Y+3	; 0x03
    15a0:	fc 81       	ldd	r31, Y+4	; 0x04
    15a2:	60 83       	st	Z, r22
    15a4:	df 96       	adiw	r26, 0x3f	; 63
    15a6:	cc 92       	st	X, r12
    15a8:	df 97       	sbiw	r26, 0x3f	; 63
    15aa:	cd 01       	movw	r24, r26
    15ac:	85 5b       	subi	r24, 0xB5	; 181
    15ae:	9f 4f       	sbci	r25, 0xFF	; 255
    15b0:	fc 01       	movw	r30, r24
    15b2:	70 81       	ld	r23, Z
    15b4:	f7 01       	movw	r30, r14
    15b6:	84 91       	lpm	r24, Z
    15b8:	90 e0       	ldi	r25, 0x00	; 0
    15ba:	06 2e       	mov	r0, r22
    15bc:	02 c0       	rjmp	.+4      	; 0x15c2 <u8g2_font_decode_glyph+0xa6>
    15be:	95 95       	asr	r25
    15c0:	87 95       	ror	r24
    15c2:	0a 94       	dec	r0
    15c4:	e2 f7       	brpl	.-8      	; 0x15be <u8g2_font_decode_glyph+0xa2>
    15c6:	16 2f       	mov	r17, r22
    15c8:	17 0f       	add	r17, r23
    15ca:	18 30       	cpi	r17, 0x08	; 8
    15cc:	88 f0       	brcs	.+34     	; 0x15f0 <u8g2_font_decode_glyph+0xd4>
    15ce:	2f 5f       	subi	r18, 0xFF	; 255
    15d0:	3f 4f       	sbci	r19, 0xFF	; 255
    15d2:	da 96       	adiw	r26, 0x3a	; 58
    15d4:	3c 93       	st	X, r19
    15d6:	2e 93       	st	-X, r18
    15d8:	d9 97       	sbiw	r26, 0x39	; 57
    15da:	f9 01       	movw	r30, r18
    15dc:	44 91       	lpm	r20, Z
    15de:	98 e0       	ldi	r25, 0x08	; 8
    15e0:	96 1b       	sub	r25, r22
    15e2:	01 c0       	rjmp	.+2      	; 0x15e6 <u8g2_font_decode_glyph+0xca>
    15e4:	44 0f       	add	r20, r20
    15e6:	9a 95       	dec	r25
    15e8:	ea f7       	brpl	.-6      	; 0x15e4 <u8g2_font_decode_glyph+0xc8>
    15ea:	84 2b       	or	r24, r20
    15ec:	18 50       	subi	r17, 0x08	; 8
    15ee:	79 01       	movw	r14, r18
    15f0:	41 e0       	ldi	r20, 0x01	; 1
    15f2:	50 e0       	ldi	r21, 0x00	; 0
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <u8g2_font_decode_glyph+0xdc>
    15f6:	44 0f       	add	r20, r20
    15f8:	7a 95       	dec	r23
    15fa:	ea f7       	brpl	.-6      	; 0x15f6 <u8g2_font_decode_glyph+0xda>
    15fc:	41 50       	subi	r20, 0x01	; 1
    15fe:	48 23       	and	r20, r24
    1600:	49 87       	std	Y+9, r20	; 0x09
    1602:	eb 81       	ldd	r30, Y+3	; 0x03
    1604:	fc 81       	ldd	r31, Y+4	; 0x04
    1606:	10 83       	st	Z, r17
    1608:	cd 01       	movw	r24, r26
    160a:	80 5c       	subi	r24, 0xC0	; 192
    160c:	9f 4f       	sbci	r25, 0xFF	; 255
    160e:	fc 01       	movw	r30, r24
    1610:	40 83       	st	Z, r20
    1612:	4d 01       	movw	r8, r26
    1614:	f3 e6       	ldi	r31, 0x63	; 99
    1616:	8f 0e       	add	r8, r31
    1618:	91 1c       	adc	r9, r1
    161a:	f4 01       	movw	r30, r8
    161c:	90 81       	ld	r25, Z
    161e:	1d 01       	movw	r2, r26
    1620:	f3 e4       	ldi	r31, 0x43	; 67
    1622:	2f 0e       	add	r2, r31
    1624:	31 1c       	adc	r3, r1
    1626:	f1 01       	movw	r30, r2
    1628:	90 83       	st	Z, r25
    162a:	ad 01       	movw	r20, r26
    162c:	4c 5b       	subi	r20, 0xBC	; 188
    162e:	5f 4f       	sbci	r21, 0xFF	; 255
    1630:	5e 83       	std	Y+6, r21	; 0x06
    1632:	4d 83       	std	Y+5, r20	; 0x05
    1634:	81 e0       	ldi	r24, 0x01	; 1
    1636:	91 11       	cpse	r25, r1
    1638:	80 e0       	ldi	r24, 0x00	; 0
    163a:	ed 81       	ldd	r30, Y+5	; 0x05
    163c:	fe 81       	ldd	r31, Y+6	; 0x06
    163e:	80 83       	st	Z, r24
    1640:	cd 01       	movw	r24, r26
    1642:	84 5b       	subi	r24, 0xB4	; 180
    1644:	9f 4f       	sbci	r25, 0xFF	; 255
    1646:	fc 01       	movw	r30, r24
    1648:	70 81       	ld	r23, Z
    164a:	f7 01       	movw	r30, r14
    164c:	84 91       	lpm	r24, Z
    164e:	90 e0       	ldi	r25, 0x00	; 0
    1650:	01 2e       	mov	r0, r17
    1652:	02 c0       	rjmp	.+4      	; 0x1658 <u8g2_font_decode_glyph+0x13c>
    1654:	95 95       	asr	r25
    1656:	87 95       	ror	r24
    1658:	0a 94       	dec	r0
    165a:	e2 f7       	brpl	.-8      	; 0x1654 <u8g2_font_decode_glyph+0x138>
    165c:	61 2f       	mov	r22, r17
    165e:	67 0f       	add	r22, r23
    1660:	68 30       	cpi	r22, 0x08	; 8
    1662:	88 f0       	brcs	.+34     	; 0x1686 <u8g2_font_decode_glyph+0x16a>
    1664:	2f 5f       	subi	r18, 0xFF	; 255
    1666:	3f 4f       	sbci	r19, 0xFF	; 255
    1668:	da 96       	adiw	r26, 0x3a	; 58
    166a:	3c 93       	st	X, r19
    166c:	2e 93       	st	-X, r18
    166e:	d9 97       	sbiw	r26, 0x39	; 57
    1670:	f9 01       	movw	r30, r18
    1672:	44 91       	lpm	r20, Z
    1674:	98 e0       	ldi	r25, 0x08	; 8
    1676:	91 1b       	sub	r25, r17
    1678:	01 c0       	rjmp	.+2      	; 0x167c <u8g2_font_decode_glyph+0x160>
    167a:	44 0f       	add	r20, r20
    167c:	9a 95       	dec	r25
    167e:	ea f7       	brpl	.-6      	; 0x167a <u8g2_font_decode_glyph+0x15e>
    1680:	84 2b       	or	r24, r20
    1682:	68 50       	subi	r22, 0x08	; 8
    1684:	79 01       	movw	r14, r18
    1686:	eb 81       	ldd	r30, Y+3	; 0x03
    1688:	fc 81       	ldd	r31, Y+4	; 0x04
    168a:	60 83       	st	Z, r22
    168c:	41 e0       	ldi	r20, 0x01	; 1
    168e:	50 e0       	ldi	r21, 0x00	; 0
    1690:	8a 01       	movw	r16, r20
    1692:	07 2e       	mov	r0, r23
    1694:	01 c0       	rjmp	.+2      	; 0x1698 <u8g2_font_decode_glyph+0x17c>
    1696:	00 0f       	add	r16, r16
    1698:	0a 94       	dec	r0
    169a:	ea f7       	brpl	.-6      	; 0x1696 <u8g2_font_decode_glyph+0x17a>
    169c:	01 50       	subi	r16, 0x01	; 1
    169e:	80 23       	and	r24, r16
    16a0:	9f ef       	ldi	r25, 0xFF	; 255
    16a2:	97 0f       	add	r25, r23
    16a4:	01 c0       	rjmp	.+2      	; 0x16a8 <u8g2_font_decode_glyph+0x18c>
    16a6:	44 0f       	add	r20, r20
    16a8:	9a 95       	dec	r25
    16aa:	ea f7       	brpl	.-6      	; 0x16a6 <u8g2_font_decode_glyph+0x18a>
    16ac:	78 2e       	mov	r7, r24
    16ae:	74 1a       	sub	r7, r20
    16b0:	cd 01       	movw	r24, r26
    16b2:	83 5b       	subi	r24, 0xB3	; 179
    16b4:	9f 4f       	sbci	r25, 0xFF	; 255
    16b6:	fc 01       	movw	r30, r24
    16b8:	00 81       	ld	r16, Z
    16ba:	f7 01       	movw	r30, r14
    16bc:	84 91       	lpm	r24, Z
    16be:	90 e0       	ldi	r25, 0x00	; 0
    16c0:	06 2e       	mov	r0, r22
    16c2:	02 c0       	rjmp	.+4      	; 0x16c8 <u8g2_font_decode_glyph+0x1ac>
    16c4:	95 95       	asr	r25
    16c6:	87 95       	ror	r24
    16c8:	0a 94       	dec	r0
    16ca:	e2 f7       	brpl	.-8      	; 0x16c4 <u8g2_font_decode_glyph+0x1a8>
    16cc:	10 2f       	mov	r17, r16
    16ce:	16 0f       	add	r17, r22
    16d0:	18 30       	cpi	r17, 0x08	; 8
    16d2:	88 f0       	brcs	.+34     	; 0x16f6 <u8g2_font_decode_glyph+0x1da>
    16d4:	2f 5f       	subi	r18, 0xFF	; 255
    16d6:	3f 4f       	sbci	r19, 0xFF	; 255
    16d8:	da 96       	adiw	r26, 0x3a	; 58
    16da:	3c 93       	st	X, r19
    16dc:	2e 93       	st	-X, r18
    16de:	d9 97       	sbiw	r26, 0x39	; 57
    16e0:	f9 01       	movw	r30, r18
    16e2:	44 91       	lpm	r20, Z
    16e4:	98 e0       	ldi	r25, 0x08	; 8
    16e6:	96 1b       	sub	r25, r22
    16e8:	01 c0       	rjmp	.+2      	; 0x16ec <u8g2_font_decode_glyph+0x1d0>
    16ea:	44 0f       	add	r20, r20
    16ec:	9a 95       	dec	r25
    16ee:	ea f7       	brpl	.-6      	; 0x16ea <u8g2_font_decode_glyph+0x1ce>
    16f0:	84 2b       	or	r24, r20
    16f2:	18 50       	subi	r17, 0x08	; 8
    16f4:	79 01       	movw	r14, r18
    16f6:	41 e0       	ldi	r20, 0x01	; 1
    16f8:	50 e0       	ldi	r21, 0x00	; 0
    16fa:	ba 01       	movw	r22, r20
    16fc:	00 2e       	mov	r0, r16
    16fe:	01 c0       	rjmp	.+2      	; 0x1702 <u8g2_font_decode_glyph+0x1e6>
    1700:	66 0f       	add	r22, r22
    1702:	0a 94       	dec	r0
    1704:	ea f7       	brpl	.-6      	; 0x1700 <u8g2_font_decode_glyph+0x1e4>
    1706:	61 50       	subi	r22, 0x01	; 1
    1708:	86 23       	and	r24, r22
    170a:	eb 81       	ldd	r30, Y+3	; 0x03
    170c:	fc 81       	ldd	r31, Y+4	; 0x04
    170e:	10 83       	st	Z, r17
    1710:	01 50       	subi	r16, 0x01	; 1
    1712:	01 c0       	rjmp	.+2      	; 0x1716 <u8g2_font_decode_glyph+0x1fa>
    1714:	44 0f       	add	r20, r20
    1716:	0a 95       	dec	r16
    1718:	ea f7       	brpl	.-6      	; 0x1714 <u8g2_font_decode_glyph+0x1f8>
    171a:	99 85       	ldd	r25, Y+9	; 0x09
    171c:	94 1b       	sub	r25, r20
    171e:	ad 01       	movw	r20, r26
    1720:	42 5b       	subi	r20, 0xB2	; 178
    1722:	5f 4f       	sbci	r21, 0xFF	; 255
    1724:	fa 01       	movw	r30, r20
    1726:	60 81       	ld	r22, Z
    1728:	f7 01       	movw	r30, r14
    172a:	44 91       	lpm	r20, Z
    172c:	50 e0       	ldi	r21, 0x00	; 0
    172e:	01 2e       	mov	r0, r17
    1730:	02 c0       	rjmp	.+4      	; 0x1736 <u8g2_font_decode_glyph+0x21a>
    1732:	55 95       	asr	r21
    1734:	47 95       	ror	r20
    1736:	0a 94       	dec	r0
    1738:	e2 f7       	brpl	.-8      	; 0x1732 <u8g2_font_decode_glyph+0x216>
    173a:	76 2f       	mov	r23, r22
    173c:	71 0f       	add	r23, r17
    173e:	78 30       	cpi	r23, 0x08	; 8
    1740:	78 f0       	brcs	.+30     	; 0x1760 <u8g2_font_decode_glyph+0x244>
    1742:	f9 01       	movw	r30, r18
    1744:	31 96       	adiw	r30, 0x01	; 1
    1746:	da 96       	adiw	r26, 0x3a	; 58
    1748:	fc 93       	st	X, r31
    174a:	ee 93       	st	-X, r30
    174c:	d9 97       	sbiw	r26, 0x39	; 57
    174e:	24 91       	lpm	r18, Z
    1750:	58 e0       	ldi	r21, 0x08	; 8
    1752:	51 1b       	sub	r21, r17
    1754:	01 c0       	rjmp	.+2      	; 0x1758 <u8g2_font_decode_glyph+0x23c>
    1756:	22 0f       	add	r18, r18
    1758:	5a 95       	dec	r21
    175a:	ea f7       	brpl	.-6      	; 0x1756 <u8g2_font_decode_glyph+0x23a>
    175c:	42 2b       	or	r20, r18
    175e:	78 50       	subi	r23, 0x08	; 8
    1760:	eb 81       	ldd	r30, Y+3	; 0x03
    1762:	fc 81       	ldd	r31, Y+4	; 0x04
    1764:	70 83       	st	Z, r23
    1766:	21 e0       	ldi	r18, 0x01	; 1
    1768:	30 e0       	ldi	r19, 0x00	; 0
    176a:	f9 01       	movw	r30, r18
    176c:	06 2e       	mov	r0, r22
    176e:	01 c0       	rjmp	.+2      	; 0x1772 <u8g2_font_decode_glyph+0x256>
    1770:	ee 0f       	add	r30, r30
    1772:	0a 94       	dec	r0
    1774:	ea f7       	brpl	.-6      	; 0x1770 <u8g2_font_decode_glyph+0x254>
    1776:	e1 50       	subi	r30, 0x01	; 1
    1778:	4e 23       	and	r20, r30
    177a:	61 50       	subi	r22, 0x01	; 1
    177c:	01 c0       	rjmp	.+2      	; 0x1780 <u8g2_font_decode_glyph+0x264>
    177e:	22 0f       	add	r18, r18
    1780:	6a 95       	dec	r22
    1782:	ea f7       	brpl	.-6      	; 0x177e <u8g2_font_decode_glyph+0x262>
    1784:	42 1b       	sub	r20, r18
    1786:	48 8b       	std	Y+16, r20	; 0x10
    1788:	1c 14       	cp	r1, r12
    178a:	0c f0       	brlt	.+2      	; 0x178e <u8g2_font_decode_glyph+0x272>
    178c:	5c c1       	rjmp	.+696    	; 0x1a46 <u8g2_font_decode_glyph+0x52a>
    178e:	7d 01       	movw	r14, r26
    1790:	5d 01       	movw	r10, r26
    1792:	f5 e4       	ldi	r31, 0x45	; 69
    1794:	af 0e       	add	r10, r31
    1796:	b1 1c       	adc	r11, r1
    1798:	d5 01       	movw	r26, r10
    179a:	1c 91       	ld	r17, X
    179c:	89 0f       	add	r24, r25
    179e:	08 2f       	mov	r16, r24
    17a0:	01 95       	neg	r16
    17a2:	21 2f       	mov	r18, r17
    17a4:	40 2f       	mov	r20, r16
    17a6:	67 2d       	mov	r22, r7
    17a8:	f7 01       	movw	r30, r14
    17aa:	83 ad       	ldd	r24, Z+59	; 0x3b
    17ac:	0e 94 81 0a 	call	0x1502	; 0x1502 <u8g2_add_vector_x>
    17b0:	d8 2e       	mov	r13, r24
    17b2:	d7 01       	movw	r26, r14
    17b4:	db 96       	adiw	r26, 0x3b	; 59
    17b6:	8c 93       	st	X, r24
    17b8:	db 97       	sbiw	r26, 0x3b	; 59
    17ba:	21 2f       	mov	r18, r17
    17bc:	40 2f       	mov	r20, r16
    17be:	67 2d       	mov	r22, r7
    17c0:	dc 96       	adiw	r26, 0x3c	; 60
    17c2:	8c 91       	ld	r24, X
    17c4:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <u8g2_add_vector_y>
    17c8:	f7 01       	movw	r30, r14
    17ca:	84 af       	std	Z+60, r24	; 0x3c
    17cc:	11 30       	cpi	r17, 0x01	; 1
    17ce:	09 f4       	brne	.+2      	; 0x17d2 <u8g2_font_decode_glyph+0x2b6>
    17d0:	8a c1       	rjmp	.+788    	; 0x1ae6 <u8g2_font_decode_glyph+0x5ca>
    17d2:	08 f4       	brcc	.+2      	; 0x17d6 <u8g2_font_decode_glyph+0x2ba>
    17d4:	90 c1       	rjmp	.+800    	; 0x1af6 <u8g2_font_decode_glyph+0x5da>
    17d6:	12 30       	cpi	r17, 0x02	; 2
    17d8:	09 f4       	brne	.+2      	; 0x17dc <u8g2_font_decode_glyph+0x2c0>
    17da:	79 c1       	rjmp	.+754    	; 0x1ace <u8g2_font_decode_glyph+0x5b2>
    17dc:	13 30       	cpi	r17, 0x03	; 3
    17de:	09 f0       	breq	.+2      	; 0x17e2 <u8g2_font_decode_glyph+0x2c6>
    17e0:	8f c1       	rjmp	.+798    	; 0x1b00 <u8g2_font_decode_glyph+0x5e4>
    17e2:	29 85       	ldd	r18, Y+9	; 0x09
    17e4:	2d 0d       	add	r18, r13
    17e6:	98 2f       	mov	r25, r24
    17e8:	9c 19       	sub	r25, r12
    17ea:	01 e0       	ldi	r16, 0x01	; 1
    17ec:	08 0f       	add	r16, r24
    17ee:	81 e0       	ldi	r24, 0x01	; 1
    17f0:	89 0f       	add	r24, r25
    17f2:	48 2f       	mov	r20, r24
    17f4:	6d 2d       	mov	r22, r13
    17f6:	c7 01       	movw	r24, r14
    17f8:	0e 94 24 10 	call	0x2048	; 0x2048 <u8g2_IsIntersection>
    17fc:	88 23       	and	r24, r24
    17fe:	09 f4       	brne	.+2      	; 0x1802 <u8g2_font_decode_glyph+0x2e6>
    1800:	22 c1       	rjmp	.+580    	; 0x1a46 <u8g2_font_decode_glyph+0x52a>
    1802:	d7 01       	movw	r26, r14
    1804:	dd 96       	adiw	r26, 0x3d	; 61
    1806:	1c 92       	st	X, r1
    1808:	dd 97       	sbiw	r26, 0x3d	; 61
    180a:	de 96       	adiw	r26, 0x3e	; 62
    180c:	1c 92       	st	X, r1
    180e:	de 97       	sbiw	r26, 0x3e	; 62
    1810:	eb 81       	ldd	r30, Y+3	; 0x03
    1812:	fc 81       	ldd	r31, Y+4	; 0x04
    1814:	30 81       	ld	r19, Z
    1816:	d9 96       	adiw	r26, 0x39	; 57
    1818:	ed 91       	ld	r30, X+
    181a:	fc 91       	ld	r31, X
    181c:	da 97       	sbiw	r26, 0x3a	; 58
    181e:	a7 01       	movw	r20, r14
    1820:	48 5b       	subi	r20, 0xB8	; 184
    1822:	5f 4f       	sbci	r21, 0xFF	; 255
    1824:	5d 87       	std	Y+13, r21	; 0x0d
    1826:	4c 87       	std	Y+12, r20	; 0x0c
    1828:	b7 01       	movw	r22, r14
    182a:	67 5b       	subi	r22, 0xB7	; 183
    182c:	7f 4f       	sbci	r23, 0xFF	; 255
    182e:	7f 87       	std	Y+15, r23	; 0x0f
    1830:	6e 87       	std	Y+14, r22	; 0x0e
    1832:	c7 01       	movw	r24, r14
    1834:	8e 5b       	subi	r24, 0xBE	; 190
    1836:	9f 4f       	sbci	r25, 0xFF	; 255
    1838:	9b 87       	std	Y+11, r25	; 0x0b
    183a:	8a 87       	std	Y+10, r24	; 0x0a
    183c:	88 e0       	ldi	r24, 0x08	; 8
    183e:	58 2e       	mov	r5, r24
    1840:	23 2f       	mov	r18, r19
    1842:	3a 82       	std	Y+2, r3	; 0x02
    1844:	29 82       	std	Y+1, r2	; 0x01
    1846:	ac 85       	ldd	r26, Y+12	; 0x0c
    1848:	bd 85       	ldd	r27, Y+13	; 0x0d
    184a:	4c 91       	ld	r20, X
    184c:	84 91       	lpm	r24, Z
    184e:	90 e0       	ldi	r25, 0x00	; 0
    1850:	02 2e       	mov	r0, r18
    1852:	02 c0       	rjmp	.+4      	; 0x1858 <u8g2_font_decode_glyph+0x33c>
    1854:	95 95       	asr	r25
    1856:	87 95       	ror	r24
    1858:	0a 94       	dec	r0
    185a:	e2 f7       	brpl	.-8      	; 0x1854 <u8g2_font_decode_glyph+0x338>
    185c:	34 2f       	mov	r19, r20
    185e:	32 0f       	add	r19, r18
    1860:	38 30       	cpi	r19, 0x08	; 8
    1862:	78 f0       	brcs	.+30     	; 0x1882 <u8g2_font_decode_glyph+0x366>
    1864:	31 96       	adiw	r30, 0x01	; 1
    1866:	d7 01       	movw	r26, r14
    1868:	da 96       	adiw	r26, 0x3a	; 58
    186a:	fc 93       	st	X, r31
    186c:	ee 93       	st	-X, r30
    186e:	d9 97       	sbiw	r26, 0x39	; 57
    1870:	64 91       	lpm	r22, Z
    1872:	95 2d       	mov	r25, r5
    1874:	92 1b       	sub	r25, r18
    1876:	01 c0       	rjmp	.+2      	; 0x187a <u8g2_font_decode_glyph+0x35e>
    1878:	66 0f       	add	r22, r22
    187a:	9a 95       	dec	r25
    187c:	ea f7       	brpl	.-6      	; 0x1878 <u8g2_font_decode_glyph+0x35c>
    187e:	86 2b       	or	r24, r22
    1880:	38 50       	subi	r19, 0x08	; 8
    1882:	61 e0       	ldi	r22, 0x01	; 1
    1884:	70 e0       	ldi	r23, 0x00	; 0
    1886:	02 c0       	rjmp	.+4      	; 0x188c <u8g2_font_decode_glyph+0x370>
    1888:	66 0f       	add	r22, r22
    188a:	77 1f       	adc	r23, r23
    188c:	4a 95       	dec	r20
    188e:	e2 f7       	brpl	.-8      	; 0x1888 <u8g2_font_decode_glyph+0x36c>
    1890:	ab 01       	movw	r20, r22
    1892:	41 50       	subi	r20, 0x01	; 1
    1894:	48 23       	and	r20, r24
    1896:	48 87       	std	Y+8, r20	; 0x08
    1898:	ab 81       	ldd	r26, Y+3	; 0x03
    189a:	bc 81       	ldd	r27, Y+4	; 0x04
    189c:	3c 93       	st	X, r19
    189e:	ae 85       	ldd	r26, Y+14	; 0x0e
    18a0:	bf 85       	ldd	r27, Y+15	; 0x0f
    18a2:	7c 91       	ld	r23, X
    18a4:	84 91       	lpm	r24, Z
    18a6:	90 e0       	ldi	r25, 0x00	; 0
    18a8:	03 2e       	mov	r0, r19
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <u8g2_font_decode_glyph+0x394>
    18ac:	95 95       	asr	r25
    18ae:	87 95       	ror	r24
    18b0:	0a 94       	dec	r0
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <u8g2_font_decode_glyph+0x390>
    18b4:	67 2f       	mov	r22, r23
    18b6:	63 0f       	add	r22, r19
    18b8:	68 30       	cpi	r22, 0x08	; 8
    18ba:	90 f0       	brcs	.+36     	; 0x18e0 <u8g2_font_decode_glyph+0x3c4>
    18bc:	31 96       	adiw	r30, 0x01	; 1
    18be:	d7 01       	movw	r26, r14
    18c0:	da 96       	adiw	r26, 0x3a	; 58
    18c2:	fc 93       	st	X, r31
    18c4:	ee 93       	st	-X, r30
    18c6:	d9 97       	sbiw	r26, 0x39	; 57
    18c8:	24 91       	lpm	r18, Z
    18ca:	42 2f       	mov	r20, r18
    18cc:	50 e0       	ldi	r21, 0x00	; 0
    18ce:	95 2d       	mov	r25, r5
    18d0:	93 1b       	sub	r25, r19
    18d2:	9a 01       	movw	r18, r20
    18d4:	01 c0       	rjmp	.+2      	; 0x18d8 <u8g2_font_decode_glyph+0x3bc>
    18d6:	22 0f       	add	r18, r18
    18d8:	9a 95       	dec	r25
    18da:	ea f7       	brpl	.-6      	; 0x18d6 <u8g2_font_decode_glyph+0x3ba>
    18dc:	82 2b       	or	r24, r18
    18de:	68 50       	subi	r22, 0x08	; 8
    18e0:	21 e0       	ldi	r18, 0x01	; 1
    18e2:	30 e0       	ldi	r19, 0x00	; 0
    18e4:	01 c0       	rjmp	.+2      	; 0x18e8 <u8g2_font_decode_glyph+0x3cc>
    18e6:	22 0f       	add	r18, r18
    18e8:	7a 95       	dec	r23
    18ea:	ea f7       	brpl	.-6      	; 0x18e6 <u8g2_font_decode_glyph+0x3ca>
    18ec:	21 50       	subi	r18, 0x01	; 1
    18ee:	28 23       	and	r18, r24
    18f0:	2f 83       	std	Y+7, r18	; 0x07
    18f2:	eb 81       	ldd	r30, Y+3	; 0x03
    18f4:	fc 81       	ldd	r31, Y+4	; 0x04
    18f6:	60 83       	st	Z, r22
    18f8:	d7 01       	movw	r26, r14
    18fa:	dd 96       	adiw	r26, 0x3d	; 61
    18fc:	bc 91       	ld	r27, X
    18fe:	b9 8b       	std	Y+17, r27	; 0x11
    1900:	f7 01       	movw	r30, r14
    1902:	d6 ac       	ldd	r13, Z+62	; 0x3e
    1904:	7b 2e       	mov	r7, r27
    1906:	1d 2d       	mov	r17, r13
    1908:	68 84       	ldd	r6, Y+8	; 0x08
    190a:	d7 01       	movw	r26, r14
    190c:	df 96       	adiw	r26, 0x3f	; 63
    190e:	4c 90       	ld	r4, X
    1910:	df 97       	sbiw	r26, 0x3f	; 63
    1912:	db 96       	adiw	r26, 0x3b	; 59
    1914:	cc 90       	ld	r12, X
    1916:	db 97       	sbiw	r26, 0x3b	; 59
    1918:	dc 96       	adiw	r26, 0x3c	; 60
    191a:	0c 91       	ld	r16, X
    191c:	30 2e       	mov	r3, r16
    191e:	05 c0       	rjmp	.+10     	; 0x192a <u8g2_font_decode_glyph+0x40e>
    1920:	6d 14       	cp	r6, r13
    1922:	68 f1       	brcs	.+90     	; 0x197e <u8g2_font_decode_glyph+0x462>
    1924:	6d 18       	sub	r6, r13
    1926:	1f 5f       	subi	r17, 0xFF	; 255
    1928:	71 2c       	mov	r7, r1
    192a:	d4 2c       	mov	r13, r4
    192c:	d7 18       	sub	r13, r7
    192e:	f5 01       	movw	r30, r10
    1930:	00 81       	ld	r16, Z
    1932:	20 2f       	mov	r18, r16
    1934:	41 2f       	mov	r20, r17
    1936:	67 2d       	mov	r22, r7
    1938:	8c 2d       	mov	r24, r12
    193a:	0e 94 81 0a 	call	0x1502	; 0x1502 <u8g2_add_vector_x>
    193e:	28 2e       	mov	r2, r24
    1940:	20 2f       	mov	r18, r16
    1942:	41 2f       	mov	r20, r17
    1944:	67 2d       	mov	r22, r7
    1946:	83 2d       	mov	r24, r3
    1948:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <u8g2_add_vector_y>
    194c:	aa 85       	ldd	r26, Y+10	; 0x0a
    194e:	bb 85       	ldd	r27, Y+11	; 0x0b
    1950:	9c 91       	ld	r25, X
    1952:	91 11       	cpse	r25, r1
    1954:	e5 cf       	rjmp	.-54     	; 0x1920 <u8g2_font_decode_glyph+0x404>
    1956:	ed 81       	ldd	r30, Y+5	; 0x05
    1958:	fe 81       	ldd	r31, Y+6	; 0x06
    195a:	90 81       	ld	r25, Z
    195c:	d4 01       	movw	r26, r8
    195e:	9c 93       	st	X, r25
    1960:	2d 2d       	mov	r18, r13
    1962:	6d 14       	cp	r6, r13
    1964:	08 f4       	brcc	.+2      	; 0x1968 <u8g2_font_decode_glyph+0x44c>
    1966:	26 2d       	mov	r18, r6
    1968:	48 2f       	mov	r20, r24
    196a:	62 2d       	mov	r22, r2
    196c:	c7 01       	movw	r24, r14
    196e:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
    1972:	f7 01       	movw	r30, r14
    1974:	47 ac       	ldd	r4, Z+63	; 0x3f
    1976:	c3 ac       	ldd	r12, Z+59	; 0x3b
    1978:	34 ac       	ldd	r3, Z+60	; 0x3c
    197a:	6d 14       	cp	r6, r13
    197c:	98 f6       	brcc	.-90     	; 0x1924 <u8g2_font_decode_glyph+0x408>
    197e:	76 0c       	add	r7, r6
    1980:	d7 01       	movw	r26, r14
    1982:	dd 96       	adiw	r26, 0x3d	; 61
    1984:	7c 92       	st	X, r7
    1986:	dd 97       	sbiw	r26, 0x3d	; 61
    1988:	de 96       	adiw	r26, 0x3e	; 62
    198a:	1c 93       	st	X, r17
    198c:	6f 80       	ldd	r6, Y+7	; 0x07
    198e:	8c 2d       	mov	r24, r12
    1990:	d3 2c       	mov	r13, r3
    1992:	47 18       	sub	r4, r7
    1994:	64 14       	cp	r6, r4
    1996:	08 f0       	brcs	.+2      	; 0x199a <u8g2_font_decode_glyph+0x47e>
    1998:	74 c0       	rjmp	.+232    	; 0x1a82 <u8g2_font_decode_glyph+0x566>
    199a:	0d 2d       	mov	r16, r13
    199c:	f5 01       	movw	r30, r10
    199e:	40 80       	ld	r4, Z
    19a0:	d1 2e       	mov	r13, r17
    19a2:	24 2d       	mov	r18, r4
    19a4:	41 2f       	mov	r20, r17
    19a6:	67 2d       	mov	r22, r7
    19a8:	0e 94 81 0a 	call	0x1502	; 0x1502 <u8g2_add_vector_x>
    19ac:	c8 2e       	mov	r12, r24
    19ae:	24 2d       	mov	r18, r4
    19b0:	41 2f       	mov	r20, r17
    19b2:	67 2d       	mov	r22, r7
    19b4:	80 2f       	mov	r24, r16
    19b6:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <u8g2_add_vector_y>
    19ba:	a9 81       	ldd	r26, Y+1	; 0x01
    19bc:	ba 81       	ldd	r27, Y+2	; 0x02
    19be:	9c 91       	ld	r25, X
    19c0:	f4 01       	movw	r30, r8
    19c2:	90 83       	st	Z, r25
    19c4:	04 2d       	mov	r16, r4
    19c6:	26 2d       	mov	r18, r6
    19c8:	48 2f       	mov	r20, r24
    19ca:	6c 2d       	mov	r22, r12
    19cc:	c7 01       	movw	r24, r14
    19ce:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
    19d2:	76 0c       	add	r7, r6
    19d4:	d7 01       	movw	r26, r14
    19d6:	dd 96       	adiw	r26, 0x3d	; 61
    19d8:	7c 92       	st	X, r7
    19da:	dd 97       	sbiw	r26, 0x3d	; 61
    19dc:	de 96       	adiw	r26, 0x3e	; 62
    19de:	1c 93       	st	X, r17
    19e0:	de 97       	sbiw	r26, 0x3e	; 62
    19e2:	eb 81       	ldd	r30, Y+3	; 0x03
    19e4:	fc 81       	ldd	r31, Y+4	; 0x04
    19e6:	30 81       	ld	r19, Z
    19e8:	d9 96       	adiw	r26, 0x39	; 57
    19ea:	ed 91       	ld	r30, X+
    19ec:	fc 91       	ld	r31, X
    19ee:	da 97       	sbiw	r26, 0x3a	; 58
    19f0:	84 91       	lpm	r24, Z
    19f2:	90 e0       	ldi	r25, 0x00	; 0
    19f4:	03 2e       	mov	r0, r19
    19f6:	02 c0       	rjmp	.+4      	; 0x19fc <u8g2_font_decode_glyph+0x4e0>
    19f8:	95 95       	asr	r25
    19fa:	87 95       	ror	r24
    19fc:	0a 94       	dec	r0
    19fe:	e2 f7       	brpl	.-8      	; 0x19f8 <u8g2_font_decode_glyph+0x4dc>
    1a00:	21 e0       	ldi	r18, 0x01	; 1
    1a02:	23 0f       	add	r18, r19
    1a04:	28 30       	cpi	r18, 0x08	; 8
    1a06:	80 f0       	brcs	.+32     	; 0x1a28 <u8g2_font_decode_glyph+0x50c>
    1a08:	31 96       	adiw	r30, 0x01	; 1
    1a0a:	d7 01       	movw	r26, r14
    1a0c:	da 96       	adiw	r26, 0x3a	; 58
    1a0e:	fc 93       	st	X, r31
    1a10:	ee 93       	st	-X, r30
    1a12:	d9 97       	sbiw	r26, 0x39	; 57
    1a14:	44 91       	lpm	r20, Z
    1a16:	95 2d       	mov	r25, r5
    1a18:	93 1b       	sub	r25, r19
    1a1a:	01 c0       	rjmp	.+2      	; 0x1a1e <u8g2_font_decode_glyph+0x502>
    1a1c:	44 0f       	add	r20, r20
    1a1e:	9a 95       	dec	r25
    1a20:	ea f7       	brpl	.-6      	; 0x1a1c <u8g2_font_decode_glyph+0x500>
    1a22:	84 2b       	or	r24, r20
    1a24:	29 ef       	ldi	r18, 0xF9	; 249
    1a26:	23 0f       	add	r18, r19
    1a28:	ab 81       	ldd	r26, Y+3	; 0x03
    1a2a:	bc 81       	ldd	r27, Y+4	; 0x04
    1a2c:	2c 93       	st	X, r18
    1a2e:	80 fd       	sbrc	r24, 0
    1a30:	6a cf       	rjmp	.-300    	; 0x1906 <u8g2_font_decode_glyph+0x3ea>
    1a32:	b9 85       	ldd	r27, Y+9	; 0x09
    1a34:	1b 17       	cp	r17, r27
    1a36:	0c f4       	brge	.+2      	; 0x1a3a <u8g2_font_decode_glyph+0x51e>
    1a38:	06 cf       	rjmp	.-500    	; 0x1846 <u8g2_font_decode_glyph+0x32a>
    1a3a:	29 80       	ldd	r2, Y+1	; 0x01
    1a3c:	3a 80       	ldd	r3, Y+2	; 0x02
    1a3e:	f1 01       	movw	r30, r2
    1a40:	80 81       	ld	r24, Z
    1a42:	d4 01       	movw	r26, r8
    1a44:	8c 93       	st	X, r24
    1a46:	88 89       	ldd	r24, Y+16	; 0x10
    1a48:	61 96       	adiw	r28, 0x11	; 17
    1a4a:	0f b6       	in	r0, 0x3f	; 63
    1a4c:	f8 94       	cli
    1a4e:	de bf       	out	0x3e, r29	; 62
    1a50:	0f be       	out	0x3f, r0	; 63
    1a52:	cd bf       	out	0x3d, r28	; 61
    1a54:	df 91       	pop	r29
    1a56:	cf 91       	pop	r28
    1a58:	1f 91       	pop	r17
    1a5a:	0f 91       	pop	r16
    1a5c:	ff 90       	pop	r15
    1a5e:	ef 90       	pop	r14
    1a60:	df 90       	pop	r13
    1a62:	cf 90       	pop	r12
    1a64:	bf 90       	pop	r11
    1a66:	af 90       	pop	r10
    1a68:	9f 90       	pop	r9
    1a6a:	8f 90       	pop	r8
    1a6c:	7f 90       	pop	r7
    1a6e:	6f 90       	pop	r6
    1a70:	5f 90       	pop	r5
    1a72:	4f 90       	pop	r4
    1a74:	3f 90       	pop	r3
    1a76:	2f 90       	pop	r2
    1a78:	08 95       	ret
    1a7a:	7b 01       	movw	r14, r22
    1a7c:	9b 01       	movw	r18, r22
    1a7e:	64 2f       	mov	r22, r20
    1a80:	86 cd       	rjmp	.-1268   	; 0x158e <u8g2_font_decode_glyph+0x72>
    1a82:	f5 01       	movw	r30, r10
    1a84:	00 81       	ld	r16, Z
    1a86:	20 2f       	mov	r18, r16
    1a88:	41 2f       	mov	r20, r17
    1a8a:	67 2d       	mov	r22, r7
    1a8c:	0e 94 81 0a 	call	0x1502	; 0x1502 <u8g2_add_vector_x>
    1a90:	c8 2e       	mov	r12, r24
    1a92:	20 2f       	mov	r18, r16
    1a94:	41 2f       	mov	r20, r17
    1a96:	67 2d       	mov	r22, r7
    1a98:	8d 2d       	mov	r24, r13
    1a9a:	0e 94 74 0a 	call	0x14e8	; 0x14e8 <u8g2_add_vector_y>
    1a9e:	a9 81       	ldd	r26, Y+1	; 0x01
    1aa0:	ba 81       	ldd	r27, Y+2	; 0x02
    1aa2:	9c 91       	ld	r25, X
    1aa4:	f4 01       	movw	r30, r8
    1aa6:	90 83       	st	Z, r25
    1aa8:	24 2d       	mov	r18, r4
    1aaa:	48 2f       	mov	r20, r24
    1aac:	6c 2d       	mov	r22, r12
    1aae:	c7 01       	movw	r24, r14
    1ab0:	0e 94 7a 0f 	call	0x1ef4	; 0x1ef4 <u8g2_DrawHVLine>
    1ab4:	64 18       	sub	r6, r4
    1ab6:	1f 5f       	subi	r17, 0xFF	; 255
    1ab8:	71 2c       	mov	r7, r1
    1aba:	d7 01       	movw	r26, r14
    1abc:	df 96       	adiw	r26, 0x3f	; 63
    1abe:	4c 90       	ld	r4, X
    1ac0:	df 97       	sbiw	r26, 0x3f	; 63
    1ac2:	db 96       	adiw	r26, 0x3b	; 59
    1ac4:	8c 91       	ld	r24, X
    1ac6:	db 97       	sbiw	r26, 0x3b	; 59
    1ac8:	dc 96       	adiw	r26, 0x3c	; 60
    1aca:	dc 90       	ld	r13, X
    1acc:	62 cf       	rjmp	.-316    	; 0x1992 <u8g2_font_decode_glyph+0x476>
    1ace:	91 e0       	ldi	r25, 0x01	; 1
    1ad0:	39 2f       	mov	r19, r25
    1ad2:	3c 19       	sub	r19, r12
    1ad4:	21 e0       	ldi	r18, 0x01	; 1
    1ad6:	2d 0d       	add	r18, r13
    1ad8:	49 85       	ldd	r20, Y+9	; 0x09
    1ada:	94 1b       	sub	r25, r20
    1adc:	01 e0       	ldi	r16, 0x01	; 1
    1ade:	08 0f       	add	r16, r24
    1ae0:	89 0f       	add	r24, r25
    1ae2:	d3 0e       	add	r13, r19
    1ae4:	86 ce       	rjmp	.-756    	; 0x17f2 <u8g2_font_decode_glyph+0x2d6>
    1ae6:	f9 85       	ldd	r31, Y+9	; 0x09
    1ae8:	1f 1b       	sub	r17, r31
    1aea:	21 e0       	ldi	r18, 0x01	; 1
    1aec:	2d 0d       	add	r18, r13
    1aee:	0c 2d       	mov	r16, r12
    1af0:	08 0f       	add	r16, r24
    1af2:	d1 0e       	add	r13, r17
    1af4:	7e ce       	rjmp	.-772    	; 0x17f2 <u8g2_font_decode_glyph+0x2d6>
    1af6:	2c 2d       	mov	r18, r12
    1af8:	2d 0d       	add	r18, r13
    1afa:	09 85       	ldd	r16, Y+9	; 0x09
    1afc:	08 0f       	add	r16, r24
    1afe:	79 ce       	rjmp	.-782    	; 0x17f2 <u8g2_font_decode_glyph+0x2d6>
    1b00:	08 2f       	mov	r16, r24
    1b02:	2d 2d       	mov	r18, r13
    1b04:	76 ce       	rjmp	.-788    	; 0x17f2 <u8g2_font_decode_glyph+0x2d6>

00001b06 <u8g2_font_get_glyph_data>:
    1b06:	ef 92       	push	r14
    1b08:	ff 92       	push	r15
    1b0a:	0f 93       	push	r16
    1b0c:	1f 93       	push	r17
    1b0e:	cf 93       	push	r28
    1b10:	df 93       	push	r29
    1b12:	fc 01       	movw	r30, r24
    1b14:	c5 a9       	ldd	r28, Z+53	; 0x35
    1b16:	d6 a9       	ldd	r29, Z+54	; 0x36
    1b18:	67 96       	adiw	r28, 0x17	; 23
    1b1a:	6f 3f       	cpi	r22, 0xFF	; 255
    1b1c:	71 05       	cpc	r23, r1
    1b1e:	09 f0       	breq	.+2      	; 0x1b22 <u8g2_font_get_glyph_data+0x1c>
    1b20:	58 f4       	brcc	.+22     	; 0x1b38 <u8g2_font_get_glyph_data+0x32>
    1b22:	61 36       	cpi	r22, 0x61	; 97
    1b24:	71 05       	cpc	r23, r1
    1b26:	08 f4       	brcc	.+2      	; 0x1b2a <u8g2_font_get_glyph_data+0x24>
    1b28:	3b c0       	rjmp	.+118    	; 0x1ba0 <u8g2_font_get_glyph_data+0x9a>
    1b2a:	e7 5a       	subi	r30, 0xA7	; 167
    1b2c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b2e:	80 81       	ld	r24, Z
    1b30:	91 81       	ldd	r25, Z+1	; 0x01
    1b32:	c8 0f       	add	r28, r24
    1b34:	d9 1f       	adc	r29, r25
    1b36:	49 c0       	rjmp	.+146    	; 0x1bca <u8g2_font_get_glyph_data+0xc4>
    1b38:	8b 01       	movw	r16, r22
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e5 5a       	subi	r30, 0xA5	; 165
    1b3e:	ff 4f       	sbci	r31, 0xFF	; 255
    1b40:	80 81       	ld	r24, Z
    1b42:	91 81       	ldd	r25, Z+1	; 0x01
    1b44:	c8 0f       	add	r28, r24
    1b46:	d9 1f       	adc	r29, r25
    1b48:	7e 01       	movw	r14, r28
    1b4a:	c7 01       	movw	r24, r14
    1b4c:	0e 94 5d 0a 	call	0x14ba	; 0x14ba <u8g2_font_get_word.constprop.2>
    1b50:	c8 0f       	add	r28, r24
    1b52:	d9 1f       	adc	r29, r25
    1b54:	c7 01       	movw	r24, r14
    1b56:	0e 94 67 0a 	call	0x14ce	; 0x14ce <u8g2_font_get_word.constprop.3>
    1b5a:	f4 e0       	ldi	r31, 0x04	; 4
    1b5c:	ef 0e       	add	r14, r31
    1b5e:	f1 1c       	adc	r15, r1
    1b60:	80 17       	cp	r24, r16
    1b62:	91 07       	cpc	r25, r17
    1b64:	90 f3       	brcs	.-28     	; 0x1b4a <u8g2_font_get_glyph_data+0x44>
    1b66:	09 c0       	rjmp	.+18     	; 0x1b7a <u8g2_font_get_glyph_data+0x74>
    1b68:	08 17       	cp	r16, r24
    1b6a:	19 07       	cpc	r17, r25
    1b6c:	09 f4       	brne	.+2      	; 0x1b70 <u8g2_font_get_glyph_data+0x6a>
    1b6e:	34 c0       	rjmp	.+104    	; 0x1bd8 <u8g2_font_get_glyph_data+0xd2>
    1b70:	fe 01       	movw	r30, r28
    1b72:	32 96       	adiw	r30, 0x02	; 2
    1b74:	e4 91       	lpm	r30, Z
    1b76:	ce 0f       	add	r28, r30
    1b78:	d1 1d       	adc	r29, r1
    1b7a:	fe 01       	movw	r30, r28
    1b7c:	84 91       	lpm	r24, Z
    1b7e:	90 e0       	ldi	r25, 0x00	; 0
    1b80:	98 2f       	mov	r25, r24
    1b82:	88 27       	eor	r24, r24
    1b84:	31 96       	adiw	r30, 0x01	; 1
    1b86:	e4 91       	lpm	r30, Z
    1b88:	8e 2b       	or	r24, r30
    1b8a:	00 97       	sbiw	r24, 0x00	; 0
    1b8c:	69 f7       	brne	.-38     	; 0x1b68 <u8g2_font_get_glyph_data+0x62>
    1b8e:	80 e0       	ldi	r24, 0x00	; 0
    1b90:	90 e0       	ldi	r25, 0x00	; 0
    1b92:	df 91       	pop	r29
    1b94:	cf 91       	pop	r28
    1b96:	1f 91       	pop	r17
    1b98:	0f 91       	pop	r16
    1b9a:	ff 90       	pop	r15
    1b9c:	ef 90       	pop	r14
    1b9e:	08 95       	ret
    1ba0:	61 34       	cpi	r22, 0x41	; 65
    1ba2:	71 05       	cpc	r23, r1
    1ba4:	90 f0       	brcs	.+36     	; 0x1bca <u8g2_font_get_glyph_data+0xc4>
    1ba6:	fc 01       	movw	r30, r24
    1ba8:	e9 5a       	subi	r30, 0xA9	; 169
    1baa:	ff 4f       	sbci	r31, 0xFF	; 255
    1bac:	80 81       	ld	r24, Z
    1bae:	91 81       	ldd	r25, Z+1	; 0x01
    1bb0:	c8 0f       	add	r28, r24
    1bb2:	d9 1f       	adc	r29, r25
    1bb4:	0a c0       	rjmp	.+20     	; 0x1bca <u8g2_font_get_glyph_data+0xc4>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	24 91       	lpm	r18, Z
    1bba:	30 e0       	ldi	r19, 0x00	; 0
    1bbc:	62 17       	cp	r22, r18
    1bbe:	73 07       	cpc	r23, r19
    1bc0:	a1 f0       	breq	.+40     	; 0x1bea <u8g2_font_get_glyph_data+0xe4>
    1bc2:	fc 01       	movw	r30, r24
    1bc4:	84 91       	lpm	r24, Z
    1bc6:	c8 0f       	add	r28, r24
    1bc8:	d1 1d       	adc	r29, r1
    1bca:	ce 01       	movw	r24, r28
    1bcc:	01 96       	adiw	r24, 0x01	; 1
    1bce:	fc 01       	movw	r30, r24
    1bd0:	24 91       	lpm	r18, Z
    1bd2:	21 11       	cpse	r18, r1
    1bd4:	f0 cf       	rjmp	.-32     	; 0x1bb6 <u8g2_font_get_glyph_data+0xb0>
    1bd6:	db cf       	rjmp	.-74     	; 0x1b8e <u8g2_font_get_glyph_data+0x88>
    1bd8:	ce 01       	movw	r24, r28
    1bda:	03 96       	adiw	r24, 0x03	; 3
    1bdc:	df 91       	pop	r29
    1bde:	cf 91       	pop	r28
    1be0:	1f 91       	pop	r17
    1be2:	0f 91       	pop	r16
    1be4:	ff 90       	pop	r15
    1be6:	ef 90       	pop	r14
    1be8:	08 95       	ret
    1bea:	ce 01       	movw	r24, r28
    1bec:	02 96       	adiw	r24, 0x02	; 2
    1bee:	df 91       	pop	r29
    1bf0:	cf 91       	pop	r28
    1bf2:	1f 91       	pop	r17
    1bf4:	0f 91       	pop	r16
    1bf6:	ff 90       	pop	r15
    1bf8:	ef 90       	pop	r14
    1bfa:	08 95       	ret

00001bfc <u8g2_draw_string>:
    1bfc:	9f 92       	push	r9
    1bfe:	af 92       	push	r10
    1c00:	bf 92       	push	r11
    1c02:	cf 92       	push	r12
    1c04:	df 92       	push	r13
    1c06:	ef 92       	push	r14
    1c08:	ff 92       	push	r15
    1c0a:	0f 93       	push	r16
    1c0c:	1f 93       	push	r17
    1c0e:	cf 93       	push	r28
    1c10:	df 93       	push	r29
    1c12:	ec 01       	movw	r28, r24
    1c14:	96 2e       	mov	r9, r22
    1c16:	a4 2e       	mov	r10, r20
    1c18:	89 01       	movw	r16, r18
    1c1a:	0e 94 f3 11 	call	0x23e6	; 0x23e6 <u8x8_utf8_init>
    1c1e:	78 01       	movw	r14, r16
    1c20:	b1 2c       	mov	r11, r1
    1c22:	6e 01       	movw	r12, r28
    1c24:	85 e4       	ldi	r24, 0x45	; 69
    1c26:	c8 0e       	add	r12, r24
    1c28:	d1 1c       	adc	r13, r1
    1c2a:	f7 01       	movw	r30, r14
    1c2c:	61 91       	ld	r22, Z+
    1c2e:	7f 01       	movw	r14, r30
    1c30:	ea 81       	ldd	r30, Y+2	; 0x02
    1c32:	fb 81       	ldd	r31, Y+3	; 0x03
    1c34:	ce 01       	movw	r24, r28
    1c36:	09 95       	icall
    1c38:	8c 01       	movw	r16, r24
    1c3a:	01 96       	adiw	r24, 0x01	; 1
    1c3c:	09 f4       	brne	.+2      	; 0x1c40 <u8g2_draw_string+0x44>
    1c3e:	57 c0       	rjmp	.+174    	; 0x1cee <u8g2_draw_string+0xf2>
    1c40:	0e 3f       	cpi	r16, 0xFE	; 254
    1c42:	8f ef       	ldi	r24, 0xFF	; 255
    1c44:	18 07       	cpc	r17, r24
    1c46:	89 f3       	breq	.-30     	; 0x1c2a <u8g2_draw_string+0x2e>
    1c48:	f6 01       	movw	r30, r12
    1c4a:	80 81       	ld	r24, Z
    1c4c:	81 30       	cpi	r24, 0x01	; 1
    1c4e:	09 f4       	brne	.+2      	; 0x1c52 <u8g2_draw_string+0x56>
    1c50:	46 c0       	rjmp	.+140    	; 0x1cde <u8g2_draw_string+0xe2>
    1c52:	f0 f1       	brcs	.+124    	; 0x1cd0 <u8g2_draw_string+0xd4>
    1c54:	82 30       	cpi	r24, 0x02	; 2
    1c56:	99 f1       	breq	.+102    	; 0x1cbe <u8g2_draw_string+0xc2>
    1c58:	83 30       	cpi	r24, 0x03	; 3
    1c5a:	59 f5       	brne	.+86     	; 0x1cb2 <u8g2_draw_string+0xb6>
    1c5c:	ef a9       	ldd	r30, Y+55	; 0x37
    1c5e:	f8 ad       	ldd	r31, Y+56	; 0x38
    1c60:	ce 01       	movw	r24, r28
    1c62:	09 95       	icall
    1c64:	99 2d       	mov	r25, r9
    1c66:	98 0f       	add	r25, r24
    1c68:	8a 2d       	mov	r24, r10
    1c6a:	9b af       	std	Y+59, r25	; 0x3b
    1c6c:	8c af       	std	Y+60, r24	; 0x3c
    1c6e:	b8 01       	movw	r22, r16
    1c70:	ce 01       	movw	r24, r28
    1c72:	0e 94 83 0d 	call	0x1b06	; 0x1b06 <u8g2_font_get_glyph_data>
    1c76:	00 97       	sbiw	r24, 0x00	; 0
    1c78:	89 f0       	breq	.+34     	; 0x1c9c <u8g2_draw_string+0xa0>
    1c7a:	bc 01       	movw	r22, r24
    1c7c:	ce 01       	movw	r24, r28
    1c7e:	0e 94 8e 0a 	call	0x151c	; 0x151c <u8g2_font_decode_glyph>
    1c82:	f6 01       	movw	r30, r12
    1c84:	90 81       	ld	r25, Z
    1c86:	91 30       	cpi	r25, 0x01	; 1
    1c88:	71 f0       	breq	.+28     	; 0x1ca6 <u8g2_draw_string+0xaa>
    1c8a:	91 30       	cpi	r25, 0x01	; 1
    1c8c:	a8 f0       	brcs	.+42     	; 0x1cb8 <u8g2_draw_string+0xbc>
    1c8e:	92 30       	cpi	r25, 0x02	; 2
    1c90:	69 f0       	breq	.+26     	; 0x1cac <u8g2_draw_string+0xb0>
    1c92:	93 30       	cpi	r25, 0x03	; 3
    1c94:	09 f4       	brne	.+2      	; 0x1c98 <u8g2_draw_string+0x9c>
    1c96:	a8 1a       	sub	r10, r24
    1c98:	b8 0e       	add	r11, r24
    1c9a:	c7 cf       	rjmp	.-114    	; 0x1c2a <u8g2_draw_string+0x2e>
    1c9c:	80 e0       	ldi	r24, 0x00	; 0
    1c9e:	f6 01       	movw	r30, r12
    1ca0:	90 81       	ld	r25, Z
    1ca2:	91 30       	cpi	r25, 0x01	; 1
    1ca4:	91 f7       	brne	.-28     	; 0x1c8a <u8g2_draw_string+0x8e>
    1ca6:	a8 0e       	add	r10, r24
    1ca8:	b8 0e       	add	r11, r24
    1caa:	bf cf       	rjmp	.-130    	; 0x1c2a <u8g2_draw_string+0x2e>
    1cac:	98 1a       	sub	r9, r24
    1cae:	b8 0e       	add	r11, r24
    1cb0:	bc cf       	rjmp	.-136    	; 0x1c2a <u8g2_draw_string+0x2e>
    1cb2:	8a 2d       	mov	r24, r10
    1cb4:	99 2d       	mov	r25, r9
    1cb6:	d9 cf       	rjmp	.-78     	; 0x1c6a <u8g2_draw_string+0x6e>
    1cb8:	98 0e       	add	r9, r24
    1cba:	b8 0e       	add	r11, r24
    1cbc:	b6 cf       	rjmp	.-148    	; 0x1c2a <u8g2_draw_string+0x2e>
    1cbe:	ef a9       	ldd	r30, Y+55	; 0x37
    1cc0:	f8 ad       	ldd	r31, Y+56	; 0x38
    1cc2:	ce 01       	movw	r24, r28
    1cc4:	09 95       	icall
    1cc6:	fa 2d       	mov	r31, r10
    1cc8:	f8 1b       	sub	r31, r24
    1cca:	8f 2f       	mov	r24, r31
    1ccc:	99 2d       	mov	r25, r9
    1cce:	cd cf       	rjmp	.-102    	; 0x1c6a <u8g2_draw_string+0x6e>
    1cd0:	ef a9       	ldd	r30, Y+55	; 0x37
    1cd2:	f8 ad       	ldd	r31, Y+56	; 0x38
    1cd4:	ce 01       	movw	r24, r28
    1cd6:	09 95       	icall
    1cd8:	8a 0d       	add	r24, r10
    1cda:	99 2d       	mov	r25, r9
    1cdc:	c6 cf       	rjmp	.-116    	; 0x1c6a <u8g2_draw_string+0x6e>
    1cde:	ef a9       	ldd	r30, Y+55	; 0x37
    1ce0:	f8 ad       	ldd	r31, Y+56	; 0x38
    1ce2:	ce 01       	movw	r24, r28
    1ce4:	09 95       	icall
    1ce6:	99 2d       	mov	r25, r9
    1ce8:	98 1b       	sub	r25, r24
    1cea:	8a 2d       	mov	r24, r10
    1cec:	be cf       	rjmp	.-132    	; 0x1c6a <u8g2_draw_string+0x6e>
    1cee:	8b 2d       	mov	r24, r11
    1cf0:	df 91       	pop	r29
    1cf2:	cf 91       	pop	r28
    1cf4:	1f 91       	pop	r17
    1cf6:	0f 91       	pop	r16
    1cf8:	ff 90       	pop	r15
    1cfa:	ef 90       	pop	r14
    1cfc:	df 90       	pop	r13
    1cfe:	cf 90       	pop	r12
    1d00:	bf 90       	pop	r11
    1d02:	af 90       	pop	r10
    1d04:	9f 90       	pop	r9
    1d06:	08 95       	ret

00001d08 <u8g2_SetFontMode>:
    1d08:	8e 5b       	subi	r24, 0xBE	; 190
    1d0a:	9f 4f       	sbci	r25, 0xFF	; 255
    1d0c:	fc 01       	movw	r30, r24
    1d0e:	60 83       	st	Z, r22
    1d10:	08 95       	ret

00001d12 <u8g2_DrawStr>:
    1d12:	e9 ee       	ldi	r30, 0xE9	; 233
    1d14:	f1 e1       	ldi	r31, 0x11	; 17
    1d16:	dc 01       	movw	r26, r24
    1d18:	13 96       	adiw	r26, 0x03	; 3
    1d1a:	fc 93       	st	X, r31
    1d1c:	ee 93       	st	-X, r30
    1d1e:	12 97       	sbiw	r26, 0x02	; 2
    1d20:	0c 94 fe 0d 	jmp	0x1bfc	; 0x1bfc <u8g2_draw_string>

00001d24 <u8g2_SetFontPosBaseline>:
    1d24:	2b e5       	ldi	r18, 0x5B	; 91
    1d26:	3a e0       	ldi	r19, 0x0A	; 10
    1d28:	fc 01       	movw	r30, r24
    1d2a:	30 af       	std	Z+56, r19	; 0x38
    1d2c:	27 ab       	std	Z+55, r18	; 0x37
    1d2e:	08 95       	ret

00001d30 <u8g2_SetFont>:
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    1d30:	ef 92       	push	r14
    1d32:	ff 92       	push	r15
    1d34:	0f 93       	push	r16
    1d36:	1f 93       	push	r17
    1d38:	cf 93       	push	r28
    1d3a:	df 93       	push	r29
  if ( u8g2->font != font )
    1d3c:	dc 01       	movw	r26, r24
    1d3e:	d5 96       	adiw	r26, 0x35	; 53
    1d40:	2d 91       	ld	r18, X+
    1d42:	3c 91       	ld	r19, X
    1d44:	d6 97       	sbiw	r26, 0x36	; 54
    1d46:	26 17       	cp	r18, r22
    1d48:	37 07       	cpc	r19, r23
    1d4a:	09 f4       	brne	.+2      	; 0x1d4e <u8g2_SetFont+0x1e>
    1d4c:	b2 c0       	rjmp	.+356    	; 0x1eb2 <u8g2_SetFont+0x182>
    1d4e:	eb 01       	movw	r28, r22
    1d50:	7c 01       	movw	r14, r24
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    1d52:	fc 01       	movw	r30, r24
    1d54:	76 ab       	std	Z+54, r23	; 0x36
    1d56:	65 ab       	std	Z+53, r22	; 0x35
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1d58:	fb 01       	movw	r30, r22
    1d5a:	84 91       	lpm	r24, Z
/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
    1d5c:	8d 01       	movw	r16, r26
    1d5e:	0a 5b       	subi	r16, 0xBA	; 186
    1d60:	1f 4f       	sbci	r17, 0xFF	; 255
    1d62:	d8 01       	movw	r26, r16
    1d64:	8c 93       	st	X, r24
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1d66:	31 96       	adiw	r30, 0x01	; 1
    1d68:	e4 91       	lpm	r30, Z
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
    1d6a:	11 96       	adiw	r26, 0x01	; 1
    1d6c:	ec 93       	st	X, r30
    1d6e:	11 97       	sbiw	r26, 0x01	; 1
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1d70:	fb 01       	movw	r30, r22
    1d72:	32 96       	adiw	r30, 0x02	; 2
    1d74:	e4 91       	lpm	r30, Z
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
    1d76:	12 96       	adiw	r26, 0x02	; 2
    1d78:	ec 93       	st	X, r30
    1d7a:	12 97       	sbiw	r26, 0x02	; 2
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1d7c:	fb 01       	movw	r30, r22
    1d7e:	33 96       	adiw	r30, 0x03	; 3
    1d80:	e4 91       	lpm	r30, Z
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
    1d82:	13 96       	adiw	r26, 0x03	; 3
    1d84:	ec 93       	st	X, r30
    1d86:	13 97       	sbiw	r26, 0x03	; 3
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1d88:	fb 01       	movw	r30, r22
    1d8a:	34 96       	adiw	r30, 0x04	; 4
    1d8c:	e4 91       	lpm	r30, Z
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
    1d8e:	14 96       	adiw	r26, 0x04	; 4
    1d90:	ec 93       	st	X, r30
    1d92:	14 97       	sbiw	r26, 0x04	; 4
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1d94:	fb 01       	movw	r30, r22
    1d96:	35 96       	adiw	r30, 0x05	; 5
    1d98:	e4 91       	lpm	r30, Z
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
    1d9a:	15 96       	adiw	r26, 0x05	; 5
    1d9c:	ec 93       	st	X, r30
    1d9e:	15 97       	sbiw	r26, 0x05	; 5
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1da0:	fb 01       	movw	r30, r22
    1da2:	36 96       	adiw	r30, 0x06	; 6
    1da4:	e4 91       	lpm	r30, Z
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
    1da6:	16 96       	adiw	r26, 0x06	; 6
    1da8:	ec 93       	st	X, r30
    1daa:	16 97       	sbiw	r26, 0x06	; 6
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1dac:	fb 01       	movw	r30, r22
    1dae:	37 96       	adiw	r30, 0x07	; 7
    1db0:	e4 91       	lpm	r30, Z
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
    1db2:	17 96       	adiw	r26, 0x07	; 7
    1db4:	ec 93       	st	X, r30
    1db6:	17 97       	sbiw	r26, 0x07	; 7
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1db8:	fb 01       	movw	r30, r22
    1dba:	38 96       	adiw	r30, 0x08	; 8
    1dbc:	e4 91       	lpm	r30, Z
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
    1dbe:	18 96       	adiw	r26, 0x08	; 8
    1dc0:	ec 93       	st	X, r30
    1dc2:	18 97       	sbiw	r26, 0x08	; 8
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1dc4:	fb 01       	movw	r30, r22
    1dc6:	39 96       	adiw	r30, 0x09	; 9
    1dc8:	e4 91       	lpm	r30, Z
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
    1dca:	19 96       	adiw	r26, 0x09	; 9
    1dcc:	ec 93       	st	X, r30
    1dce:	19 97       	sbiw	r26, 0x09	; 9
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1dd0:	fb 01       	movw	r30, r22
    1dd2:	3a 96       	adiw	r30, 0x0a	; 10
    1dd4:	e4 91       	lpm	r30, Z
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
    1dd6:	1a 96       	adiw	r26, 0x0a	; 10
    1dd8:	ec 93       	st	X, r30
    1dda:	1a 97       	sbiw	r26, 0x0a	; 10
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1ddc:	fb 01       	movw	r30, r22
    1dde:	3b 96       	adiw	r30, 0x0b	; 11
    1de0:	e4 91       	lpm	r30, Z
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
    1de2:	1b 96       	adiw	r26, 0x0b	; 11
    1de4:	ec 93       	st	X, r30
    1de6:	1b 97       	sbiw	r26, 0x0b	; 11
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1de8:	fb 01       	movw	r30, r22
    1dea:	3c 96       	adiw	r30, 0x0c	; 12
    1dec:	e4 91       	lpm	r30, Z
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
    1dee:	1c 96       	adiw	r26, 0x0c	; 12
    1df0:	ec 93       	st	X, r30
    1df2:	1c 97       	sbiw	r26, 0x0c	; 12
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1df4:	fb 01       	movw	r30, r22
    1df6:	3d 96       	adiw	r30, 0x0d	; 13
    1df8:	e4 91       	lpm	r30, Z
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
    1dfa:	1d 96       	adiw	r26, 0x0d	; 13
    1dfc:	ec 93       	st	X, r30
    1dfe:	1d 97       	sbiw	r26, 0x0d	; 13
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1e00:	fb 01       	movw	r30, r22
    1e02:	3e 96       	adiw	r30, 0x0e	; 14
    1e04:	e4 91       	lpm	r30, Z
  font_info->x_offset = u8g2_font_get_byte(font, 11);
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
    1e06:	1e 96       	adiw	r26, 0x0e	; 14
    1e08:	ec 93       	st	X, r30
    1e0a:	1e 97       	sbiw	r26, 0x0e	; 14
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1e0c:	fb 01       	movw	r30, r22
    1e0e:	3f 96       	adiw	r30, 0x0f	; 15
    1e10:	e4 91       	lpm	r30, Z
  font_info->y_offset = u8g2_font_get_byte(font, 12);
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
    1e12:	1f 96       	adiw	r26, 0x0f	; 15
    1e14:	ec 93       	st	X, r30
    1e16:	1f 97       	sbiw	r26, 0x0f	; 15
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    1e18:	fb 01       	movw	r30, r22
    1e1a:	70 96       	adiw	r30, 0x10	; 16
    1e1c:	e4 91       	lpm	r30, Z
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
    1e1e:	50 96       	adiw	r26, 0x10	; 16
    1e20:	ec 93       	st	X, r30
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    1e22:	61 e1       	ldi	r22, 0x11	; 17
    1e24:	ce 01       	movw	r24, r28
    1e26:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g2_font_get_word>
    1e2a:	f8 01       	movw	r30, r16
    1e2c:	92 8b       	std	Z+18, r25	; 0x12
    1e2e:	81 8b       	std	Z+17, r24	; 0x11
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    1e30:	63 e1       	ldi	r22, 0x13	; 19
    1e32:	ce 01       	movw	r24, r28
    1e34:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g2_font_get_word>
    1e38:	d8 01       	movw	r26, r16
    1e3a:	54 96       	adiw	r26, 0x14	; 20
    1e3c:	9c 93       	st	X, r25
    1e3e:	8e 93       	st	-X, r24
    1e40:	53 97       	sbiw	r26, 0x13	; 19
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
    1e42:	65 e1       	ldi	r22, 0x15	; 21
    1e44:	ce 01       	movw	r24, r28
    1e46:	0e 94 4f 0a 	call	0x149e	; 0x149e <u8g2_font_get_word>
    1e4a:	f8 01       	movw	r30, r16
    1e4c:	96 8b       	std	Z+22, r25	; 0x16
    1e4e:	85 8b       	std	Z+21, r24	; 0x15

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    1e50:	d7 01       	movw	r26, r14
    1e52:	d5 96       	adiw	r26, 0x35	; 53
    1e54:	8d 91       	ld	r24, X+
    1e56:	9c 91       	ld	r25, X
    1e58:	d6 97       	sbiw	r26, 0x36	; 54
    1e5a:	89 2b       	or	r24, r25
    1e5c:	51 f1       	breq	.+84     	; 0x1eb2 <u8g2_SetFont+0x182>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    1e5e:	3d 96       	adiw	r30, 0x0d	; 13
    1e60:	80 81       	ld	r24, Z
    1e62:	e7 01       	movw	r28, r14
    1e64:	c1 5a       	subi	r28, 0xA1	; 161
    1e66:	df 4f       	sbci	r29, 0xFF	; 255
    1e68:	88 83       	st	Y, r24
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    1e6a:	31 96       	adiw	r30, 0x01	; 1
    1e6c:	20 81       	ld	r18, Z
    1e6e:	a0 5a       	subi	r26, 0xA0	; 160
    1e70:	bf 4f       	sbci	r27, 0xFF	; 255
    1e72:	2c 93       	st	X, r18
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    1e74:	3a 96       	adiw	r30, 0x0a	; 10
    1e76:	90 81       	ld	r25, Z
    1e78:	99 23       	and	r25, r25
    1e7a:	d9 f0       	breq	.+54     	; 0x1eb2 <u8g2_SetFont+0x182>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
    1e7c:	91 30       	cpi	r25, 0x01	; 1
    1e7e:	01 f1       	breq	.+64     	; 0x1ec0 <u8g2_SetFont+0x190>
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    1e80:	f7 01       	movw	r30, r14
    1e82:	e0 5b       	subi	r30, 0xB0	; 176
    1e84:	ff 4f       	sbci	r31, 0xFF	; 255
    1e86:	60 81       	ld	r22, Z
    1e88:	32 96       	adiw	r30, 0x02	; 2
    1e8a:	30 81       	ld	r19, Z
    1e8c:	08 2e       	mov	r0, r24
    1e8e:	00 0c       	add	r0, r0
    1e90:	99 0b       	sbc	r25, r25
    1e92:	43 2f       	mov	r20, r19
    1e94:	03 2e       	mov	r0, r19
    1e96:	00 0c       	add	r0, r0
    1e98:	55 0b       	sbc	r21, r21
    1e9a:	46 0f       	add	r20, r22
    1e9c:	51 1d       	adc	r21, r1
    1e9e:	67 fd       	sbrc	r22, 7
    1ea0:	5a 95       	dec	r21
    1ea2:	84 17       	cp	r24, r20
    1ea4:	95 07       	cpc	r25, r21
    1ea6:	14 f4       	brge	.+4      	; 0x1eac <u8g2_SetFont+0x17c>
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    1ea8:	63 0f       	add	r22, r19
    1eaa:	68 83       	st	Y, r22
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
    1eac:	32 17       	cp	r19, r18
    1eae:	0c f4       	brge	.+2      	; 0x1eb2 <u8g2_SetFont+0x182>
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
    1eb0:	3c 93       	st	X, r19
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    1eb2:	df 91       	pop	r29
    1eb4:	cf 91       	pop	r28
    1eb6:	1f 91       	pop	r17
    1eb8:	0f 91       	pop	r16
    1eba:	ff 90       	pop	r15
    1ebc:	ef 90       	pop	r14
    1ebe:	08 95       	ret
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    1ec0:	39 97       	sbiw	r30, 0x09	; 9
    1ec2:	90 81       	ld	r25, Z
    1ec4:	89 17       	cp	r24, r25
    1ec6:	0c f4       	brge	.+2      	; 0x1eca <u8g2_SetFont+0x19a>
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    1ec8:	98 83       	st	Y, r25
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    1eca:	f7 01       	movw	r30, r14
    1ecc:	ea 5a       	subi	r30, 0xAA	; 170
    1ece:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed0:	80 81       	ld	r24, Z
    1ed2:	82 17       	cp	r24, r18
    1ed4:	74 f7       	brge	.-36     	; 0x1eb2 <u8g2_SetFont+0x182>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    1ed6:	8c 93       	st	X, r24
    1ed8:	ec cf       	rjmp	.-40     	; 0x1eb2 <u8g2_SetFont+0x182>

00001eda <u8g2_draw_hv_line_2dir>:
    }
  }
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    1eda:	0f 93       	push	r16
    1edc:	dc 01       	movw	r26, r24
    1ede:	98 96       	adiw	r26, 0x28	; 40
    1ee0:	3c 91       	ld	r19, X
    1ee2:	98 97       	sbiw	r26, 0x28	; 40
    1ee4:	43 1b       	sub	r20, r19
    1ee6:	5e 96       	adiw	r26, 0x1e	; 30
    1ee8:	ed 91       	ld	r30, X+
    1eea:	fc 91       	ld	r31, X
    1eec:	5f 97       	sbiw	r26, 0x1f	; 31
    1eee:	09 95       	icall
    1ef0:	0f 91       	pop	r16
    1ef2:	08 95       	ret

00001ef4 <u8g2_DrawHVLine>:
    1ef4:	0f 93       	push	r16
    1ef6:	fc 01       	movw	r30, r24
    1ef8:	e3 5a       	subi	r30, 0xA3	; 163
    1efa:	ff 4f       	sbci	r31, 0xFF	; 255
    1efc:	30 81       	ld	r19, Z
    1efe:	33 23       	and	r19, r19
    1f00:	09 f4       	brne	.+2      	; 0x1f04 <u8g2_DrawHVLine+0x10>
    1f02:	5a c0       	rjmp	.+180    	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f04:	22 23       	and	r18, r18
    1f06:	09 f4       	brne	.+2      	; 0x1f0a <u8g2_DrawHVLine+0x16>
    1f08:	57 c0       	rjmp	.+174    	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f0a:	22 30       	cpi	r18, 0x02	; 2
    1f0c:	08 f4       	brcc	.+2      	; 0x1f10 <u8g2_DrawHVLine+0x1c>
    1f0e:	56 c0       	rjmp	.+172    	; 0x1fbc <u8g2_DrawHVLine+0xc8>
    1f10:	02 30       	cpi	r16, 0x02	; 2
    1f12:	29 f1       	breq	.+74     	; 0x1f5e <u8g2_DrawHVLine+0x6a>
    1f14:	03 30       	cpi	r16, 0x03	; 3
    1f16:	09 f0       	breq	.+2      	; 0x1f1a <u8g2_DrawHVLine+0x26>
    1f18:	51 c0       	rjmp	.+162    	; 0x1fbc <u8g2_DrawHVLine+0xc8>
    1f1a:	4f 5f       	subi	r20, 0xFF	; 255
    1f1c:	42 1b       	sub	r20, r18
    1f1e:	fc 01       	movw	r30, r24
    1f20:	35 a5       	ldd	r19, Z+45	; 0x2d
    1f22:	63 17       	cp	r22, r19
    1f24:	08 f4       	brcc	.+2      	; 0x1f28 <u8g2_DrawHVLine+0x34>
    1f26:	48 c0       	rjmp	.+144    	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f28:	36 a5       	ldd	r19, Z+46	; 0x2e
    1f2a:	63 17       	cp	r22, r19
    1f2c:	08 f0       	brcs	.+2      	; 0x1f30 <u8g2_DrawHVLine+0x3c>
    1f2e:	44 c0       	rjmp	.+136    	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f30:	30 a9       	ldd	r19, Z+48	; 0x30
    1f32:	57 a5       	ldd	r21, Z+47	; 0x2f
    1f34:	24 0f       	add	r18, r20
    1f36:	24 17       	cp	r18, r20
    1f38:	08 f0       	brcs	.+2      	; 0x1f3c <u8g2_DrawHVLine+0x48>
    1f3a:	44 c0       	rjmp	.+136    	; 0x1fc4 <u8g2_DrawHVLine+0xd0>
    1f3c:	43 17       	cp	r20, r19
    1f3e:	08 f0       	brcs	.+2      	; 0x1f42 <u8g2_DrawHVLine+0x4e>
    1f40:	40 c0       	rjmp	.+128    	; 0x1fc2 <u8g2_DrawHVLine+0xce>
    1f42:	2f ef       	ldi	r18, 0xFF	; 255
    1f44:	23 0f       	add	r18, r19
    1f46:	52 17       	cp	r21, r18
    1f48:	b8 f5       	brcc	.+110    	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f4a:	45 17       	cp	r20, r21
    1f4c:	08 f4       	brcc	.+2      	; 0x1f50 <u8g2_DrawHVLine+0x5c>
    1f4e:	45 2f       	mov	r20, r21
    1f50:	23 17       	cp	r18, r19
    1f52:	08 f4       	brcc	.+2      	; 0x1f56 <u8g2_DrawHVLine+0x62>
    1f54:	32 2f       	mov	r19, r18
    1f56:	23 2f       	mov	r18, r19
    1f58:	24 1b       	sub	r18, r20
    1f5a:	01 e0       	ldi	r16, 0x01	; 1
    1f5c:	24 c0       	rjmp	.+72     	; 0x1fa6 <u8g2_DrawHVLine+0xb2>
    1f5e:	6f 5f       	subi	r22, 0xFF	; 255
    1f60:	62 1b       	sub	r22, r18
    1f62:	dc 01       	movw	r26, r24
    1f64:	9f 96       	adiw	r26, 0x2f	; 47
    1f66:	3c 91       	ld	r19, X
    1f68:	9f 97       	sbiw	r26, 0x2f	; 47
    1f6a:	43 17       	cp	r20, r19
    1f6c:	28 f1       	brcs	.+74     	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f6e:	d0 96       	adiw	r26, 0x30	; 48
    1f70:	3c 91       	ld	r19, X
    1f72:	d0 97       	sbiw	r26, 0x30	; 48
    1f74:	43 17       	cp	r20, r19
    1f76:	00 f5       	brcc	.+64     	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f78:	9e 96       	adiw	r26, 0x2e	; 46
    1f7a:	3c 91       	ld	r19, X
    1f7c:	9e 97       	sbiw	r26, 0x2e	; 46
    1f7e:	9d 96       	adiw	r26, 0x2d	; 45
    1f80:	5c 91       	ld	r21, X
    1f82:	26 0f       	add	r18, r22
    1f84:	26 17       	cp	r18, r22
    1f86:	10 f5       	brcc	.+68     	; 0x1fcc <u8g2_DrawHVLine+0xd8>
    1f88:	63 17       	cp	r22, r19
    1f8a:	f8 f4       	brcc	.+62     	; 0x1fca <u8g2_DrawHVLine+0xd6>
    1f8c:	2f ef       	ldi	r18, 0xFF	; 255
    1f8e:	23 0f       	add	r18, r19
    1f90:	52 17       	cp	r21, r18
    1f92:	90 f4       	brcc	.+36     	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1f94:	65 17       	cp	r22, r21
    1f96:	08 f4       	brcc	.+2      	; 0x1f9a <u8g2_DrawHVLine+0xa6>
    1f98:	65 2f       	mov	r22, r21
    1f9a:	23 17       	cp	r18, r19
    1f9c:	08 f4       	brcc	.+2      	; 0x1fa0 <u8g2_DrawHVLine+0xac>
    1f9e:	32 2f       	mov	r19, r18
    1fa0:	23 2f       	mov	r18, r19
    1fa2:	26 1b       	sub	r18, r22
    1fa4:	00 e0       	ldi	r16, 0x00	; 0
    1fa6:	dc 01       	movw	r26, r24
    1fa8:	90 96       	adiw	r26, 0x20	; 32
    1faa:	ed 91       	ld	r30, X+
    1fac:	fc 91       	ld	r31, X
    1fae:	91 97       	sbiw	r26, 0x21	; 33
    1fb0:	04 80       	ldd	r0, Z+4	; 0x04
    1fb2:	f5 81       	ldd	r31, Z+5	; 0x05
    1fb4:	e0 2d       	mov	r30, r0
    1fb6:	09 95       	icall
    1fb8:	0f 91       	pop	r16
    1fba:	08 95       	ret
    1fbc:	00 fd       	sbrc	r16, 0
    1fbe:	af cf       	rjmp	.-162    	; 0x1f1e <u8g2_DrawHVLine+0x2a>
    1fc0:	d0 cf       	rjmp	.-96     	; 0x1f62 <u8g2_DrawHVLine+0x6e>
    1fc2:	45 2f       	mov	r20, r21
    1fc4:	43 17       	cp	r20, r19
    1fc6:	c0 f7       	brcc	.-16     	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1fc8:	be cf       	rjmp	.-132    	; 0x1f46 <u8g2_DrawHVLine+0x52>
    1fca:	65 2f       	mov	r22, r21
    1fcc:	63 17       	cp	r22, r19
    1fce:	a0 f7       	brcc	.-24     	; 0x1fb8 <u8g2_DrawHVLine+0xc4>
    1fd0:	df cf       	rjmp	.-66     	; 0x1f90 <u8g2_DrawHVLine+0x9c>

00001fd2 <u8g2_DrawPixel>:
// #endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, len, 1);
}

void u8g2_DrawPixel(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y)
{
    1fd2:	0f 93       	push	r16
    1fd4:	fc 01       	movw	r30, r24
#ifdef U8G2_WITH_INTERSECTION
  if ( y < u8g2->user_y0 )
    1fd6:	87 a5       	ldd	r24, Z+47	; 0x2f
    1fd8:	48 17       	cp	r20, r24
    1fda:	38 f1       	brcs	.+78     	; 0x202a <u8g2_DrawPixel+0x58>
    return;
  if ( y >= u8g2->user_y1 )
    1fdc:	80 a9       	ldd	r24, Z+48	; 0x30
    1fde:	48 17       	cp	r20, r24
    1fe0:	20 f5       	brcc	.+72     	; 0x202a <u8g2_DrawPixel+0x58>
    return;
  if ( x < u8g2->user_x0 )
    1fe2:	85 a5       	ldd	r24, Z+45	; 0x2d
    1fe4:	68 17       	cp	r22, r24
    1fe6:	08 f1       	brcs	.+66     	; 0x202a <u8g2_DrawPixel+0x58>
    return;
  if ( x >= u8g2->user_x1 )
    1fe8:	26 a5       	ldd	r18, Z+46	; 0x2e
    1fea:	62 17       	cp	r22, r18
    1fec:	f0 f4       	brcc	.+60     	; 0x202a <u8g2_DrawPixel+0x58>
  /* Make a call to the callback function (e.g. u8g2_draw_l90_r0). */
  /* The callback may rotate the hv line */
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
    1fee:	df 01       	movw	r26, r30
    1ff0:	a3 5a       	subi	r26, 0xA3	; 163
    1ff2:	bf 4f       	sbci	r27, 0xFF	; 255
    1ff4:	9c 91       	ld	r25, X
    1ff6:	99 23       	and	r25, r25
    1ff8:	c1 f0       	breq	.+48     	; 0x202a <u8g2_DrawPixel+0x58>
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    1ffa:	91 e0       	ldi	r25, 0x01	; 1
    1ffc:	96 0f       	add	r25, r22
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    1ffe:	96 17       	cp	r25, r22
    2000:	b0 f0       	brcs	.+44     	; 0x202e <u8g2_DrawPixel+0x5c>
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    2002:	89 17       	cp	r24, r25
    2004:	90 f4       	brcc	.+36     	; 0x202a <u8g2_DrawPixel+0x58>
    2006:	38 2f       	mov	r19, r24
    2008:	86 17       	cp	r24, r22
    200a:	08 f4       	brcc	.+2      	; 0x200e <u8g2_DrawPixel+0x3c>
    200c:	36 2f       	mov	r19, r22
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    200e:	92 17       	cp	r25, r18
    2010:	08 f4       	brcc	.+2      	; 0x2014 <u8g2_DrawPixel+0x42>
    2012:	29 2f       	mov	r18, r25
    2014:	cf 01       	movw	r24, r30
    2016:	23 1b       	sub	r18, r19
    2018:	00 a0       	ldd	r0, Z+32	; 0x20
    201a:	f1 a1       	ldd	r31, Z+33	; 0x21
    201c:	e0 2d       	mov	r30, r0
    201e:	04 80       	ldd	r0, Z+4	; 0x04
    2020:	f5 81       	ldd	r31, Z+5	; 0x05
    2022:	e0 2d       	mov	r30, r0
    2024:	00 e0       	ldi	r16, 0x00	; 0
    2026:	63 2f       	mov	r22, r19
    2028:	09 95       	icall
    return;
  if ( x >= u8g2->user_x1 )
    return;
#endif /* U8G2_WITH_INTERSECTION */
  u8g2_DrawHVLine(u8g2, x, y, 1, 0);
}
    202a:	0f 91       	pop	r16
    202c:	08 95       	ret
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    {
      b = d;
      b--;
    202e:	9f ef       	ldi	r25, 0xFF	; 255
    2030:	92 0f       	add	r25, r18
    2032:	e7 cf       	rjmp	.-50     	; 0x2002 <u8g2_DrawPixel+0x30>

00002034 <u8g2_SetDrawColor>:
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    2034:	fc 01       	movw	r30, r24
    2036:	ed 59       	subi	r30, 0x9D	; 157
    2038:	ff 4f       	sbci	r31, 0xFF	; 255
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
  if ( color >= 3 )
    203a:	63 30       	cpi	r22, 0x03	; 3
    203c:	18 f0       	brcs	.+6      	; 0x2044 <u8g2_SetDrawColor+0x10>
    u8g2->draw_color = 1;	/* u8g2_SetDrawColor: make color as one if arg is invalid */
    203e:	21 e0       	ldi	r18, 0x01	; 1
    2040:	20 83       	st	Z, r18
    2042:	08 95       	ret
  7 Jan 2017: Allow color value 2 for XOR operation.
  
*/
void u8g2_SetDrawColor(u8g2_t *u8g2, uint8_t color)
{
  u8g2->draw_color = color;	/* u8g2_SetDrawColor: just assign the argument */ 
    2044:	60 83       	st	Z, r22
    2046:	08 95       	ret

00002048 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    2048:	0f 93       	push	r16
    204a:	fc 01       	movw	r30, r24
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    204c:	87 a5       	ldd	r24, Z+47	; 0x2f
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    204e:	90 a9       	ldd	r25, Z+48	; 0x30
    2050:	49 17       	cp	r20, r25
    2052:	58 f4       	brcc	.+22     	; 0x206a <u8g2_IsIntersection+0x22>
  {
    if ( v1 > a0 )	// v1 >= a0
    2054:	80 17       	cp	r24, r16
    2056:	58 f4       	brcc	.+22     	; 0x206e <u8g2_IsIntersection+0x26>
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    2058:	85 a5       	ldd	r24, Z+45	; 0x2d
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    205a:	96 a5       	ldd	r25, Z+46	; 0x2e
    205c:	69 17       	cp	r22, r25
    205e:	60 f4       	brcc	.+24     	; 0x2078 <u8g2_IsIntersection+0x30>
  {
    if ( v1 > a0 )	// v1 >= a0
    2060:	82 17       	cp	r24, r18
    2062:	60 f4       	brcc	.+24     	; 0x207c <u8g2_IsIntersection+0x34>
    {
      return 1;
    2064:	81 e0       	ldi	r24, 0x01	; 1
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    2066:	0f 91       	pop	r16
    2068:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    206a:	80 17       	cp	r24, r16
    206c:	10 f4       	brcc	.+4      	; 0x2072 <u8g2_IsIntersection+0x2a>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    206e:	04 17       	cp	r16, r20
    2070:	98 f3       	brcs	.-26     	; 0x2058 <u8g2_IsIntersection+0x10>

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    2072:	80 e0       	ldi	r24, 0x00	; 0
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    2074:	0f 91       	pop	r16
    2076:	08 95       	ret
      }
    }
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    2078:	82 17       	cp	r24, r18
    207a:	d8 f7       	brcc	.-10     	; 0x2072 <u8g2_IsIntersection+0x2a>

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    207c:	81 e0       	ldi	r24, 0x01	; 1
    207e:	26 17       	cp	r18, r22
    2080:	c0 f7       	brcc	.-16     	; 0x2072 <u8g2_IsIntersection+0x2a>
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    2082:	0f 91       	pop	r16
    2084:	08 95       	ret

00002086 <u8g2_DrawLine>:

#include "u8g2.h"


void u8g2_DrawLine(u8g2_t *u8g2, u8g2_uint_t x1, u8g2_uint_t y1, u8g2_uint_t x2, u8g2_uint_t y2)
{
    2086:	bf 92       	push	r11
    2088:	cf 92       	push	r12
    208a:	df 92       	push	r13
    208c:	ef 92       	push	r14
    208e:	ff 92       	push	r15
    2090:	0f 93       	push	r16
    2092:	1f 93       	push	r17
    2094:	cf 93       	push	r28
    2096:	df 93       	push	r29
    2098:	6c 01       	movw	r12, r24
    209a:	c6 2f       	mov	r28, r22
    209c:	14 2f       	mov	r17, r20
    209e:	f2 2e       	mov	r15, r18

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    20a0:	26 17       	cp	r18, r22
    20a2:	08 f0       	brcs	.+2      	; 0x20a6 <u8g2_DrawLine+0x20>
    20a4:	4f c0       	rjmp	.+158    	; 0x2144 <u8g2_DrawLine+0xbe>
    20a6:	e6 2e       	mov	r14, r22
    20a8:	e2 1a       	sub	r14, r18
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    20aa:	01 17       	cp	r16, r17
    20ac:	08 f0       	brcs	.+2      	; 0x20b0 <u8g2_DrawLine+0x2a>
    20ae:	4f c0       	rjmp	.+158    	; 0x214e <u8g2_DrawLine+0xc8>
    20b0:	b1 2e       	mov	r11, r17
    20b2:	b0 1a       	sub	r11, r16

  if ( dy > dx ) 
    20b4:	eb 14       	cp	r14, r11
    20b6:	08 f0       	brcs	.+2      	; 0x20ba <u8g2_DrawLine+0x34>
    20b8:	60 c0       	rjmp	.+192    	; 0x217a <u8g2_DrawLine+0xf4>
    20ba:	81 2f       	mov	r24, r17
    20bc:	1f 2d       	mov	r17, r15
    20be:	f8 2e       	mov	r15, r24
    20c0:	8c 2f       	mov	r24, r28
    20c2:	c0 2f       	mov	r28, r16
    20c4:	08 2f       	mov	r16, r24
  {
    swapxy = 1;
    20c6:	81 e0       	ldi	r24, 0x01	; 1
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    20c8:	db 2d       	mov	r29, r11
    20ca:	d6 95       	lsr	r29
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    20cc:	10 17       	cp	r17, r16
    20ce:	08 f4       	brcc	.+2      	; 0x20d2 <u8g2_DrawLine+0x4c>
    20d0:	4d c0       	rjmp	.+154    	; 0x216c <u8g2_DrawLine+0xe6>
    20d2:	0f ef       	ldi	r16, 0xFF	; 255
  y = y1;

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    20d4:	9f ef       	ldi	r25, 0xFF	; 255
    20d6:	f9 16       	cp	r15, r25
    20d8:	09 f4       	brne	.+2      	; 0x20dc <u8g2_DrawLine+0x56>
    20da:	4c c0       	rjmp	.+152    	; 0x2174 <u8g2_DrawLine+0xee>
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    20dc:	fc 16       	cp	r15, r28
    20de:	d0 f0       	brcs	.+52     	; 0x2114 <u8g2_DrawLine+0x8e>
    20e0:	88 23       	and	r24, r24
    20e2:	39 f1       	breq	.+78     	; 0x2132 <u8g2_DrawLine+0xac>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    20e4:	4c 2f       	mov	r20, r28
    20e6:	61 2f       	mov	r22, r17
    20e8:	c6 01       	movw	r24, r12
    20ea:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
    20ee:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    20f0:	d7 fd       	sbrc	r29, 7
    20f2:	0b c0       	rjmp	.+22     	; 0x210a <u8g2_DrawLine+0x84>
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    20f4:	cf 5f       	subi	r28, 0xFF	; 255
    20f6:	fc 16       	cp	r15, r28
    20f8:	68 f0       	brcs	.+26     	; 0x2114 <u8g2_DrawLine+0x8e>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    20fa:	4c 2f       	mov	r20, r28
    20fc:	61 2f       	mov	r22, r17
    20fe:	c6 01       	movw	r24, r12
    2100:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    err -= (uint8_t)dy;
    2104:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    2106:	d7 ff       	sbrs	r29, 7
    2108:	f5 cf       	rjmp	.-22     	; 0x20f4 <u8g2_DrawLine+0x6e>
    {
      y += (u8g2_uint_t)ystep;
    210a:	10 0f       	add	r17, r16
      err += (u8g2_uint_t)dx;
    210c:	db 0d       	add	r29, r11
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    210e:	cf 5f       	subi	r28, 0xFF	; 255
    2110:	fc 16       	cp	r15, r28
    2112:	98 f7       	brcc	.-26     	; 0x20fa <u8g2_DrawLine+0x74>
    {
      y += (u8g2_uint_t)ystep;
      err += (u8g2_uint_t)dx;
    }
  }
}
    2114:	df 91       	pop	r29
    2116:	cf 91       	pop	r28
    2118:	1f 91       	pop	r17
    211a:	0f 91       	pop	r16
    211c:	ff 90       	pop	r15
    211e:	ef 90       	pop	r14
    2120:	df 90       	pop	r13
    2122:	cf 90       	pop	r12
    2124:	bf 90       	pop	r11
    2126:	08 95       	ret
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    err -= (uint8_t)dy;
    if ( err < 0 ) 
    {
      y += (u8g2_uint_t)ystep;
    2128:	10 0f       	add	r17, r16
      err += (u8g2_uint_t)dx;
    212a:	db 0d       	add	r29, r11
#else
  if ( x2 == 0xffff )
    x2--;
#endif

  for( x = x1; x <= x2; x++ )
    212c:	cf 5f       	subi	r28, 0xFF	; 255
    212e:	fc 16       	cp	r15, r28
    2130:	88 f3       	brcs	.-30     	; 0x2114 <u8g2_DrawLine+0x8e>
  {
    if ( swapxy == 0 ) 
      u8g2_DrawPixel(u8g2, x, y); 
    2132:	41 2f       	mov	r20, r17
    2134:	6c 2f       	mov	r22, r28
    2136:	c6 01       	movw	r24, r12
    2138:	0e 94 e9 0f 	call	0x1fd2	; 0x1fd2 <u8g2_DrawPixel>
    else 
      u8g2_DrawPixel(u8g2, y, x); 
    err -= (uint8_t)dy;
    213c:	de 19       	sub	r29, r14
    if ( err < 0 ) 
    213e:	d7 ff       	sbrs	r29, 7
    2140:	f5 cf       	rjmp	.-22     	; 0x212c <u8g2_DrawLine+0xa6>
    2142:	f2 cf       	rjmp	.-28     	; 0x2128 <u8g2_DrawLine+0xa2>

  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
    2144:	e2 2e       	mov	r14, r18
    2146:	e6 1a       	sub	r14, r22
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    2148:	01 17       	cp	r16, r17
    214a:	08 f4       	brcc	.+2      	; 0x214e <u8g2_DrawLine+0xc8>
    214c:	b1 cf       	rjmp	.-158    	; 0x20b0 <u8g2_DrawLine+0x2a>
    214e:	b0 2e       	mov	r11, r16
    2150:	b1 1a       	sub	r11, r17

  if ( dy > dx ) 
    2152:	eb 14       	cp	r14, r11
    2154:	60 f1       	brcs	.+88     	; 0x21ae <u8g2_DrawLine+0x128>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    2156:	fc 16       	cp	r15, r28
    2158:	f0 f0       	brcs	.+60     	; 0x2196 <u8g2_DrawLine+0x110>
    215a:	8b 2d       	mov	r24, r11
    215c:	be 2c       	mov	r11, r14
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    215e:	e8 2e       	mov	r14, r24
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    2160:	80 e0       	ldi	r24, 0x00	; 0
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    2162:	db 2d       	mov	r29, r11
    2164:	d6 95       	lsr	r29
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
    2166:	10 17       	cp	r17, r16
    2168:	08 f0       	brcs	.+2      	; 0x216c <u8g2_DrawLine+0xe6>
    216a:	b3 cf       	rjmp	.-154    	; 0x20d2 <u8g2_DrawLine+0x4c>
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    216c:	01 e0       	ldi	r16, 0x01	; 1
  if ( y2 > y1 ) ystep = 1; else ystep = -1;
  y = y1;

#ifndef  U8G2_16BIT
  if ( x2 == 255 )
    216e:	9f ef       	ldi	r25, 0xFF	; 255
    2170:	f9 12       	cpse	r15, r25
    2172:	b4 cf       	rjmp	.-152    	; 0x20dc <u8g2_DrawLine+0x56>
    x2--;
    2174:	9e ef       	ldi	r25, 0xFE	; 254
    2176:	f9 2e       	mov	r15, r25
    2178:	b1 cf       	rjmp	.-158    	; 0x20dc <u8g2_DrawLine+0x56>
    swapxy = 1;
    tmp = dx; dx =dy; dy = tmp;
    tmp = x1; x1 =y1; y1 = tmp;
    tmp = x2; x2 =y2; y2 = tmp;
  }
  if ( x1 > x2 ) 
    217a:	fc 16       	cp	r15, r28
    217c:	70 f7       	brcc	.-36     	; 0x215a <u8g2_DrawLine+0xd4>
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    217e:	de 2d       	mov	r29, r14
    2180:	d6 95       	lsr	r29
    2182:	8e 2d       	mov	r24, r14
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    2184:	eb 2c       	mov	r14, r11
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    2186:	b8 2e       	mov	r11, r24
    2188:	10 2f       	mov	r17, r16
    218a:	8c 2f       	mov	r24, r28
    218c:	cf 2d       	mov	r28, r15
    218e:	f8 2e       	mov	r15, r24
    2190:	80 e0       	ldi	r24, 0x00	; 0
    2192:	01 e0       	ldi	r16, 0x01	; 1
    2194:	ec cf       	rjmp	.-40     	; 0x216e <u8g2_DrawLine+0xe8>
    2196:	de 2d       	mov	r29, r14
    2198:	d6 95       	lsr	r29
    219a:	8e 2d       	mov	r24, r14
  uint8_t swapxy = 0;
  
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;
    219c:	eb 2c       	mov	r14, r11
  if ( x1 > x2 ) 
  {
    tmp = x1; x1 =x2; x2 = tmp;
    tmp = y1; y1 =y2; y2 = tmp;
  }
  err = dx >> 1;
    219e:	b8 2e       	mov	r11, r24
    21a0:	10 2f       	mov	r17, r16
    21a2:	8c 2f       	mov	r24, r28
    21a4:	cf 2d       	mov	r28, r15
    21a6:	f8 2e       	mov	r15, r24
    21a8:	80 e0       	ldi	r24, 0x00	; 0
    21aa:	0f ef       	ldi	r16, 0xFF	; 255
    21ac:	93 cf       	rjmp	.-218    	; 0x20d4 <u8g2_DrawLine+0x4e>
  /* no intersection check at the moment, should be added... */

  if ( x1 > x2 ) dx = x1-x2; else dx = x2-x1;
  if ( y1 > y2 ) dy = y1-y2; else dy = y2-y1;

  if ( dy > dx ) 
    21ae:	8f 2d       	mov	r24, r15
    21b0:	f0 2e       	mov	r15, r16
    21b2:	08 2f       	mov	r16, r24
    21b4:	8c 2f       	mov	r24, r28
    21b6:	c1 2f       	mov	r28, r17
    21b8:	18 2f       	mov	r17, r24
  {
    swapxy = 1;
    21ba:	81 e0       	ldi	r24, 0x01	; 1
    21bc:	85 cf       	rjmp	.-246    	; 0x20c8 <u8g2_DrawLine+0x42>

000021be <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    21be:	ff 92       	push	r15
    21c0:	0f 93       	push	r16
    21c2:	1f 93       	push	r17
    21c4:	cf 93       	push	r28
    21c6:	df 93       	push	r29
    21c8:	dc 01       	movw	r26, r24
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    21ca:	34 2f       	mov	r19, r20
    21cc:	37 70       	andi	r19, 0x07	; 7
  mask = 1;
  mask <<= bit_pos;
    21ce:	81 e0       	ldi	r24, 0x01	; 1
    21d0:	90 e0       	ldi	r25, 0x00	; 0
    21d2:	03 2e       	mov	r0, r19
    21d4:	01 c0       	rjmp	.+2      	; 0x21d8 <u8g2_ll_hvline_vertical_top_lsb+0x1a>
    21d6:	88 0f       	add	r24, r24
    21d8:	0a 94       	dec	r0
    21da:	ea f7       	brpl	.-6      	; 0x21d6 <u8g2_ll_hvline_vertical_top_lsb+0x18>
    21dc:	18 2f       	mov	r17, r24

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    21de:	ed 01       	movw	r28, r26
    21e0:	cd 59       	subi	r28, 0x9D	; 157
    21e2:	df 4f       	sbci	r29, 0xFF	; 255
    21e4:	58 81       	ld	r21, Y
    21e6:	52 30       	cpi	r21, 0x02	; 2
    21e8:	e8 f1       	brcs	.+122    	; 0x2264 <u8g2_ll_hvline_vertical_top_lsb+0xa6>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    21ea:	70 e0       	ldi	r23, 0x00	; 0
    or_mask  = mask;
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
    21ec:	50 e0       	ldi	r21, 0x00	; 0
  offset &= ~7;
    21ee:	48 7f       	andi	r20, 0xF8	; 248
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    21f0:	92 96       	adiw	r26, 0x22	; 34
    21f2:	8d 91       	ld	r24, X+
    21f4:	9c 91       	ld	r25, X
    21f6:	93 97       	sbiw	r26, 0x23	; 35
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    21f8:	ed 91       	ld	r30, X+
    21fa:	fc 91       	ld	r31, X
    21fc:	11 97       	sbiw	r26, 0x01	; 1
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    21fe:	f0 88       	ldd	r15, Z+16	; 0x10
    2200:	f4 9e       	mul	r15, r20
    2202:	f0 01       	movw	r30, r0
    2204:	f5 9e       	mul	r15, r21
    2206:	f0 0d       	add	r31, r0
    2208:	11 24       	eor	r1, r1
    220a:	e6 0f       	add	r30, r22
    220c:	f1 1d       	adc	r31, r1
    220e:	e8 0f       	add	r30, r24
    2210:	f9 1f       	adc	r31, r25
  
  if ( dir == 0 )
    2212:	01 11       	cpse	r16, r1
    2214:	17 c0       	rjmp	.+46     	; 0x2244 <u8g2_ll_hvline_vertical_top_lsb+0x86>
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    2216:	80 81       	ld	r24, Z
    2218:	87 2b       	or	r24, r23
    221a:	81 27       	eor	r24, r17
    221c:	81 93       	st	Z+, r24
	ptr++;
	len--;
    221e:	21 50       	subi	r18, 0x01	; 1
      } while( len != 0 );
    2220:	d1 f7       	brne	.-12     	; 0x2216 <u8g2_ll_hvline_vertical_top_lsb+0x58>
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
  }
}
    2222:	df 91       	pop	r29
    2224:	cf 91       	pop	r28
    2226:	1f 91       	pop	r17
    2228:	0f 91       	pop	r16
    222a:	ff 90       	pop	r15
    222c:	08 95       	ret

      len--;

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    222e:	96 96       	adiw	r26, 0x26	; 38
    2230:	8c 91       	ld	r24, X
    2232:	96 97       	sbiw	r26, 0x26	; 38
    2234:	e8 0f       	add	r30, r24
    2236:	f1 1d       	adc	r31, r1
		
	if ( u8g2->draw_color <= 1 )
    2238:	88 81       	ld	r24, Y
    223a:	82 30       	cpi	r24, 0x02	; 2
    223c:	78 f0       	brcs	.+30     	; 0x225c <u8g2_ll_hvline_vertical_top_lsb+0x9e>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    223e:	11 e0       	ldi	r17, 0x01	; 1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    2240:	22 23       	and	r18, r18
    2242:	79 f3       	breq	.-34     	; 0x2222 <u8g2_ll_hvline_vertical_top_lsb+0x64>
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    2244:	90 81       	ld	r25, Z
    2246:	97 2b       	or	r25, r23
    2248:	91 27       	eor	r25, r17
    224a:	90 83       	st	Z, r25
      
      bit_pos++;
    224c:	3f 5f       	subi	r19, 0xFF	; 255
      bit_pos &= 7;
    224e:	37 70       	andi	r19, 0x07	; 7

      len--;
    2250:	21 50       	subi	r18, 0x01	; 1

      if ( bit_pos == 0 )
    2252:	33 23       	and	r19, r19
    2254:	61 f3       	breq	.-40     	; 0x222e <u8g2_ll_hvline_vertical_top_lsb+0x70>
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    2256:	77 0f       	add	r23, r23
	xor_mask <<= 1;
    2258:	11 0f       	add	r17, r17
    225a:	f2 cf       	rjmp	.-28     	; 0x2240 <u8g2_ll_hvline_vertical_top_lsb+0x82>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
    225c:	81 30       	cpi	r24, 0x01	; 1
    225e:	41 f4       	brne	.+16     	; 0x2270 <u8g2_ll_hvline_vertical_top_lsb+0xb2>
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    2260:	71 e0       	ldi	r23, 0x01	; 1
    2262:	ee cf       	rjmp	.-36     	; 0x2240 <u8g2_ll_hvline_vertical_top_lsb+0x82>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    2264:	78 2f       	mov	r23, r24
  if ( u8g2->draw_color != 1 )
    2266:	51 30       	cpi	r21, 0x01	; 1
    2268:	09 f0       	breq	.+2      	; 0x226c <u8g2_ll_hvline_vertical_top_lsb+0xae>
    226a:	c0 cf       	rjmp	.-128    	; 0x21ec <u8g2_ll_hvline_vertical_top_lsb+0x2e>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    226c:	10 e0       	ldi	r17, 0x00	; 0
    226e:	be cf       	rjmp	.-132    	; 0x21ec <u8g2_ll_hvline_vertical_top_lsb+0x2e>
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    2270:	11 e0       	ldi	r17, 0x01	; 1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    2272:	71 e0       	ldi	r23, 0x01	; 1
    2274:	e5 cf       	rjmp	.-54     	; 0x2240 <u8g2_ll_hvline_vertical_top_lsb+0x82>

00002276 <u8g2_draw_l90_r0>:
{
  u8g2->clip_x0 = clip_x0;
  u8g2->clip_y0 = clip_y0;
  u8g2->clip_x1 = clip_x1;
  u8g2->clip_y1 = clip_y1;
  u8g2->cb->update_page_win(u8g2);
    2276:	0f 93       	push	r16
    2278:	0e 94 6d 0f 	call	0x1eda	; 0x1eda <u8g2_draw_hv_line_2dir>
    227c:	0f 91       	pop	r16
    227e:	08 95       	ret

00002280 <u8g2_update_dimension_r0>:
    2280:	fc 01       	movw	r30, r24
    2282:	a0 81       	ld	r26, Z
    2284:	b1 81       	ldd	r27, Z+1	; 0x01
    2286:	64 a1       	ldd	r22, Z+36	; 0x24
    2288:	86 2f       	mov	r24, r22
    228a:	88 0f       	add	r24, r24
    228c:	88 0f       	add	r24, r24
    228e:	88 0f       	add	r24, r24
    2290:	87 a3       	std	Z+39, r24	; 0x27
    2292:	50 96       	adiw	r26, 0x10	; 16
    2294:	9c 91       	ld	r25, X
    2296:	50 97       	sbiw	r26, 0x10	; 16
    2298:	90 32       	cpi	r25, 0x20	; 32
    229a:	08 f0       	brcs	.+2      	; 0x229e <u8g2_update_dimension_r0+0x1e>
    229c:	9f e1       	ldi	r25, 0x1F	; 31
    229e:	99 0f       	add	r25, r25
    22a0:	99 0f       	add	r25, r25
    22a2:	99 0f       	add	r25, r25
    22a4:	96 a3       	std	Z+38, r25	; 0x26
    22a6:	55 a1       	ldd	r21, Z+37	; 0x25
    22a8:	95 2f       	mov	r25, r21
    22aa:	99 0f       	add	r25, r25
    22ac:	99 0f       	add	r25, r25
    22ae:	99 0f       	add	r25, r25
    22b0:	90 a7       	std	Z+40, r25	; 0x28
    22b2:	51 96       	adiw	r26, 0x11	; 17
    22b4:	4c 91       	ld	r20, X
    22b6:	51 97       	sbiw	r26, 0x11	; 17
    22b8:	25 2f       	mov	r18, r21
    22ba:	30 e0       	ldi	r19, 0x00	; 0
    22bc:	26 0f       	add	r18, r22
    22be:	31 1d       	adc	r19, r1
    22c0:	64 2f       	mov	r22, r20
    22c2:	70 e0       	ldi	r23, 0x00	; 0
    22c4:	62 17       	cp	r22, r18
    22c6:	73 07       	cpc	r23, r19
    22c8:	2c f4       	brge	.+10     	; 0x22d4 <u8g2_update_dimension_r0+0x54>
    22ca:	84 2f       	mov	r24, r20
    22cc:	85 1b       	sub	r24, r21
    22ce:	88 0f       	add	r24, r24
    22d0:	88 0f       	add	r24, r24
    22d2:	88 0f       	add	r24, r24
    22d4:	91 a7       	std	Z+41, r25	; 0x29
    22d6:	89 0f       	add	r24, r25
    22d8:	82 a7       	std	Z+42, r24	; 0x2a
    22da:	80 ef       	ldi	r24, 0xF0	; 240
    22dc:	83 a7       	std	Z+43, r24	; 0x2b
    22de:	54 96       	adiw	r26, 0x14	; 20
    22e0:	8d 91       	ld	r24, X+
    22e2:	9c 91       	ld	r25, X
    22e4:	55 97       	sbiw	r26, 0x15	; 21
    22e6:	81 3f       	cpi	r24, 0xF1	; 241
    22e8:	91 05       	cpc	r25, r1
    22ea:	08 f4       	brcc	.+2      	; 0x22ee <u8g2_update_dimension_r0+0x6e>
    22ec:	83 a7       	std	Z+43, r24	; 0x2b
    22ee:	56 96       	adiw	r26, 0x16	; 22
    22f0:	8c 91       	ld	r24, X
    22f2:	84 a7       	std	Z+44, r24	; 0x2c
    22f4:	08 95       	ret

000022f6 <u8g2_update_page_win_r0>:
    22f6:	0f 93       	push	r16
    22f8:	cf 93       	push	r28
    22fa:	df 93       	push	r29
    22fc:	ec 01       	movw	r28, r24
    22fe:	1d a6       	std	Y+45, r1	; 0x2d
    2300:	8b a5       	ldd	r24, Y+43	; 0x2b
    2302:	8e a7       	std	Y+46, r24	; 0x2e
    2304:	89 a5       	ldd	r24, Y+41	; 0x29
    2306:	8f a7       	std	Y+47, r24	; 0x2f
    2308:	8a a5       	ldd	r24, Y+42	; 0x2a
    230a:	88 ab       	std	Y+48, r24	; 0x30
    230c:	0c a9       	ldd	r16, Y+52	; 0x34
    230e:	2a a9       	ldd	r18, Y+50	; 0x32
    2310:	4b a9       	ldd	r20, Y+51	; 0x33
    2312:	69 a9       	ldd	r22, Y+49	; 0x31
    2314:	ce 01       	movw	r24, r28
    2316:	0e 94 24 10 	call	0x2048	; 0x2048 <u8g2_IsIntersection>
    231a:	88 23       	and	r24, r24
    231c:	e9 f0       	breq	.+58     	; 0x2358 <u8g2_update_page_win_r0+0x62>
    231e:	81 e0       	ldi	r24, 0x01	; 1
    2320:	fe 01       	movw	r30, r28
    2322:	e3 5a       	subi	r30, 0xA3	; 163
    2324:	ff 4f       	sbci	r31, 0xFF	; 255
    2326:	80 83       	st	Z, r24
    2328:	89 a9       	ldd	r24, Y+49	; 0x31
    232a:	9d a5       	ldd	r25, Y+45	; 0x2d
    232c:	98 17       	cp	r25, r24
    232e:	08 f4       	brcc	.+2      	; 0x2332 <u8g2_update_page_win_r0+0x3c>
    2330:	8d a7       	std	Y+45, r24	; 0x2d
    2332:	8a a9       	ldd	r24, Y+50	; 0x32
    2334:	9e a5       	ldd	r25, Y+46	; 0x2e
    2336:	89 17       	cp	r24, r25
    2338:	08 f4       	brcc	.+2      	; 0x233c <u8g2_update_page_win_r0+0x46>
    233a:	8e a7       	std	Y+46, r24	; 0x2e
    233c:	8b a9       	ldd	r24, Y+51	; 0x33
    233e:	9f a5       	ldd	r25, Y+47	; 0x2f
    2340:	98 17       	cp	r25, r24
    2342:	08 f4       	brcc	.+2      	; 0x2346 <u8g2_update_page_win_r0+0x50>
    2344:	8f a7       	std	Y+47, r24	; 0x2f
    2346:	8c a9       	ldd	r24, Y+52	; 0x34
    2348:	98 a9       	ldd	r25, Y+48	; 0x30
    234a:	89 17       	cp	r24, r25
    234c:	08 f4       	brcc	.+2      	; 0x2350 <u8g2_update_page_win_r0+0x5a>
    234e:	88 ab       	std	Y+48, r24	; 0x30
    2350:	df 91       	pop	r29
    2352:	cf 91       	pop	r28
    2354:	0f 91       	pop	r16
    2356:	08 95       	ret
    2358:	c3 5a       	subi	r28, 0xA3	; 163
    235a:	df 4f       	sbci	r29, 0xFF	; 255
    235c:	18 82       	st	Y, r1
    235e:	df 91       	pop	r29
    2360:	cf 91       	pop	r28
    2362:	0f 91       	pop	r16
    2364:	08 95       	ret

00002366 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    2366:	0f 93       	push	r16
    2368:	1f 93       	push	r17
    236a:	cf 93       	push	r28
    236c:	df 93       	push	r29
    236e:	ec 01       	movw	r28, r24
  u8g2->font = NULL;
    2370:	1e aa       	std	Y+54, r1	; 0x36
    2372:	1d aa       	std	Y+53, r1	; 0x35
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    2374:	3f 8f       	std	Y+31, r19	; 0x1f
    2376:	2e 8f       	std	Y+30, r18	; 0x1e
  
  u8g2->tile_buf_ptr = buf;
    2378:	7b a3       	std	Y+35, r23	; 0x23
    237a:	6a a3       	std	Y+34, r22	; 0x22
  u8g2->tile_buf_height = tile_buf_height;
    237c:	4c a3       	std	Y+36, r20	; 0x24
  
  u8g2->tile_curr_row = 0;
    237e:	1d a2       	std	Y+37, r1	; 0x25
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    2380:	fc 01       	movw	r30, r24
    2382:	ee 5b       	subi	r30, 0xBE	; 190
    2384:	ff 4f       	sbci	r31, 0xFF	; 255
    2386:	10 82       	st	Z, r1
  u8g2->bitmap_transparency = 0;
    2388:	b0 96       	adiw	r30, 0x20	; 32
    238a:	10 82       	st	Z, r1
  
  u8g2->draw_color = 1;
    238c:	31 96       	adiw	r30, 0x01	; 1
    238e:	81 e0       	ldi	r24, 0x01	; 1
    2390:	80 83       	st	Z, r24
  u8g2->is_auto_page_clear = 1;
    2392:	31 96       	adiw	r30, 0x01	; 1
    2394:	80 83       	st	Z, r24
  
  u8g2->cb = u8g2_cb;
    2396:	19 a3       	std	Y+33, r17	; 0x21
    2398:	08 a3       	std	Y+32, r16	; 0x20
  u8g2->cb->update_dimension(u8g2);
    239a:	d8 01       	movw	r26, r16
    239c:	ed 91       	ld	r30, X+
    239e:	fc 91       	ld	r31, X
    23a0:	ce 01       	movw	r24, r28
    23a2:	09 95       	icall

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
  u8g2->clip_x0 = 0;
    23a4:	19 aa       	std	Y+49, r1	; 0x31
  u8g2->clip_y0 = 0;
    23a6:	1b aa       	std	Y+51, r1	; 0x33
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    23a8:	8f ef       	ldi	r24, 0xFF	; 255
    23aa:	8a ab       	std	Y+50, r24	; 0x32
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    23ac:	8c ab       	std	Y+52, r24	; 0x34
  
  u8g2->cb->update_page_win(u8g2);
    23ae:	e8 a1       	ldd	r30, Y+32	; 0x20
    23b0:	f9 a1       	ldd	r31, Y+33	; 0x21
    23b2:	02 80       	ldd	r0, Z+2	; 0x02
    23b4:	f3 81       	ldd	r31, Z+3	; 0x03
    23b6:	e0 2d       	mov	r30, r0
    23b8:	ce 01       	movw	r24, r28
    23ba:	09 95       	icall
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    23bc:	ce 01       	movw	r24, r28
    23be:	0e 94 92 0e 	call	0x1d24	; 0x1d24 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    23c2:	cb 5b       	subi	r28, 0xBB	; 187
    23c4:	df 4f       	sbci	r29, 0xFF	; 255
    23c6:	18 82       	st	Y, r1
#endif
}
    23c8:	df 91       	pop	r29
    23ca:	cf 91       	pop	r28
    23cc:	1f 91       	pop	r17
    23ce:	0f 91       	pop	r16
    23d0:	08 95       	ret

000023d2 <u8x8_ascii_next>:
      x+=th;
      cnt++;
    }
  }
  return cnt;
}
    23d2:	61 11       	cpse	r22, r1
    23d4:	03 c0       	rjmp	.+6      	; 0x23dc <u8x8_ascii_next+0xa>
    23d6:	8f ef       	ldi	r24, 0xFF	; 255
    23d8:	9f ef       	ldi	r25, 0xFF	; 255
    23da:	08 95       	ret
    23dc:	6a 30       	cpi	r22, 0x0A	; 10
    23de:	d9 f3       	breq	.-10     	; 0x23d6 <u8x8_ascii_next+0x4>
    23e0:	86 2f       	mov	r24, r22
    23e2:	90 e0       	ldi	r25, 0x00	; 0
    23e4:	08 95       	ret

000023e6 <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    23e6:	fc 01       	movw	r30, r24
    23e8:	10 8e       	std	Z+24, r1	; 0x18
    23ea:	08 95       	ret

000023ec <u8x8_byte_avr_hw_i2c>:
  
  return 1;
}

uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    23ec:	0f 93       	push	r16
    23ee:	1f 93       	push	r17
    23f0:	cf 93       	push	r28
    23f2:	df 93       	push	r29
	uint8_t *data;
	switch(msg){
    23f4:	68 31       	cpi	r22, 0x18	; 24
    23f6:	d9 f1       	breq	.+118    	; 0x246e <u8x8_byte_avr_hw_i2c+0x82>
    23f8:	d0 f4       	brcc	.+52     	; 0x242e <u8x8_byte_avr_hw_i2c+0x42>
    23fa:	64 31       	cpi	r22, 0x14	; 20
    23fc:	29 f1       	breq	.+74     	; 0x2448 <u8x8_byte_avr_hw_i2c+0x5c>
    23fe:	67 31       	cpi	r22, 0x17	; 23
    2400:	d1 f4       	brne	.+52     	; 0x2436 <u8x8_byte_avr_hw_i2c+0x4a>
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    2402:	0f ef       	ldi	r16, 0xFF	; 255
    2404:	04 0f       	add	r16, r20
    2406:	44 23       	and	r20, r20
    2408:	61 f0       	breq	.+24     	; 0x2422 <u8x8_byte_avr_hw_i2c+0x36>
    240a:	e9 01       	movw	r28, r18
    240c:	10 e0       	ldi	r17, 0x00	; 0
    240e:	0f 5f       	subi	r16, 0xFF	; 255
    2410:	1f 4f       	sbci	r17, 0xFF	; 255
    2412:	02 0f       	add	r16, r18
    2414:	13 1f       	adc	r17, r19
				i2c_write(*data++);
    2416:	89 91       	ld	r24, Y+
    2418:	0e 94 86 07 	call	0xf0c	; 0xf0c <i2c_write>
{
	uint8_t *data;
	switch(msg){
		case U8X8_MSG_BYTE_SEND:
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
    241c:	c0 17       	cp	r28, r16
    241e:	d1 07       	cpc	r29, r17
    2420:	d1 f7       	brne	.-12     	; 0x2416 <u8x8_byte_avr_hw_i2c+0x2a>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    2422:	81 e0       	ldi	r24, 0x01	; 1
}
    2424:	df 91       	pop	r29
    2426:	cf 91       	pop	r28
    2428:	1f 91       	pop	r17
    242a:	0f 91       	pop	r16
    242c:	08 95       	ret
}

uint8_t u8x8_byte_avr_hw_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
	uint8_t *data;
	switch(msg){
    242e:	69 31       	cpi	r22, 0x19	; 25
    2430:	41 f0       	breq	.+16     	; 0x2442 <u8x8_byte_avr_hw_i2c+0x56>
    2432:	60 32       	cpi	r22, 0x20	; 32
    2434:	b1 f3       	breq	.-20     	; 0x2422 <u8x8_byte_avr_hw_i2c+0x36>
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
			break;
		default:
			return 0;
    2436:	80 e0       	ldi	r24, 0x00	; 0
	}
	return 1;
}
    2438:	df 91       	pop	r29
    243a:	cf 91       	pop	r28
    243c:	1f 91       	pop	r17
    243e:	0f 91       	pop	r16
    2440:	08 95       	ret
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
			break;
		case U8X8_MSG_BYTE_END_TRANSFER:
			i2c_stop();
    2442:	0e 94 77 07 	call	0xeee	; 0xeee <i2c_stop>
    2446:	ed cf       	rjmp	.-38     	; 0x2422 <u8x8_byte_avr_hw_i2c+0x36>
			data = (uint8_t *)arg_ptr;
			while( arg_int-- )
				i2c_write(*data++);
			break;
		case U8X8_MSG_BYTE_INIT:
			i2c_init(u8x8->display_info->i2c_bus_clock_100kHz * 100000L);
    2448:	dc 01       	movw	r26, r24
    244a:	ed 91       	ld	r30, X+
    244c:	fc 91       	ld	r31, X
    244e:	a5 85       	ldd	r26, Z+13	; 0x0d
    2450:	b0 e0       	ldi	r27, 0x00	; 0
    2452:	20 ea       	ldi	r18, 0xA0	; 160
    2454:	36 e8       	ldi	r19, 0x86	; 134
    2456:	41 e0       	ldi	r20, 0x01	; 1
    2458:	50 e0       	ldi	r21, 0x00	; 0
    245a:	0e 94 67 15 	call	0x2ace	; 0x2ace <__muluhisi3>
    245e:	0e 94 22 07 	call	0xe44	; 0xe44 <i2c_init>
			i2c_stop();
			break;
		default:
			return 0;
	}
	return 1;
    2462:	81 e0       	ldi	r24, 0x01	; 1
}
    2464:	df 91       	pop	r29
    2466:	cf 91       	pop	r28
    2468:	1f 91       	pop	r17
    246a:	0f 91       	pop	r16
    246c:	08 95       	ret
			break;
		case U8X8_MSG_BYTE_SET_DC:
			/* ignored for i2c */
			break;
		case U8X8_MSG_BYTE_START_TRANSFER:
			i2c_start_wait(u8x8_GetI2CAddress(u8x8)+I2C_WRITE);
    246e:	fc 01       	movw	r30, r24
    2470:	86 89       	ldd	r24, Z+22	; 0x16
    2472:	0e 94 38 07 	call	0xe70	; 0xe70 <i2c_start_wait>
    2476:	d5 cf       	rjmp	.-86     	; 0x2422 <u8x8_byte_avr_hw_i2c+0x36>

00002478 <u8x8_avr_delay>:
}

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    2478:	6a 32       	cpi	r22, 0x2A	; 42
    247a:	61 f0       	breq	.+24     	; 0x2494 <u8x8_avr_delay+0x1c>
    247c:	20 f1       	brcs	.+72     	; 0x24c6 <u8x8_avr_delay+0x4e>
    247e:	6b 32       	cpi	r22, 0x2B	; 43
    2480:	69 f0       	breq	.+26     	; 0x249c <u8x8_avr_delay+0x24>
    2482:	6c 32       	cpi	r22, 0x2C	; 44
    2484:	f1 f4       	brne	.+60     	; 0x24c2 <u8x8_avr_delay+0x4a>
			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
				break;

			__asm__ __volatile__ (
    2486:	81 e0       	ldi	r24, 0x01	; 1
    2488:	08 95       	ret
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    248a:	85 e3       	ldi	r24, 0x35	; 53
    248c:	8a 95       	dec	r24
    248e:	f1 f7       	brne	.-4      	; 0x248c <u8x8_avr_delay+0x14>
    2490:	00 00       	nop
    2492:	41 50       	subi	r20, 0x01	; 1
			  "1: sbiw %0,1" "\n\t"  // 2 cycles
			  "brne 1b":"=w" (cycles):"0" (cycles)  // 2 cycles
			);
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
    2494:	41 11       	cpse	r20, r1
    2496:	f9 cf       	rjmp	.-14     	; 0x248a <u8x8_avr_delay+0x12>
			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
				break;

			__asm__ __volatile__ (
    2498:	81 e0       	ldi	r24, 0x01	; 1
    249a:	08 95       	ret
			#define CALL_CYCLES 26UL
			#define CALC_CYCLES 4UL
			#define RETURN_CYCLES 4UL
			#define CYCLES_PER_LOOP 4UL

			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);
    249c:	24 2f       	mov	r18, r20
    249e:	30 e0       	ldi	r19, 0x00	; 0
    24a0:	a4 e6       	ldi	r26, 0x64	; 100
    24a2:	b0 e0       	ldi	r27, 0x00	; 0
    24a4:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__umulhisi3>
    24a8:	28 ef       	ldi	r18, 0xF8	; 248
    24aa:	30 e0       	ldi	r19, 0x00	; 0
    24ac:	40 e0       	ldi	r20, 0x00	; 0
    24ae:	50 e0       	ldi	r21, 0x00	; 0
    24b0:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
    24b4:	23 32       	cpi	r18, 0x23	; 35
    24b6:	38 f7       	brcc	.-50     	; 0x2486 <u8x8_avr_delay+0xe>
				break;

			__asm__ __volatile__ (
    24b8:	82 2f       	mov	r24, r18
    24ba:	01 97       	sbiw	r24, 0x01	; 1
    24bc:	f1 f7       	brne	.-4      	; 0x24ba <u8x8_avr_delay+0x42>
    24be:	81 e0       	ldi	r24, 0x01	; 1
    24c0:	08 95       	ret
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
			break;
		default:
			return 0;
    24c2:	80 e0       	ldi	r24, 0x00	; 0
	}

	return 1;
}
    24c4:	08 95       	ret
}

uint8_t u8x8_avr_delay (u8x8_t * u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr) {
	uint8_t cycles;

	switch(msg) {
    24c6:	69 32       	cpi	r22, 0x29	; 41
    24c8:	41 f0       	breq	.+16     	; 0x24da <u8x8_avr_delay+0x62>
    24ca:	fb cf       	rjmp	.-10     	; 0x24c2 <u8x8_avr_delay+0x4a>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    24cc:	8f e9       	ldi	r24, 0x9F	; 159
    24ce:	9f e0       	ldi	r25, 0x0F	; 15
    24d0:	01 97       	sbiw	r24, 0x01	; 1
    24d2:	f1 f7       	brne	.-4      	; 0x24d0 <u8x8_avr_delay+0x58>
    24d4:	00 c0       	rjmp	.+0      	; 0x24d6 <u8x8_avr_delay+0x5e>
    24d6:	00 00       	nop
    24d8:	41 50       	subi	r20, 0x01	; 1
			break;
		case U8X8_MSG_DELAY_10MICRO: // delay arg_int * 10 micro seconds
			while( arg_int-- ) _delay_us(10);
			break;
		case U8X8_MSG_DELAY_MILLI:  // delay arg_int * 1 milli second
			while( arg_int-- ) _delay_ms(1);
    24da:	41 11       	cpse	r20, r1
    24dc:	f7 cf       	rjmp	.-18     	; 0x24cc <u8x8_avr_delay+0x54>
			cycles = (100UL * arg_int) / (P_CPU_NS * CYCLES_PER_LOOP);

			if (cycles > CALL_CYCLES + RETURN_CYCLES + CALC_CYCLES)
				break;

			__asm__ __volatile__ (
    24de:	81 e0       	ldi	r24, 0x01	; 1
    24e0:	08 95       	ret

000024e2 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    24e2:	9a 01       	movw	r18, r20
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    24e4:	dc 01       	movw	r26, r24
    24e6:	18 96       	adiw	r26, 0x08	; 8
    24e8:	ed 91       	ld	r30, X+
    24ea:	fc 91       	ld	r31, X
    24ec:	19 97       	sbiw	r26, 0x09	; 9
    24ee:	46 2f       	mov	r20, r22
    24f0:	67 e1       	ldi	r22, 0x17	; 23
    24f2:	09 94       	ijmp

000024f4 <u8x8_byte_SendByte>:
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    24f4:	cf 93       	push	r28
    24f6:	df 93       	push	r29
    24f8:	1f 92       	push	r1
    24fa:	cd b7       	in	r28, 0x3d	; 61
    24fc:	de b7       	in	r29, 0x3e	; 62
    24fe:	69 83       	std	Y+1, r22	; 0x01
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    2500:	ae 01       	movw	r20, r28
    2502:	4f 5f       	subi	r20, 0xFF	; 255
    2504:	5f 4f       	sbci	r21, 0xFF	; 255
    2506:	61 e0       	ldi	r22, 0x01	; 1
    2508:	0e 94 71 12 	call	0x24e2	; 0x24e2 <u8x8_byte_SendBytes>
}
    250c:	0f 90       	pop	r0
    250e:	df 91       	pop	r29
    2510:	cf 91       	pop	r28
    2512:	08 95       	ret

00002514 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    2514:	dc 01       	movw	r26, r24
    2516:	18 96       	adiw	r26, 0x08	; 8
    2518:	ed 91       	ld	r30, X+
    251a:	fc 91       	ld	r31, X
    251c:	19 97       	sbiw	r26, 0x09	; 9
    251e:	20 e0       	ldi	r18, 0x00	; 0
    2520:	30 e0       	ldi	r19, 0x00	; 0
    2522:	40 e0       	ldi	r20, 0x00	; 0
    2524:	68 e1       	ldi	r22, 0x18	; 24
    2526:	09 94       	ijmp

00002528 <u8x8_byte_EndTransfer>:
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    2528:	dc 01       	movw	r26, r24
    252a:	18 96       	adiw	r26, 0x08	; 8
    252c:	ed 91       	ld	r30, X+
    252e:	fc 91       	ld	r31, X
    2530:	19 97       	sbiw	r26, 0x09	; 9
    2532:	20 e0       	ldi	r18, 0x00	; 0
    2534:	30 e0       	ldi	r19, 0x00	; 0
    2536:	40 e0       	ldi	r20, 0x00	; 0
    2538:	69 e1       	ldi	r22, 0x19	; 25
    253a:	09 94       	ijmp

0000253c <u8x8_i2c_data_transfer>:
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, 0x0f8);
      u8x8_byte_SendByte(u8x8, arg_int & 0x0f0);
      u8x8_byte_SendByte(u8x8, arg_int << 4);
      break;
    253c:	ef 92       	push	r14
    253e:	ff 92       	push	r15
    2540:	1f 93       	push	r17
    2542:	cf 93       	push	r28
    2544:	df 93       	push	r29
    2546:	ec 01       	movw	r28, r24
    2548:	16 2f       	mov	r17, r22
    254a:	7a 01       	movw	r14, r20
    254c:	0e 94 8a 12 	call	0x2514	; 0x2514 <u8x8_byte_StartTransfer>
    2550:	60 e4       	ldi	r22, 0x40	; 64
    2552:	ce 01       	movw	r24, r28
    2554:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <u8x8_byte_SendByte>
    2558:	e8 85       	ldd	r30, Y+8	; 0x08
    255a:	f9 85       	ldd	r31, Y+9	; 0x09
    255c:	97 01       	movw	r18, r14
    255e:	41 2f       	mov	r20, r17
    2560:	67 e1       	ldi	r22, 0x17	; 23
    2562:	ce 01       	movw	r24, r28
    2564:	09 95       	icall
    2566:	ce 01       	movw	r24, r28
    2568:	df 91       	pop	r29
    256a:	cf 91       	pop	r28
    256c:	1f 91       	pop	r17
    256e:	ff 90       	pop	r15
    2570:	ef 90       	pop	r14
    2572:	0c 94 94 12 	jmp	0x2528	; 0x2528 <u8x8_byte_EndTransfer>

00002576 <u8x8_cad_SendCmd>:
    2576:	46 2f       	mov	r20, r22
    2578:	dc 01       	movw	r26, r24
    257a:	16 96       	adiw	r26, 0x06	; 6
    257c:	ed 91       	ld	r30, X+
    257e:	fc 91       	ld	r31, X
    2580:	17 97       	sbiw	r26, 0x07	; 7
    2582:	20 e0       	ldi	r18, 0x00	; 0
    2584:	30 e0       	ldi	r19, 0x00	; 0
    2586:	65 e1       	ldi	r22, 0x15	; 21
    2588:	09 94       	ijmp

0000258a <u8x8_cad_SendArg>:
    258a:	46 2f       	mov	r20, r22
    258c:	dc 01       	movw	r26, r24
    258e:	16 96       	adiw	r26, 0x06	; 6
    2590:	ed 91       	ld	r30, X+
    2592:	fc 91       	ld	r31, X
    2594:	17 97       	sbiw	r26, 0x07	; 7
    2596:	20 e0       	ldi	r18, 0x00	; 0
    2598:	30 e0       	ldi	r19, 0x00	; 0
    259a:	66 e1       	ldi	r22, 0x16	; 22
    259c:	09 94       	ijmp

0000259e <u8x8_cad_SendData>:
    259e:	9a 01       	movw	r18, r20
    25a0:	dc 01       	movw	r26, r24
    25a2:	16 96       	adiw	r26, 0x06	; 6
    25a4:	ed 91       	ld	r30, X+
    25a6:	fc 91       	ld	r31, X
    25a8:	17 97       	sbiw	r26, 0x07	; 7
    25aa:	46 2f       	mov	r20, r22
    25ac:	67 e1       	ldi	r22, 0x17	; 23
    25ae:	09 94       	ijmp

000025b0 <u8x8_cad_StartTransfer>:
    25b0:	dc 01       	movw	r26, r24
    25b2:	16 96       	adiw	r26, 0x06	; 6
    25b4:	ed 91       	ld	r30, X+
    25b6:	fc 91       	ld	r31, X
    25b8:	17 97       	sbiw	r26, 0x07	; 7
    25ba:	20 e0       	ldi	r18, 0x00	; 0
    25bc:	30 e0       	ldi	r19, 0x00	; 0
    25be:	40 e0       	ldi	r20, 0x00	; 0
    25c0:	68 e1       	ldi	r22, 0x18	; 24
    25c2:	09 94       	ijmp

000025c4 <u8x8_cad_EndTransfer>:
    25c4:	dc 01       	movw	r26, r24
    25c6:	16 96       	adiw	r26, 0x06	; 6
    25c8:	ed 91       	ld	r30, X+
    25ca:	fc 91       	ld	r31, X
    25cc:	17 97       	sbiw	r26, 0x07	; 7
    25ce:	20 e0       	ldi	r18, 0x00	; 0
    25d0:	30 e0       	ldi	r19, 0x00	; 0
    25d2:	40 e0       	ldi	r20, 0x00	; 0
    25d4:	69 e1       	ldi	r22, 0x19	; 25
    25d6:	09 94       	ijmp

000025d8 <u8x8_cad_SendSequence>:
    25d8:	ef 92       	push	r14
    25da:	ff 92       	push	r15
    25dc:	0f 93       	push	r16
    25de:	1f 93       	push	r17
    25e0:	cf 93       	push	r28
    25e2:	df 93       	push	r29
    25e4:	1f 92       	push	r1
    25e6:	cd b7       	in	r28, 0x3d	; 61
    25e8:	de b7       	in	r29, 0x3e	; 62
    25ea:	7c 01       	movw	r14, r24
    25ec:	8b 01       	movw	r16, r22
    25ee:	d8 01       	movw	r26, r16
    25f0:	6c 91       	ld	r22, X
    25f2:	67 31       	cpi	r22, 0x17	; 23
    25f4:	99 f0       	breq	.+38     	; 0x261c <u8x8_cad_SendSequence+0x44>
    25f6:	68 31       	cpi	r22, 0x18	; 24
    25f8:	f0 f0       	brcs	.+60     	; 0x2636 <u8x8_cad_SendSequence+0x5e>
    25fa:	6a 31       	cpi	r22, 0x1A	; 26
    25fc:	a8 f1       	brcs	.+106    	; 0x2668 <u8x8_cad_SendSequence+0x90>
    25fe:	6e 3f       	cpi	r22, 0xFE	; 254
    2600:	59 f5       	brne	.+86     	; 0x2658 <u8x8_cad_SendSequence+0x80>
    2602:	f8 01       	movw	r30, r16
    2604:	41 81       	ldd	r20, Z+1	; 0x01
    2606:	49 83       	std	Y+1, r20	; 0x01
    2608:	69 e2       	ldi	r22, 0x29	; 41
    260a:	c7 01       	movw	r24, r14
    260c:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_gpio_call>
    2610:	0e 5f       	subi	r16, 0xFE	; 254
    2612:	1f 4f       	sbci	r17, 0xFF	; 255
    2614:	d8 01       	movw	r26, r16
    2616:	6c 91       	ld	r22, X
    2618:	67 31       	cpi	r22, 0x17	; 23
    261a:	69 f7       	brne	.-38     	; 0x25f6 <u8x8_cad_SendSequence+0x1e>
    261c:	f8 01       	movw	r30, r16
    261e:	81 81       	ldd	r24, Z+1	; 0x01
    2620:	89 83       	std	Y+1, r24	; 0x01
    2622:	ae 01       	movw	r20, r28
    2624:	4f 5f       	subi	r20, 0xFF	; 255
    2626:	5f 4f       	sbci	r21, 0xFF	; 255
    2628:	61 e0       	ldi	r22, 0x01	; 1
    262a:	c7 01       	movw	r24, r14
    262c:	0e 94 cf 12 	call	0x259e	; 0x259e <u8x8_cad_SendData>
    2630:	0e 5f       	subi	r16, 0xFE	; 254
    2632:	1f 4f       	sbci	r17, 0xFF	; 255
    2634:	dc cf       	rjmp	.-72     	; 0x25ee <u8x8_cad_SendSequence+0x16>
    2636:	65 31       	cpi	r22, 0x15	; 21
    2638:	78 f0       	brcs	.+30     	; 0x2658 <u8x8_cad_SendSequence+0x80>
    263a:	f8 01       	movw	r30, r16
    263c:	41 81       	ldd	r20, Z+1	; 0x01
    263e:	49 83       	std	Y+1, r20	; 0x01
    2640:	d7 01       	movw	r26, r14
    2642:	16 96       	adiw	r26, 0x06	; 6
    2644:	ed 91       	ld	r30, X+
    2646:	fc 91       	ld	r31, X
    2648:	17 97       	sbiw	r26, 0x07	; 7
    264a:	20 e0       	ldi	r18, 0x00	; 0
    264c:	30 e0       	ldi	r19, 0x00	; 0
    264e:	c7 01       	movw	r24, r14
    2650:	09 95       	icall
    2652:	0e 5f       	subi	r16, 0xFE	; 254
    2654:	1f 4f       	sbci	r17, 0xFF	; 255
    2656:	cb cf       	rjmp	.-106    	; 0x25ee <u8x8_cad_SendSequence+0x16>
    2658:	0f 90       	pop	r0
    265a:	df 91       	pop	r29
    265c:	cf 91       	pop	r28
    265e:	1f 91       	pop	r17
    2660:	0f 91       	pop	r16
    2662:	ff 90       	pop	r15
    2664:	ef 90       	pop	r14
    2666:	08 95       	ret
    2668:	0f 5f       	subi	r16, 0xFF	; 255
    266a:	1f 4f       	sbci	r17, 0xFF	; 255
    266c:	d7 01       	movw	r26, r14
    266e:	16 96       	adiw	r26, 0x06	; 6
    2670:	ed 91       	ld	r30, X+
    2672:	fc 91       	ld	r31, X
    2674:	17 97       	sbiw	r26, 0x07	; 7
    2676:	20 e0       	ldi	r18, 0x00	; 0
    2678:	30 e0       	ldi	r19, 0x00	; 0
    267a:	40 e0       	ldi	r20, 0x00	; 0
    267c:	c7 01       	movw	r24, r14
    267e:	09 95       	icall
    2680:	b6 cf       	rjmp	.-148    	; 0x25ee <u8x8_cad_SendSequence+0x16>

00002682 <u8x8_cad_ssd13xx_i2c>:
    u8x8_byte_EndTransfer(u8x8);
}

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2682:	ef 92       	push	r14
    2684:	ff 92       	push	r15
    2686:	0f 93       	push	r16
    2688:	1f 93       	push	r17
    268a:	cf 93       	push	r28
    268c:	7c 01       	movw	r14, r24
    268e:	c4 2f       	mov	r28, r20
    2690:	89 01       	movw	r16, r18
  uint8_t *p;
  switch(msg)
    2692:	67 31       	cpi	r22, 0x17	; 23
    2694:	d8 f4       	brcc	.+54     	; 0x26cc <u8x8_cad_ssd13xx_i2c+0x4a>
    2696:	65 31       	cpi	r22, 0x15	; 21
    2698:	c8 f5       	brcc	.+114    	; 0x270c <u8x8_cad_ssd13xx_i2c+0x8a>
    269a:	64 31       	cpi	r22, 0x14	; 20
    269c:	09 f0       	breq	.+2      	; 0x26a0 <u8x8_cad_ssd13xx_i2c+0x1e>
    269e:	44 c0       	rjmp	.+136    	; 0x2728 <u8x8_cad_ssd13xx_i2c+0xa6>
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    26a0:	dc 01       	movw	r26, r24
    26a2:	56 96       	adiw	r26, 0x16	; 22
    26a4:	8c 91       	ld	r24, X
    26a6:	56 97       	sbiw	r26, 0x16	; 22
    26a8:	8f 3f       	cpi	r24, 0xFF	; 255
    26aa:	09 f4       	brne	.+2      	; 0x26ae <u8x8_cad_ssd13xx_i2c+0x2c>
    26ac:	44 c0       	rjmp	.+136    	; 0x2736 <u8x8_cad_ssd13xx_i2c+0xb4>
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    26ae:	d7 01       	movw	r26, r14
    26b0:	18 96       	adiw	r26, 0x08	; 8
    26b2:	ed 91       	ld	r30, X+
    26b4:	fc 91       	ld	r31, X
    26b6:	19 97       	sbiw	r26, 0x09	; 9
    26b8:	98 01       	movw	r18, r16
    26ba:	4c 2f       	mov	r20, r28
    26bc:	64 e1       	ldi	r22, 0x14	; 20
    26be:	c7 01       	movw	r24, r14
      break;
    default:
      return 0;
  }
  return 1;
}
    26c0:	cf 91       	pop	r28
    26c2:	1f 91       	pop	r17
    26c4:	0f 91       	pop	r16
    26c6:	ff 90       	pop	r15
    26c8:	ef 90       	pop	r14
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    26ca:	09 94       	ijmp

/* classic version: will put a start/stop condition around each command and arg */
uint8_t u8x8_cad_ssd13xx_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t *p;
  switch(msg)
    26cc:	67 31       	cpi	r22, 0x17	; 23
    26ce:	81 f0       	breq	.+32     	; 0x26f0 <u8x8_cad_ssd13xx_i2c+0x6e>
    26d0:	6a 31       	cpi	r22, 0x1A	; 26
    26d2:	50 f5       	brcc	.+84     	; 0x2728 <u8x8_cad_ssd13xx_i2c+0xa6>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
    26d4:	81 e0       	ldi	r24, 0x01	; 1
}
    26d6:	cf 91       	pop	r28
    26d8:	1f 91       	pop	r17
    26da:	0f 91       	pop	r16
    26dc:	ff 90       	pop	r15
    26de:	ef 90       	pop	r14
    26e0:	08 95       	ret
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    26e2:	68 e1       	ldi	r22, 0x18	; 24
    26e4:	c7 01       	movw	r24, r14
    26e6:	0e 94 9e 12 	call	0x253c	; 0x253c <u8x8_i2c_data_transfer>
	arg_int-=24;
    26ea:	c8 51       	subi	r28, 0x18	; 24
	p+=24;
    26ec:	08 5e       	subi	r16, 0xE8	; 232
    26ee:	1f 4f       	sbci	r17, 0xFF	; 255
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    26f0:	a8 01       	movw	r20, r16
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    26f2:	c9 31       	cpi	r28, 0x19	; 25
    26f4:	b0 f7       	brcc	.-20     	; 0x26e2 <u8x8_cad_ssd13xx_i2c+0x60>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    26f6:	6c 2f       	mov	r22, r28
    26f8:	c7 01       	movw	r24, r14
    26fa:	0e 94 9e 12 	call	0x253c	; 0x253c <u8x8_i2c_data_transfer>
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
  }
  return 1;
    26fe:	81 e0       	ldi	r24, 0x01	; 1
}
    2700:	cf 91       	pop	r28
    2702:	1f 91       	pop	r17
    2704:	0f 91       	pop	r16
    2706:	ff 90       	pop	r15
    2708:	ef 90       	pop	r14
    270a:	08 95       	ret
  {
    case U8X8_MSG_CAD_SEND_CMD:
    case U8X8_MSG_CAD_SEND_ARG:
      /* 7 Nov 2016: Can this be improved?  */
      //u8x8_byte_SetDC(u8x8, 0);
      u8x8_byte_StartTransfer(u8x8);
    270c:	0e 94 8a 12 	call	0x2514	; 0x2514 <u8x8_byte_StartTransfer>
      //u8x8_byte_SendByte(u8x8, u8x8_GetI2CAddress(u8x8));
      u8x8_byte_SendByte(u8x8, 0x000);
    2710:	60 e0       	ldi	r22, 0x00	; 0
    2712:	c7 01       	movw	r24, r14
    2714:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    2718:	6c 2f       	mov	r22, r28
    271a:	c7 01       	movw	r24, r14
    271c:	0e 94 7a 12 	call	0x24f4	; 0x24f4 <u8x8_byte_SendByte>
      u8x8_byte_EndTransfer(u8x8);      
    2720:	c7 01       	movw	r24, r14
    2722:	0e 94 94 12 	call	0x2528	; 0x2528 <u8x8_byte_EndTransfer>
    2726:	d6 cf       	rjmp	.-84     	; 0x26d4 <u8x8_cad_ssd13xx_i2c+0x52>
    case U8X8_MSG_CAD_START_TRANSFER:
    case U8X8_MSG_CAD_END_TRANSFER:
      /* cad transfer commands are ignored */
      break;
    default:
      return 0;
    2728:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
}
    272a:	cf 91       	pop	r28
    272c:	1f 91       	pop	r17
    272e:	0f 91       	pop	r16
    2730:	ff 90       	pop	r15
    2732:	ef 90       	pop	r14
    2734:	08 95       	ret
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
    2736:	88 e7       	ldi	r24, 0x78	; 120
    2738:	56 96       	adiw	r26, 0x16	; 22
    273a:	8c 93       	st	X, r24
    273c:	b8 cf       	rjmp	.-144    	; 0x26ae <u8x8_cad_ssd13xx_i2c+0x2c>

0000273e <u8x8_d_helper_display_setup_memory>:
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
}

void u8x8_SetFlipMode(u8x8_t *u8x8, uint8_t mode)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_FLIP_MODE, mode, NULL);  
    273e:	fc 01       	movw	r30, r24
    2740:	71 83       	std	Z+1, r23	; 0x01
    2742:	60 83       	st	Z, r22
    2744:	fb 01       	movw	r30, r22
    2746:	22 89       	ldd	r18, Z+18	; 0x12
    2748:	fc 01       	movw	r30, r24
    274a:	24 8b       	std	Z+20, r18	; 0x14
    274c:	08 95       	ret

0000274e <u8x8_d_helper_display_init>:
    274e:	cf 93       	push	r28
    2750:	df 93       	push	r29
    2752:	ec 01       	movw	r28, r24
    2754:	ea 85       	ldd	r30, Y+10	; 0x0a
    2756:	fb 85       	ldd	r31, Y+11	; 0x0b
    2758:	20 e0       	ldi	r18, 0x00	; 0
    275a:	30 e0       	ldi	r19, 0x00	; 0
    275c:	40 e0       	ldi	r20, 0x00	; 0
    275e:	68 e2       	ldi	r22, 0x28	; 40
    2760:	09 95       	icall
    2762:	ee 81       	ldd	r30, Y+6	; 0x06
    2764:	ff 81       	ldd	r31, Y+7	; 0x07
    2766:	20 e0       	ldi	r18, 0x00	; 0
    2768:	30 e0       	ldi	r19, 0x00	; 0
    276a:	40 e0       	ldi	r20, 0x00	; 0
    276c:	64 e1       	ldi	r22, 0x14	; 20
    276e:	ce 01       	movw	r24, r28
    2770:	09 95       	icall
    2772:	41 e0       	ldi	r20, 0x01	; 1
    2774:	6b e4       	ldi	r22, 0x4B	; 75
    2776:	ce 01       	movw	r24, r28
    2778:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_gpio_call>
    277c:	e8 81       	ld	r30, Y
    277e:	f9 81       	ldd	r31, Y+1	; 0x01
    2780:	44 81       	ldd	r20, Z+4	; 0x04
    2782:	69 e2       	ldi	r22, 0x29	; 41
    2784:	ce 01       	movw	r24, r28
    2786:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_gpio_call>
    278a:	40 e0       	ldi	r20, 0x00	; 0
    278c:	6b e4       	ldi	r22, 0x4B	; 75
    278e:	ce 01       	movw	r24, r28
    2790:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_gpio_call>
    2794:	e8 81       	ld	r30, Y
    2796:	f9 81       	ldd	r31, Y+1	; 0x01
    2798:	44 81       	ldd	r20, Z+4	; 0x04
    279a:	69 e2       	ldi	r22, 0x29	; 41
    279c:	ce 01       	movw	r24, r28
    279e:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_gpio_call>
    27a2:	41 e0       	ldi	r20, 0x01	; 1
    27a4:	6b e4       	ldi	r22, 0x4B	; 75
    27a6:	ce 01       	movw	r24, r28
    27a8:	0e 94 e0 14 	call	0x29c0	; 0x29c0 <u8x8_gpio_call>
    27ac:	e8 81       	ld	r30, Y
    27ae:	f9 81       	ldd	r31, Y+1	; 0x01
    27b0:	45 81       	ldd	r20, Z+5	; 0x05
    27b2:	69 e2       	ldi	r22, 0x29	; 41
    27b4:	ce 01       	movw	r24, r28
    27b6:	df 91       	pop	r29
    27b8:	cf 91       	pop	r28
    27ba:	0c 94 e0 14 	jmp	0x29c0	; 0x29c0 <u8x8_gpio_call>

000027be <u8x8_DrawTile>:
    27be:	0f 93       	push	r16
    27c0:	1f 93       	push	r17
    27c2:	cf 93       	push	r28
    27c4:	df 93       	push	r29
    27c6:	00 d0       	rcall	.+0      	; 0x27c8 <u8x8_DrawTile+0xa>
    27c8:	00 d0       	rcall	.+0      	; 0x27ca <u8x8_DrawTile+0xc>
    27ca:	1f 92       	push	r1
    27cc:	cd b7       	in	r28, 0x3d	; 61
    27ce:	de b7       	in	r29, 0x3e	; 62
    27d0:	6c 83       	std	Y+4, r22	; 0x04
    27d2:	4d 83       	std	Y+5, r20	; 0x05
    27d4:	2b 83       	std	Y+3, r18	; 0x03
    27d6:	1a 83       	std	Y+2, r17	; 0x02
    27d8:	09 83       	std	Y+1, r16	; 0x01
    27da:	dc 01       	movw	r26, r24
    27dc:	14 96       	adiw	r26, 0x04	; 4
    27de:	ed 91       	ld	r30, X+
    27e0:	fc 91       	ld	r31, X
    27e2:	15 97       	sbiw	r26, 0x05	; 5
    27e4:	9e 01       	movw	r18, r28
    27e6:	2f 5f       	subi	r18, 0xFF	; 255
    27e8:	3f 4f       	sbci	r19, 0xFF	; 255
    27ea:	41 e0       	ldi	r20, 0x01	; 1
    27ec:	6f e0       	ldi	r22, 0x0F	; 15
    27ee:	09 95       	icall
    27f0:	0f 90       	pop	r0
    27f2:	0f 90       	pop	r0
    27f4:	0f 90       	pop	r0
    27f6:	0f 90       	pop	r0
    27f8:	0f 90       	pop	r0
    27fa:	df 91       	pop	r29
    27fc:	cf 91       	pop	r28
    27fe:	1f 91       	pop	r17
    2800:	0f 91       	pop	r16
    2802:	08 95       	ret

00002804 <u8x8_SetupMemory>:
    2804:	dc 01       	movw	r26, r24
    2806:	14 96       	adiw	r26, 0x04	; 4
    2808:	ed 91       	ld	r30, X+
    280a:	fc 91       	ld	r31, X
    280c:	15 97       	sbiw	r26, 0x05	; 5
    280e:	20 e0       	ldi	r18, 0x00	; 0
    2810:	30 e0       	ldi	r19, 0x00	; 0
    2812:	40 e0       	ldi	r20, 0x00	; 0
    2814:	69 e0       	ldi	r22, 0x09	; 9
    2816:	09 94       	ijmp

00002818 <u8x8_InitDisplay>:
    2818:	dc 01       	movw	r26, r24
    281a:	14 96       	adiw	r26, 0x04	; 4
    281c:	ed 91       	ld	r30, X+
    281e:	fc 91       	ld	r31, X
    2820:	15 97       	sbiw	r26, 0x05	; 5
    2822:	20 e0       	ldi	r18, 0x00	; 0
    2824:	30 e0       	ldi	r19, 0x00	; 0
    2826:	40 e0       	ldi	r20, 0x00	; 0
    2828:	6a e0       	ldi	r22, 0x0A	; 10
    282a:	09 94       	ijmp

0000282c <u8x8_SetPowerSave>:
    282c:	46 2f       	mov	r20, r22
    282e:	dc 01       	movw	r26, r24
    2830:	14 96       	adiw	r26, 0x04	; 4
    2832:	ed 91       	ld	r30, X+
    2834:	fc 91       	ld	r31, X
    2836:	15 97       	sbiw	r26, 0x05	; 5
    2838:	20 e0       	ldi	r18, 0x00	; 0
    283a:	30 e0       	ldi	r19, 0x00	; 0
    283c:	6b e0       	ldi	r22, 0x0B	; 11
    283e:	09 94       	ijmp

00002840 <u8x8_SetContrast>:
}

void u8x8_SetContrast(u8x8_t *u8x8, uint8_t value)
{
    2840:	46 2f       	mov	r20, r22
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
    2842:	dc 01       	movw	r26, r24
    2844:	14 96       	adiw	r26, 0x04	; 4
    2846:	ed 91       	ld	r30, X+
    2848:	fc 91       	ld	r31, X
    284a:	15 97       	sbiw	r26, 0x05	; 5
    284c:	20 e0       	ldi	r18, 0x00	; 0
    284e:	30 e0       	ldi	r19, 0x00	; 0
    2850:	6e e0       	ldi	r22, 0x0E	; 14
    2852:	09 94       	ijmp

00002854 <u8x8_RefreshDisplay>:
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    2854:	dc 01       	movw	r26, r24
    2856:	14 96       	adiw	r26, 0x04	; 4
    2858:	ed 91       	ld	r30, X+
    285a:	fc 91       	ld	r31, X
    285c:	15 97       	sbiw	r26, 0x05	; 5
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e0       	ldi	r20, 0x00	; 0
    2864:	60 e1       	ldi	r22, 0x10	; 16
    2866:	09 94       	ijmp

00002868 <u8x8_d_sh1106_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    2868:	ef 92       	push	r14
    286a:	ff 92       	push	r15
    286c:	0f 93       	push	r16
    286e:	1f 93       	push	r17
    2870:	cf 93       	push	r28
    2872:	df 93       	push	r29
    2874:	8c 01       	movw	r16, r24
    2876:	c4 2f       	mov	r28, r20
    2878:	79 01       	movw	r14, r18

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    287a:	6d 30       	cpi	r22, 0x0D	; 13
    287c:	09 f4       	brne	.+2      	; 0x2880 <u8x8_d_sh1106_128x64_noname+0x18>
    287e:	81 c0       	rjmp	.+258    	; 0x2982 <u8x8_d_sh1106_128x64_noname+0x11a>
    2880:	08 f4       	brcc	.+2      	; 0x2884 <u8x8_d_sh1106_128x64_noname+0x1c>
    2882:	61 c0       	rjmp	.+194    	; 0x2946 <u8x8_d_sh1106_128x64_noname+0xde>
    2884:	6e 30       	cpi	r22, 0x0E	; 14
    2886:	e9 f1       	breq	.+122    	; 0x2902 <u8x8_d_sh1106_128x64_noname+0x9a>
    2888:	6f 30       	cpi	r22, 0x0F	; 15
    288a:	09 f0       	breq	.+2      	; 0x288e <u8x8_d_sh1106_128x64_noname+0x26>
    288c:	48 c0       	rjmp	.+144    	; 0x291e <u8x8_d_sh1106_128x64_noname+0xb6>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    288e:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    2892:	f7 01       	movw	r30, r14
    2894:	d3 81       	ldd	r29, Z+3	; 0x03
      x *= 8;
    2896:	dd 0f       	add	r29, r29
    2898:	dd 0f       	add	r29, r29
    289a:	dd 0f       	add	r29, r29
      x += u8x8->x_offset;
    289c:	d8 01       	movw	r26, r16
    289e:	54 96       	adiw	r26, 0x14	; 20
    28a0:	8c 91       	ld	r24, X
    28a2:	d8 0f       	add	r29, r24
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    28a4:	60 e4       	ldi	r22, 0x40	; 64
    28a6:	c8 01       	movw	r24, r16
    28a8:	0e 94 bb 12 	call	0x2576	; 0x2576 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    28ac:	6d 2f       	mov	r22, r29
    28ae:	62 95       	swap	r22
    28b0:	6f 70       	andi	r22, 0x0F	; 15
    28b2:	60 61       	ori	r22, 0x10	; 16
    28b4:	c8 01       	movw	r24, r16
    28b6:	0e 94 bb 12 	call	0x2576	; 0x2576 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    28ba:	6d 2f       	mov	r22, r29
    28bc:	6f 70       	andi	r22, 0x0F	; 15
    28be:	c8 01       	movw	r24, r16
    28c0:	0e 94 c5 12 	call	0x258a	; 0x258a <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    28c4:	f7 01       	movw	r30, r14
    28c6:	64 81       	ldd	r22, Z+4	; 0x04
    28c8:	60 6b       	ori	r22, 0xB0	; 176
    28ca:	c8 01       	movw	r24, r16
    28cc:	0e 94 c5 12 	call	0x258a	; 0x258a <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    28d0:	d7 01       	movw	r26, r14
    28d2:	4d 91       	ld	r20, X+
    28d4:	5c 91       	ld	r21, X
    28d6:	11 97       	sbiw	r26, 0x01	; 1
    28d8:	12 96       	adiw	r26, 0x02	; 2
    28da:	6c 91       	ld	r22, X
    28dc:	66 0f       	add	r22, r22
    28de:	66 0f       	add	r22, r22
    28e0:	66 0f       	add	r22, r22
    28e2:	c8 01       	movw	r24, r16
    28e4:	0e 94 cf 12 	call	0x259e	; 0x259e <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    28e8:	c1 50       	subi	r28, 0x01	; 1
      } while( arg_int > 0 );
    28ea:	91 f7       	brne	.-28     	; 0x28d0 <u8x8_d_sh1106_128x64_noname+0x68>
      
      u8x8_cad_EndTransfer(u8x8);
    28ec:	c8 01       	movw	r24, r16
    28ee:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <u8x8_cad_EndTransfer>
};

uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    28f2:	81 e0       	ldi	r24, 0x01	; 1
    default:
      return 0;
  }
  return 1;
    
}
    28f4:	df 91       	pop	r29
    28f6:	cf 91       	pop	r28
    28f8:	1f 91       	pop	r17
    28fa:	0f 91       	pop	r16
    28fc:	ff 90       	pop	r15
    28fe:	ef 90       	pop	r14
    2900:	08 95       	ret
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    2902:	0e 94 d8 12 	call	0x25b0	; 0x25b0 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    2906:	61 e8       	ldi	r22, 0x81	; 129
    2908:	c8 01       	movw	r24, r16
    290a:	0e 94 bb 12 	call	0x2576	; 0x2576 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    290e:	6c 2f       	mov	r22, r28
    2910:	c8 01       	movw	r24, r16
    2912:	0e 94 c5 12 	call	0x258a	; 0x258a <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    2916:	c8 01       	movw	r24, r16
    2918:	0e 94 e2 12 	call	0x25c4	; 0x25c4 <u8x8_cad_EndTransfer>
    291c:	ea cf       	rjmp	.-44     	; 0x28f2 <u8x8_d_sh1106_128x64_noname+0x8a>
uint8_t u8x8_d_sh1106_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
  
  switch(msg)
    291e:	69 30       	cpi	r22, 0x09	; 9
    2920:	19 f1       	breq	.+70     	; 0x2968 <u8x8_d_sh1106_128x64_noname+0x100>
    2922:	6a 30       	cpi	r22, 0x0A	; 10
    2924:	c9 f4       	brne	.+50     	; 0x2958 <u8x8_d_sh1106_128x64_noname+0xf0>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    2926:	c8 01       	movw	r24, r16
    2928:	0e 94 a7 13 	call	0x274e	; 0x274e <u8x8_d_helper_display_init>
      /* maybe use a better init sequence */
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    292c:	61 e9       	ldi	r22, 0x91	; 145
    292e:	71 e0       	ldi	r23, 0x01	; 1
    2930:	c8 01       	movw	r24, r16
    2932:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    2936:	81 e0       	ldi	r24, 0x01	; 1
    
}
    2938:	df 91       	pop	r29
    293a:	cf 91       	pop	r28
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	08 95       	ret

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    2946:	6b 30       	cpi	r22, 0x0B	; 11
    2948:	51 f7       	brne	.-44     	; 0x291e <u8x8_d_sh1106_128x64_noname+0xb6>
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    294a:	41 11       	cpse	r20, r1
    294c:	34 c0       	rjmp	.+104    	; 0x29b6 <u8x8_d_sh1106_128x64_noname+0x14e>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    294e:	6c e8       	ldi	r22, 0x8C	; 140
    2950:	71 e0       	ldi	r23, 0x01	; 1
    2952:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <u8x8_cad_SendSequence>
    2956:	cd cf       	rjmp	.-102    	; 0x28f2 <u8x8_d_sh1106_128x64_noname+0x8a>
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
      break;
    default:
      return 0;
    2958:	80 e0       	ldi	r24, 0x00	; 0
  }
  return 1;
    
}
    295a:	df 91       	pop	r29
    295c:	cf 91       	pop	r28
    295e:	1f 91       	pop	r17
    2960:	0f 91       	pop	r16
    2962:	ff 90       	pop	r15
    2964:	ef 90       	pop	r14
    2966:	08 95       	ret
      /* https://www.mikrocontroller.net/topic/431371 */
      /* the new sequence is added in the winstar constructor (see below), this is kept untouched */
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_sh1106_128x64_noname_display_info);
    2968:	61 e6       	ldi	r22, 0x61	; 97
    296a:	71 e0       	ldi	r23, 0x01	; 1
    296c:	c8 01       	movw	r24, r16
    296e:	0e 94 9f 13 	call	0x273e	; 0x273e <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    2972:	81 e0       	ldi	r24, 0x01	; 1
    
}
    2974:	df 91       	pop	r29
    2976:	cf 91       	pop	r28
    2978:	1f 91       	pop	r17
    297a:	0f 91       	pop	r16
    297c:	ff 90       	pop	r15
    297e:	ef 90       	pop	r14
    2980:	08 95       	ret
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    2982:	41 11       	cpse	r20, r1
    2984:	0c c0       	rjmp	.+24     	; 0x299e <u8x8_d_sh1106_128x64_noname+0x136>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    2986:	60 e8       	ldi	r22, 0x80	; 128
    2988:	71 e0       	ldi	r23, 0x01	; 1
    298a:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    298e:	d8 01       	movw	r26, r16
    2990:	ed 91       	ld	r30, X+
    2992:	fc 91       	ld	r31, X
    2994:	11 97       	sbiw	r26, 0x01	; 1
    2996:	82 89       	ldd	r24, Z+18	; 0x12
    2998:	54 96       	adiw	r26, 0x14	; 20
    299a:	8c 93       	st	X, r24
    299c:	aa cf       	rjmp	.-172    	; 0x28f2 <u8x8_d_sh1106_128x64_noname+0x8a>
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    299e:	69 e7       	ldi	r22, 0x79	; 121
    29a0:	71 e0       	ldi	r23, 0x01	; 1
    29a2:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    29a6:	d8 01       	movw	r26, r16
    29a8:	ed 91       	ld	r30, X+
    29aa:	fc 91       	ld	r31, X
    29ac:	11 97       	sbiw	r26, 0x01	; 1
    29ae:	83 89       	ldd	r24, Z+19	; 0x13
    29b0:	54 96       	adiw	r26, 0x14	; 20
    29b2:	8c 93       	st	X, r24
    29b4:	9e cf       	rjmp	.-196    	; 0x28f2 <u8x8_d_sh1106_128x64_noname+0x8a>
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    29b6:	67 e8       	ldi	r22, 0x87	; 135
    29b8:	71 e0       	ldi	r23, 0x01	; 1
    29ba:	0e 94 ec 12 	call	0x25d8	; 0x25d8 <u8x8_cad_SendSequence>
    29be:	99 cf       	rjmp	.-206    	; 0x28f2 <u8x8_d_sh1106_128x64_noname+0x8a>

000029c0 <u8x8_gpio_call>:
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    29c0:	dc 01       	movw	r26, r24
    29c2:	1a 96       	adiw	r26, 0x0a	; 10
    29c4:	ed 91       	ld	r30, X+
    29c6:	fc 91       	ld	r31, X
    29c8:	1b 97       	sbiw	r26, 0x0b	; 11
    29ca:	20 e0       	ldi	r18, 0x00	; 0
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	09 94       	ijmp

000029d0 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    29d0:	0f 93       	push	r16
    29d2:	1f 93       	push	r17
    29d4:	fc 01       	movw	r30, r24
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
    29d6:	11 82       	std	Z+1, r1	; 0x01
    29d8:	10 82       	st	Z, r1
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
    29da:	15 8a       	std	Z+21, r1	; 0x15
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    29dc:	10 8e       	std	Z+24, r1	; 0x18
    u8x8->bus_clock = 0;		/* issue 769 */
    29de:	14 86       	std	Z+12, r1	; 0x0c
    29e0:	15 86       	std	Z+13, r1	; 0x0d
    29e2:	16 86       	std	Z+14, r1	; 0x0e
    29e4:	17 86       	std	Z+15, r1	; 0x0f
    u8x8->i2c_address = 255;
    29e6:	8f ef       	ldi	r24, 0xFF	; 255
    29e8:	86 8b       	std	Z+22, r24	; 0x16
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    29ea:	82 8f       	std	Z+26, r24	; 0x1a
{
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    29ec:	75 83       	std	Z+5, r23	; 0x05
    29ee:	64 83       	std	Z+4, r22	; 0x04
  u8x8->cad_cb = cad_cb;
    29f0:	57 83       	std	Z+7, r21	; 0x07
    29f2:	46 83       	std	Z+6, r20	; 0x06
  u8x8->byte_cb = byte_cb;
    29f4:	31 87       	std	Z+9, r19	; 0x09
    29f6:	20 87       	std	Z+8, r18	; 0x08
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    29f8:	13 87       	std	Z+11, r17	; 0x0b
    29fa:	02 87       	std	Z+10, r16	; 0x0a

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    29fc:	cf 01       	movw	r24, r30
}
    29fe:	1f 91       	pop	r17
    2a00:	0f 91       	pop	r16
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    2a02:	0c 94 02 14 	jmp	0x2804	; 0x2804 <u8x8_SetupMemory>

00002a06 <__udivmodhi4>:
    2a06:	aa 1b       	sub	r26, r26
    2a08:	bb 1b       	sub	r27, r27
    2a0a:	51 e1       	ldi	r21, 0x11	; 17
    2a0c:	07 c0       	rjmp	.+14     	; 0x2a1c <__udivmodhi4_ep>

00002a0e <__udivmodhi4_loop>:
    2a0e:	aa 1f       	adc	r26, r26
    2a10:	bb 1f       	adc	r27, r27
    2a12:	a6 17       	cp	r26, r22
    2a14:	b7 07       	cpc	r27, r23
    2a16:	10 f0       	brcs	.+4      	; 0x2a1c <__udivmodhi4_ep>
    2a18:	a6 1b       	sub	r26, r22
    2a1a:	b7 0b       	sbc	r27, r23

00002a1c <__udivmodhi4_ep>:
    2a1c:	88 1f       	adc	r24, r24
    2a1e:	99 1f       	adc	r25, r25
    2a20:	5a 95       	dec	r21
    2a22:	a9 f7       	brne	.-22     	; 0x2a0e <__udivmodhi4_loop>
    2a24:	80 95       	com	r24
    2a26:	90 95       	com	r25
    2a28:	bc 01       	movw	r22, r24
    2a2a:	cd 01       	movw	r24, r26
    2a2c:	08 95       	ret

00002a2e <__udivmodsi4>:
    2a2e:	a1 e2       	ldi	r26, 0x21	; 33
    2a30:	1a 2e       	mov	r1, r26
    2a32:	aa 1b       	sub	r26, r26
    2a34:	bb 1b       	sub	r27, r27
    2a36:	fd 01       	movw	r30, r26
    2a38:	0d c0       	rjmp	.+26     	; 0x2a54 <__udivmodsi4_ep>

00002a3a <__udivmodsi4_loop>:
    2a3a:	aa 1f       	adc	r26, r26
    2a3c:	bb 1f       	adc	r27, r27
    2a3e:	ee 1f       	adc	r30, r30
    2a40:	ff 1f       	adc	r31, r31
    2a42:	a2 17       	cp	r26, r18
    2a44:	b3 07       	cpc	r27, r19
    2a46:	e4 07       	cpc	r30, r20
    2a48:	f5 07       	cpc	r31, r21
    2a4a:	20 f0       	brcs	.+8      	; 0x2a54 <__udivmodsi4_ep>
    2a4c:	a2 1b       	sub	r26, r18
    2a4e:	b3 0b       	sbc	r27, r19
    2a50:	e4 0b       	sbc	r30, r20
    2a52:	f5 0b       	sbc	r31, r21

00002a54 <__udivmodsi4_ep>:
    2a54:	66 1f       	adc	r22, r22
    2a56:	77 1f       	adc	r23, r23
    2a58:	88 1f       	adc	r24, r24
    2a5a:	99 1f       	adc	r25, r25
    2a5c:	1a 94       	dec	r1
    2a5e:	69 f7       	brne	.-38     	; 0x2a3a <__udivmodsi4_loop>
    2a60:	60 95       	com	r22
    2a62:	70 95       	com	r23
    2a64:	80 95       	com	r24
    2a66:	90 95       	com	r25
    2a68:	9b 01       	movw	r18, r22
    2a6a:	ac 01       	movw	r20, r24
    2a6c:	bd 01       	movw	r22, r26
    2a6e:	cf 01       	movw	r24, r30
    2a70:	08 95       	ret

00002a72 <__divmodsi4>:
    2a72:	05 2e       	mov	r0, r21
    2a74:	97 fb       	bst	r25, 7
    2a76:	1e f4       	brtc	.+6      	; 0x2a7e <__divmodsi4+0xc>
    2a78:	00 94       	com	r0
    2a7a:	0e 94 50 15 	call	0x2aa0	; 0x2aa0 <__negsi2>
    2a7e:	57 fd       	sbrc	r21, 7
    2a80:	07 d0       	rcall	.+14     	; 0x2a90 <__divmodsi4_neg2>
    2a82:	0e 94 17 15 	call	0x2a2e	; 0x2a2e <__udivmodsi4>
    2a86:	07 fc       	sbrc	r0, 7
    2a88:	03 d0       	rcall	.+6      	; 0x2a90 <__divmodsi4_neg2>
    2a8a:	4e f4       	brtc	.+18     	; 0x2a9e <__divmodsi4_exit>
    2a8c:	0c 94 50 15 	jmp	0x2aa0	; 0x2aa0 <__negsi2>

00002a90 <__divmodsi4_neg2>:
    2a90:	50 95       	com	r21
    2a92:	40 95       	com	r20
    2a94:	30 95       	com	r19
    2a96:	21 95       	neg	r18
    2a98:	3f 4f       	sbci	r19, 0xFF	; 255
    2a9a:	4f 4f       	sbci	r20, 0xFF	; 255
    2a9c:	5f 4f       	sbci	r21, 0xFF	; 255

00002a9e <__divmodsi4_exit>:
    2a9e:	08 95       	ret

00002aa0 <__negsi2>:
    2aa0:	90 95       	com	r25
    2aa2:	80 95       	com	r24
    2aa4:	70 95       	com	r23
    2aa6:	61 95       	neg	r22
    2aa8:	7f 4f       	sbci	r23, 0xFF	; 255
    2aaa:	8f 4f       	sbci	r24, 0xFF	; 255
    2aac:	9f 4f       	sbci	r25, 0xFF	; 255
    2aae:	08 95       	ret

00002ab0 <__umulhisi3>:
    2ab0:	a2 9f       	mul	r26, r18
    2ab2:	b0 01       	movw	r22, r0
    2ab4:	b3 9f       	mul	r27, r19
    2ab6:	c0 01       	movw	r24, r0
    2ab8:	a3 9f       	mul	r26, r19
    2aba:	70 0d       	add	r23, r0
    2abc:	81 1d       	adc	r24, r1
    2abe:	11 24       	eor	r1, r1
    2ac0:	91 1d       	adc	r25, r1
    2ac2:	b2 9f       	mul	r27, r18
    2ac4:	70 0d       	add	r23, r0
    2ac6:	81 1d       	adc	r24, r1
    2ac8:	11 24       	eor	r1, r1
    2aca:	91 1d       	adc	r25, r1
    2acc:	08 95       	ret

00002ace <__muluhisi3>:
    2ace:	0e 94 58 15 	call	0x2ab0	; 0x2ab0 <__umulhisi3>
    2ad2:	a5 9f       	mul	r26, r21
    2ad4:	90 0d       	add	r25, r0
    2ad6:	b4 9f       	mul	r27, r20
    2ad8:	90 0d       	add	r25, r0
    2ada:	a4 9f       	mul	r26, r20
    2adc:	80 0d       	add	r24, r0
    2ade:	91 1d       	adc	r25, r1
    2ae0:	11 24       	eor	r1, r1
    2ae2:	08 95       	ret

00002ae4 <memset>:
    2ae4:	dc 01       	movw	r26, r24
    2ae6:	01 c0       	rjmp	.+2      	; 0x2aea <memset+0x6>
    2ae8:	6d 93       	st	X+, r22
    2aea:	41 50       	subi	r20, 0x01	; 1
    2aec:	50 40       	sbci	r21, 0x00	; 0
    2aee:	e0 f7       	brcc	.-8      	; 0x2ae8 <memset+0x4>
    2af0:	08 95       	ret

00002af2 <snprintf>:
    2af2:	ae e0       	ldi	r26, 0x0E	; 14
    2af4:	b0 e0       	ldi	r27, 0x00	; 0
    2af6:	ef e7       	ldi	r30, 0x7F	; 127
    2af8:	f5 e1       	ldi	r31, 0x15	; 21
    2afa:	0c 94 48 18 	jmp	0x3090	; 0x3090 <__prologue_saves__+0x1c>
    2afe:	0d 89       	ldd	r16, Y+21	; 0x15
    2b00:	1e 89       	ldd	r17, Y+22	; 0x16
    2b02:	8f 89       	ldd	r24, Y+23	; 0x17
    2b04:	98 8d       	ldd	r25, Y+24	; 0x18
    2b06:	26 e0       	ldi	r18, 0x06	; 6
    2b08:	2c 83       	std	Y+4, r18	; 0x04
    2b0a:	1a 83       	std	Y+2, r17	; 0x02
    2b0c:	09 83       	std	Y+1, r16	; 0x01
    2b0e:	97 ff       	sbrs	r25, 7
    2b10:	02 c0       	rjmp	.+4      	; 0x2b16 <snprintf+0x24>
    2b12:	80 e0       	ldi	r24, 0x00	; 0
    2b14:	90 e8       	ldi	r25, 0x80	; 128
    2b16:	01 97       	sbiw	r24, 0x01	; 1
    2b18:	9e 83       	std	Y+6, r25	; 0x06
    2b1a:	8d 83       	std	Y+5, r24	; 0x05
    2b1c:	ae 01       	movw	r20, r28
    2b1e:	45 5e       	subi	r20, 0xE5	; 229
    2b20:	5f 4f       	sbci	r21, 0xFF	; 255
    2b22:	69 8d       	ldd	r22, Y+25	; 0x19
    2b24:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2b26:	ce 01       	movw	r24, r28
    2b28:	01 96       	adiw	r24, 0x01	; 1
    2b2a:	0e 94 a9 15 	call	0x2b52	; 0x2b52 <vfprintf>
    2b2e:	4d 81       	ldd	r20, Y+5	; 0x05
    2b30:	5e 81       	ldd	r21, Y+6	; 0x06
    2b32:	57 fd       	sbrc	r21, 7
    2b34:	0a c0       	rjmp	.+20     	; 0x2b4a <snprintf+0x58>
    2b36:	2f 81       	ldd	r18, Y+7	; 0x07
    2b38:	38 85       	ldd	r19, Y+8	; 0x08
    2b3a:	42 17       	cp	r20, r18
    2b3c:	53 07       	cpc	r21, r19
    2b3e:	0c f4       	brge	.+2      	; 0x2b42 <snprintf+0x50>
    2b40:	9a 01       	movw	r18, r20
    2b42:	f8 01       	movw	r30, r16
    2b44:	e2 0f       	add	r30, r18
    2b46:	f3 1f       	adc	r31, r19
    2b48:	10 82       	st	Z, r1
    2b4a:	2e 96       	adiw	r28, 0x0e	; 14
    2b4c:	e4 e0       	ldi	r30, 0x04	; 4
    2b4e:	0c 94 64 18 	jmp	0x30c8	; 0x30c8 <__epilogue_restores__+0x1c>

00002b52 <vfprintf>:
    2b52:	ab e0       	ldi	r26, 0x0B	; 11
    2b54:	b0 e0       	ldi	r27, 0x00	; 0
    2b56:	ef ea       	ldi	r30, 0xAF	; 175
    2b58:	f5 e1       	ldi	r31, 0x15	; 21
    2b5a:	0c 94 3a 18 	jmp	0x3074	; 0x3074 <__prologue_saves__>
    2b5e:	6c 01       	movw	r12, r24
    2b60:	7b 01       	movw	r14, r22
    2b62:	8a 01       	movw	r16, r20
    2b64:	fc 01       	movw	r30, r24
    2b66:	17 82       	std	Z+7, r1	; 0x07
    2b68:	16 82       	std	Z+6, r1	; 0x06
    2b6a:	83 81       	ldd	r24, Z+3	; 0x03
    2b6c:	81 ff       	sbrs	r24, 1
    2b6e:	cc c1       	rjmp	.+920    	; 0x2f08 <vfprintf+0x3b6>
    2b70:	ce 01       	movw	r24, r28
    2b72:	01 96       	adiw	r24, 0x01	; 1
    2b74:	3c 01       	movw	r6, r24
    2b76:	f6 01       	movw	r30, r12
    2b78:	93 81       	ldd	r25, Z+3	; 0x03
    2b7a:	f7 01       	movw	r30, r14
    2b7c:	93 fd       	sbrc	r25, 3
    2b7e:	85 91       	lpm	r24, Z+
    2b80:	93 ff       	sbrs	r25, 3
    2b82:	81 91       	ld	r24, Z+
    2b84:	7f 01       	movw	r14, r30
    2b86:	88 23       	and	r24, r24
    2b88:	09 f4       	brne	.+2      	; 0x2b8c <vfprintf+0x3a>
    2b8a:	ba c1       	rjmp	.+884    	; 0x2f00 <vfprintf+0x3ae>
    2b8c:	85 32       	cpi	r24, 0x25	; 37
    2b8e:	39 f4       	brne	.+14     	; 0x2b9e <vfprintf+0x4c>
    2b90:	93 fd       	sbrc	r25, 3
    2b92:	85 91       	lpm	r24, Z+
    2b94:	93 ff       	sbrs	r25, 3
    2b96:	81 91       	ld	r24, Z+
    2b98:	7f 01       	movw	r14, r30
    2b9a:	85 32       	cpi	r24, 0x25	; 37
    2b9c:	29 f4       	brne	.+10     	; 0x2ba8 <vfprintf+0x56>
    2b9e:	b6 01       	movw	r22, r12
    2ba0:	90 e0       	ldi	r25, 0x00	; 0
    2ba2:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2ba6:	e7 cf       	rjmp	.-50     	; 0x2b76 <vfprintf+0x24>
    2ba8:	91 2c       	mov	r9, r1
    2baa:	21 2c       	mov	r2, r1
    2bac:	31 2c       	mov	r3, r1
    2bae:	ff e1       	ldi	r31, 0x1F	; 31
    2bb0:	f3 15       	cp	r31, r3
    2bb2:	d8 f0       	brcs	.+54     	; 0x2bea <vfprintf+0x98>
    2bb4:	8b 32       	cpi	r24, 0x2B	; 43
    2bb6:	79 f0       	breq	.+30     	; 0x2bd6 <vfprintf+0x84>
    2bb8:	38 f4       	brcc	.+14     	; 0x2bc8 <vfprintf+0x76>
    2bba:	80 32       	cpi	r24, 0x20	; 32
    2bbc:	79 f0       	breq	.+30     	; 0x2bdc <vfprintf+0x8a>
    2bbe:	83 32       	cpi	r24, 0x23	; 35
    2bc0:	a1 f4       	brne	.+40     	; 0x2bea <vfprintf+0x98>
    2bc2:	23 2d       	mov	r18, r3
    2bc4:	20 61       	ori	r18, 0x10	; 16
    2bc6:	1d c0       	rjmp	.+58     	; 0x2c02 <vfprintf+0xb0>
    2bc8:	8d 32       	cpi	r24, 0x2D	; 45
    2bca:	61 f0       	breq	.+24     	; 0x2be4 <vfprintf+0x92>
    2bcc:	80 33       	cpi	r24, 0x30	; 48
    2bce:	69 f4       	brne	.+26     	; 0x2bea <vfprintf+0x98>
    2bd0:	23 2d       	mov	r18, r3
    2bd2:	21 60       	ori	r18, 0x01	; 1
    2bd4:	16 c0       	rjmp	.+44     	; 0x2c02 <vfprintf+0xb0>
    2bd6:	83 2d       	mov	r24, r3
    2bd8:	82 60       	ori	r24, 0x02	; 2
    2bda:	38 2e       	mov	r3, r24
    2bdc:	e3 2d       	mov	r30, r3
    2bde:	e4 60       	ori	r30, 0x04	; 4
    2be0:	3e 2e       	mov	r3, r30
    2be2:	2a c0       	rjmp	.+84     	; 0x2c38 <vfprintf+0xe6>
    2be4:	f3 2d       	mov	r31, r3
    2be6:	f8 60       	ori	r31, 0x08	; 8
    2be8:	1d c0       	rjmp	.+58     	; 0x2c24 <vfprintf+0xd2>
    2bea:	37 fc       	sbrc	r3, 7
    2bec:	2d c0       	rjmp	.+90     	; 0x2c48 <vfprintf+0xf6>
    2bee:	20 ed       	ldi	r18, 0xD0	; 208
    2bf0:	28 0f       	add	r18, r24
    2bf2:	2a 30       	cpi	r18, 0x0A	; 10
    2bf4:	40 f0       	brcs	.+16     	; 0x2c06 <vfprintf+0xb4>
    2bf6:	8e 32       	cpi	r24, 0x2E	; 46
    2bf8:	b9 f4       	brne	.+46     	; 0x2c28 <vfprintf+0xd6>
    2bfa:	36 fc       	sbrc	r3, 6
    2bfc:	81 c1       	rjmp	.+770    	; 0x2f00 <vfprintf+0x3ae>
    2bfe:	23 2d       	mov	r18, r3
    2c00:	20 64       	ori	r18, 0x40	; 64
    2c02:	32 2e       	mov	r3, r18
    2c04:	19 c0       	rjmp	.+50     	; 0x2c38 <vfprintf+0xe6>
    2c06:	36 fe       	sbrs	r3, 6
    2c08:	06 c0       	rjmp	.+12     	; 0x2c16 <vfprintf+0xc4>
    2c0a:	8a e0       	ldi	r24, 0x0A	; 10
    2c0c:	98 9e       	mul	r9, r24
    2c0e:	20 0d       	add	r18, r0
    2c10:	11 24       	eor	r1, r1
    2c12:	92 2e       	mov	r9, r18
    2c14:	11 c0       	rjmp	.+34     	; 0x2c38 <vfprintf+0xe6>
    2c16:	ea e0       	ldi	r30, 0x0A	; 10
    2c18:	2e 9e       	mul	r2, r30
    2c1a:	20 0d       	add	r18, r0
    2c1c:	11 24       	eor	r1, r1
    2c1e:	22 2e       	mov	r2, r18
    2c20:	f3 2d       	mov	r31, r3
    2c22:	f0 62       	ori	r31, 0x20	; 32
    2c24:	3f 2e       	mov	r3, r31
    2c26:	08 c0       	rjmp	.+16     	; 0x2c38 <vfprintf+0xe6>
    2c28:	8c 36       	cpi	r24, 0x6C	; 108
    2c2a:	21 f4       	brne	.+8      	; 0x2c34 <vfprintf+0xe2>
    2c2c:	83 2d       	mov	r24, r3
    2c2e:	80 68       	ori	r24, 0x80	; 128
    2c30:	38 2e       	mov	r3, r24
    2c32:	02 c0       	rjmp	.+4      	; 0x2c38 <vfprintf+0xe6>
    2c34:	88 36       	cpi	r24, 0x68	; 104
    2c36:	41 f4       	brne	.+16     	; 0x2c48 <vfprintf+0xf6>
    2c38:	f7 01       	movw	r30, r14
    2c3a:	93 fd       	sbrc	r25, 3
    2c3c:	85 91       	lpm	r24, Z+
    2c3e:	93 ff       	sbrs	r25, 3
    2c40:	81 91       	ld	r24, Z+
    2c42:	7f 01       	movw	r14, r30
    2c44:	81 11       	cpse	r24, r1
    2c46:	b3 cf       	rjmp	.-154    	; 0x2bae <vfprintf+0x5c>
    2c48:	98 2f       	mov	r25, r24
    2c4a:	9f 7d       	andi	r25, 0xDF	; 223
    2c4c:	95 54       	subi	r25, 0x45	; 69
    2c4e:	93 30       	cpi	r25, 0x03	; 3
    2c50:	28 f4       	brcc	.+10     	; 0x2c5c <vfprintf+0x10a>
    2c52:	0c 5f       	subi	r16, 0xFC	; 252
    2c54:	1f 4f       	sbci	r17, 0xFF	; 255
    2c56:	9f e3       	ldi	r25, 0x3F	; 63
    2c58:	99 83       	std	Y+1, r25	; 0x01
    2c5a:	0d c0       	rjmp	.+26     	; 0x2c76 <vfprintf+0x124>
    2c5c:	83 36       	cpi	r24, 0x63	; 99
    2c5e:	31 f0       	breq	.+12     	; 0x2c6c <vfprintf+0x11a>
    2c60:	83 37       	cpi	r24, 0x73	; 115
    2c62:	71 f0       	breq	.+28     	; 0x2c80 <vfprintf+0x12e>
    2c64:	83 35       	cpi	r24, 0x53	; 83
    2c66:	09 f0       	breq	.+2      	; 0x2c6a <vfprintf+0x118>
    2c68:	59 c0       	rjmp	.+178    	; 0x2d1c <vfprintf+0x1ca>
    2c6a:	21 c0       	rjmp	.+66     	; 0x2cae <vfprintf+0x15c>
    2c6c:	f8 01       	movw	r30, r16
    2c6e:	80 81       	ld	r24, Z
    2c70:	89 83       	std	Y+1, r24	; 0x01
    2c72:	0e 5f       	subi	r16, 0xFE	; 254
    2c74:	1f 4f       	sbci	r17, 0xFF	; 255
    2c76:	88 24       	eor	r8, r8
    2c78:	83 94       	inc	r8
    2c7a:	91 2c       	mov	r9, r1
    2c7c:	53 01       	movw	r10, r6
    2c7e:	13 c0       	rjmp	.+38     	; 0x2ca6 <vfprintf+0x154>
    2c80:	28 01       	movw	r4, r16
    2c82:	f2 e0       	ldi	r31, 0x02	; 2
    2c84:	4f 0e       	add	r4, r31
    2c86:	51 1c       	adc	r5, r1
    2c88:	f8 01       	movw	r30, r16
    2c8a:	a0 80       	ld	r10, Z
    2c8c:	b1 80       	ldd	r11, Z+1	; 0x01
    2c8e:	36 fe       	sbrs	r3, 6
    2c90:	03 c0       	rjmp	.+6      	; 0x2c98 <vfprintf+0x146>
    2c92:	69 2d       	mov	r22, r9
    2c94:	70 e0       	ldi	r23, 0x00	; 0
    2c96:	02 c0       	rjmp	.+4      	; 0x2c9c <vfprintf+0x14a>
    2c98:	6f ef       	ldi	r22, 0xFF	; 255
    2c9a:	7f ef       	ldi	r23, 0xFF	; 255
    2c9c:	c5 01       	movw	r24, r10
    2c9e:	0e 94 95 17 	call	0x2f2a	; 0x2f2a <strnlen>
    2ca2:	4c 01       	movw	r8, r24
    2ca4:	82 01       	movw	r16, r4
    2ca6:	f3 2d       	mov	r31, r3
    2ca8:	ff 77       	andi	r31, 0x7F	; 127
    2caa:	3f 2e       	mov	r3, r31
    2cac:	16 c0       	rjmp	.+44     	; 0x2cda <vfprintf+0x188>
    2cae:	28 01       	movw	r4, r16
    2cb0:	22 e0       	ldi	r18, 0x02	; 2
    2cb2:	42 0e       	add	r4, r18
    2cb4:	51 1c       	adc	r5, r1
    2cb6:	f8 01       	movw	r30, r16
    2cb8:	a0 80       	ld	r10, Z
    2cba:	b1 80       	ldd	r11, Z+1	; 0x01
    2cbc:	36 fe       	sbrs	r3, 6
    2cbe:	03 c0       	rjmp	.+6      	; 0x2cc6 <vfprintf+0x174>
    2cc0:	69 2d       	mov	r22, r9
    2cc2:	70 e0       	ldi	r23, 0x00	; 0
    2cc4:	02 c0       	rjmp	.+4      	; 0x2cca <vfprintf+0x178>
    2cc6:	6f ef       	ldi	r22, 0xFF	; 255
    2cc8:	7f ef       	ldi	r23, 0xFF	; 255
    2cca:	c5 01       	movw	r24, r10
    2ccc:	0e 94 8a 17 	call	0x2f14	; 0x2f14 <strnlen_P>
    2cd0:	4c 01       	movw	r8, r24
    2cd2:	f3 2d       	mov	r31, r3
    2cd4:	f0 68       	ori	r31, 0x80	; 128
    2cd6:	3f 2e       	mov	r3, r31
    2cd8:	82 01       	movw	r16, r4
    2cda:	33 fc       	sbrc	r3, 3
    2cdc:	1b c0       	rjmp	.+54     	; 0x2d14 <vfprintf+0x1c2>
    2cde:	82 2d       	mov	r24, r2
    2ce0:	90 e0       	ldi	r25, 0x00	; 0
    2ce2:	88 16       	cp	r8, r24
    2ce4:	99 06       	cpc	r9, r25
    2ce6:	b0 f4       	brcc	.+44     	; 0x2d14 <vfprintf+0x1c2>
    2ce8:	b6 01       	movw	r22, r12
    2cea:	80 e2       	ldi	r24, 0x20	; 32
    2cec:	90 e0       	ldi	r25, 0x00	; 0
    2cee:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2cf2:	2a 94       	dec	r2
    2cf4:	f4 cf       	rjmp	.-24     	; 0x2cde <vfprintf+0x18c>
    2cf6:	f5 01       	movw	r30, r10
    2cf8:	37 fc       	sbrc	r3, 7
    2cfa:	85 91       	lpm	r24, Z+
    2cfc:	37 fe       	sbrs	r3, 7
    2cfe:	81 91       	ld	r24, Z+
    2d00:	5f 01       	movw	r10, r30
    2d02:	b6 01       	movw	r22, r12
    2d04:	90 e0       	ldi	r25, 0x00	; 0
    2d06:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2d0a:	21 10       	cpse	r2, r1
    2d0c:	2a 94       	dec	r2
    2d0e:	21 e0       	ldi	r18, 0x01	; 1
    2d10:	82 1a       	sub	r8, r18
    2d12:	91 08       	sbc	r9, r1
    2d14:	81 14       	cp	r8, r1
    2d16:	91 04       	cpc	r9, r1
    2d18:	71 f7       	brne	.-36     	; 0x2cf6 <vfprintf+0x1a4>
    2d1a:	e8 c0       	rjmp	.+464    	; 0x2eec <vfprintf+0x39a>
    2d1c:	84 36       	cpi	r24, 0x64	; 100
    2d1e:	11 f0       	breq	.+4      	; 0x2d24 <vfprintf+0x1d2>
    2d20:	89 36       	cpi	r24, 0x69	; 105
    2d22:	41 f5       	brne	.+80     	; 0x2d74 <vfprintf+0x222>
    2d24:	f8 01       	movw	r30, r16
    2d26:	37 fe       	sbrs	r3, 7
    2d28:	07 c0       	rjmp	.+14     	; 0x2d38 <vfprintf+0x1e6>
    2d2a:	60 81       	ld	r22, Z
    2d2c:	71 81       	ldd	r23, Z+1	; 0x01
    2d2e:	82 81       	ldd	r24, Z+2	; 0x02
    2d30:	93 81       	ldd	r25, Z+3	; 0x03
    2d32:	0c 5f       	subi	r16, 0xFC	; 252
    2d34:	1f 4f       	sbci	r17, 0xFF	; 255
    2d36:	08 c0       	rjmp	.+16     	; 0x2d48 <vfprintf+0x1f6>
    2d38:	60 81       	ld	r22, Z
    2d3a:	71 81       	ldd	r23, Z+1	; 0x01
    2d3c:	07 2e       	mov	r0, r23
    2d3e:	00 0c       	add	r0, r0
    2d40:	88 0b       	sbc	r24, r24
    2d42:	99 0b       	sbc	r25, r25
    2d44:	0e 5f       	subi	r16, 0xFE	; 254
    2d46:	1f 4f       	sbci	r17, 0xFF	; 255
    2d48:	f3 2d       	mov	r31, r3
    2d4a:	ff 76       	andi	r31, 0x6F	; 111
    2d4c:	3f 2e       	mov	r3, r31
    2d4e:	97 ff       	sbrs	r25, 7
    2d50:	09 c0       	rjmp	.+18     	; 0x2d64 <vfprintf+0x212>
    2d52:	90 95       	com	r25
    2d54:	80 95       	com	r24
    2d56:	70 95       	com	r23
    2d58:	61 95       	neg	r22
    2d5a:	7f 4f       	sbci	r23, 0xFF	; 255
    2d5c:	8f 4f       	sbci	r24, 0xFF	; 255
    2d5e:	9f 4f       	sbci	r25, 0xFF	; 255
    2d60:	f0 68       	ori	r31, 0x80	; 128
    2d62:	3f 2e       	mov	r3, r31
    2d64:	2a e0       	ldi	r18, 0x0A	; 10
    2d66:	30 e0       	ldi	r19, 0x00	; 0
    2d68:	a3 01       	movw	r20, r6
    2d6a:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__ultoa_invert>
    2d6e:	88 2e       	mov	r8, r24
    2d70:	86 18       	sub	r8, r6
    2d72:	45 c0       	rjmp	.+138    	; 0x2dfe <vfprintf+0x2ac>
    2d74:	85 37       	cpi	r24, 0x75	; 117
    2d76:	31 f4       	brne	.+12     	; 0x2d84 <vfprintf+0x232>
    2d78:	23 2d       	mov	r18, r3
    2d7a:	2f 7e       	andi	r18, 0xEF	; 239
    2d7c:	b2 2e       	mov	r11, r18
    2d7e:	2a e0       	ldi	r18, 0x0A	; 10
    2d80:	30 e0       	ldi	r19, 0x00	; 0
    2d82:	25 c0       	rjmp	.+74     	; 0x2dce <vfprintf+0x27c>
    2d84:	93 2d       	mov	r25, r3
    2d86:	99 7f       	andi	r25, 0xF9	; 249
    2d88:	b9 2e       	mov	r11, r25
    2d8a:	8f 36       	cpi	r24, 0x6F	; 111
    2d8c:	c1 f0       	breq	.+48     	; 0x2dbe <vfprintf+0x26c>
    2d8e:	18 f4       	brcc	.+6      	; 0x2d96 <vfprintf+0x244>
    2d90:	88 35       	cpi	r24, 0x58	; 88
    2d92:	79 f0       	breq	.+30     	; 0x2db2 <vfprintf+0x260>
    2d94:	b5 c0       	rjmp	.+362    	; 0x2f00 <vfprintf+0x3ae>
    2d96:	80 37       	cpi	r24, 0x70	; 112
    2d98:	19 f0       	breq	.+6      	; 0x2da0 <vfprintf+0x24e>
    2d9a:	88 37       	cpi	r24, 0x78	; 120
    2d9c:	21 f0       	breq	.+8      	; 0x2da6 <vfprintf+0x254>
    2d9e:	b0 c0       	rjmp	.+352    	; 0x2f00 <vfprintf+0x3ae>
    2da0:	e9 2f       	mov	r30, r25
    2da2:	e0 61       	ori	r30, 0x10	; 16
    2da4:	be 2e       	mov	r11, r30
    2da6:	b4 fe       	sbrs	r11, 4
    2da8:	0d c0       	rjmp	.+26     	; 0x2dc4 <vfprintf+0x272>
    2daa:	fb 2d       	mov	r31, r11
    2dac:	f4 60       	ori	r31, 0x04	; 4
    2dae:	bf 2e       	mov	r11, r31
    2db0:	09 c0       	rjmp	.+18     	; 0x2dc4 <vfprintf+0x272>
    2db2:	34 fe       	sbrs	r3, 4
    2db4:	0a c0       	rjmp	.+20     	; 0x2dca <vfprintf+0x278>
    2db6:	29 2f       	mov	r18, r25
    2db8:	26 60       	ori	r18, 0x06	; 6
    2dba:	b2 2e       	mov	r11, r18
    2dbc:	06 c0       	rjmp	.+12     	; 0x2dca <vfprintf+0x278>
    2dbe:	28 e0       	ldi	r18, 0x08	; 8
    2dc0:	30 e0       	ldi	r19, 0x00	; 0
    2dc2:	05 c0       	rjmp	.+10     	; 0x2dce <vfprintf+0x27c>
    2dc4:	20 e1       	ldi	r18, 0x10	; 16
    2dc6:	30 e0       	ldi	r19, 0x00	; 0
    2dc8:	02 c0       	rjmp	.+4      	; 0x2dce <vfprintf+0x27c>
    2dca:	20 e1       	ldi	r18, 0x10	; 16
    2dcc:	32 e0       	ldi	r19, 0x02	; 2
    2dce:	f8 01       	movw	r30, r16
    2dd0:	b7 fe       	sbrs	r11, 7
    2dd2:	07 c0       	rjmp	.+14     	; 0x2de2 <vfprintf+0x290>
    2dd4:	60 81       	ld	r22, Z
    2dd6:	71 81       	ldd	r23, Z+1	; 0x01
    2dd8:	82 81       	ldd	r24, Z+2	; 0x02
    2dda:	93 81       	ldd	r25, Z+3	; 0x03
    2ddc:	0c 5f       	subi	r16, 0xFC	; 252
    2dde:	1f 4f       	sbci	r17, 0xFF	; 255
    2de0:	06 c0       	rjmp	.+12     	; 0x2dee <vfprintf+0x29c>
    2de2:	60 81       	ld	r22, Z
    2de4:	71 81       	ldd	r23, Z+1	; 0x01
    2de6:	80 e0       	ldi	r24, 0x00	; 0
    2de8:	90 e0       	ldi	r25, 0x00	; 0
    2dea:	0e 5f       	subi	r16, 0xFE	; 254
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	a3 01       	movw	r20, r6
    2df0:	0e 94 dc 17 	call	0x2fb8	; 0x2fb8 <__ultoa_invert>
    2df4:	88 2e       	mov	r8, r24
    2df6:	86 18       	sub	r8, r6
    2df8:	fb 2d       	mov	r31, r11
    2dfa:	ff 77       	andi	r31, 0x7F	; 127
    2dfc:	3f 2e       	mov	r3, r31
    2dfe:	36 fe       	sbrs	r3, 6
    2e00:	0d c0       	rjmp	.+26     	; 0x2e1c <vfprintf+0x2ca>
    2e02:	23 2d       	mov	r18, r3
    2e04:	2e 7f       	andi	r18, 0xFE	; 254
    2e06:	a2 2e       	mov	r10, r18
    2e08:	89 14       	cp	r8, r9
    2e0a:	58 f4       	brcc	.+22     	; 0x2e22 <vfprintf+0x2d0>
    2e0c:	34 fe       	sbrs	r3, 4
    2e0e:	0b c0       	rjmp	.+22     	; 0x2e26 <vfprintf+0x2d4>
    2e10:	32 fc       	sbrc	r3, 2
    2e12:	09 c0       	rjmp	.+18     	; 0x2e26 <vfprintf+0x2d4>
    2e14:	83 2d       	mov	r24, r3
    2e16:	8e 7e       	andi	r24, 0xEE	; 238
    2e18:	a8 2e       	mov	r10, r24
    2e1a:	05 c0       	rjmp	.+10     	; 0x2e26 <vfprintf+0x2d4>
    2e1c:	b8 2c       	mov	r11, r8
    2e1e:	a3 2c       	mov	r10, r3
    2e20:	03 c0       	rjmp	.+6      	; 0x2e28 <vfprintf+0x2d6>
    2e22:	b8 2c       	mov	r11, r8
    2e24:	01 c0       	rjmp	.+2      	; 0x2e28 <vfprintf+0x2d6>
    2e26:	b9 2c       	mov	r11, r9
    2e28:	a4 fe       	sbrs	r10, 4
    2e2a:	0f c0       	rjmp	.+30     	; 0x2e4a <vfprintf+0x2f8>
    2e2c:	fe 01       	movw	r30, r28
    2e2e:	e8 0d       	add	r30, r8
    2e30:	f1 1d       	adc	r31, r1
    2e32:	80 81       	ld	r24, Z
    2e34:	80 33       	cpi	r24, 0x30	; 48
    2e36:	21 f4       	brne	.+8      	; 0x2e40 <vfprintf+0x2ee>
    2e38:	9a 2d       	mov	r25, r10
    2e3a:	99 7e       	andi	r25, 0xE9	; 233
    2e3c:	a9 2e       	mov	r10, r25
    2e3e:	09 c0       	rjmp	.+18     	; 0x2e52 <vfprintf+0x300>
    2e40:	a2 fe       	sbrs	r10, 2
    2e42:	06 c0       	rjmp	.+12     	; 0x2e50 <vfprintf+0x2fe>
    2e44:	b3 94       	inc	r11
    2e46:	b3 94       	inc	r11
    2e48:	04 c0       	rjmp	.+8      	; 0x2e52 <vfprintf+0x300>
    2e4a:	8a 2d       	mov	r24, r10
    2e4c:	86 78       	andi	r24, 0x86	; 134
    2e4e:	09 f0       	breq	.+2      	; 0x2e52 <vfprintf+0x300>
    2e50:	b3 94       	inc	r11
    2e52:	a3 fc       	sbrc	r10, 3
    2e54:	11 c0       	rjmp	.+34     	; 0x2e78 <vfprintf+0x326>
    2e56:	a0 fe       	sbrs	r10, 0
    2e58:	06 c0       	rjmp	.+12     	; 0x2e66 <vfprintf+0x314>
    2e5a:	b2 14       	cp	r11, r2
    2e5c:	88 f4       	brcc	.+34     	; 0x2e80 <vfprintf+0x32e>
    2e5e:	28 0c       	add	r2, r8
    2e60:	92 2c       	mov	r9, r2
    2e62:	9b 18       	sub	r9, r11
    2e64:	0e c0       	rjmp	.+28     	; 0x2e82 <vfprintf+0x330>
    2e66:	b2 14       	cp	r11, r2
    2e68:	60 f4       	brcc	.+24     	; 0x2e82 <vfprintf+0x330>
    2e6a:	b6 01       	movw	r22, r12
    2e6c:	80 e2       	ldi	r24, 0x20	; 32
    2e6e:	90 e0       	ldi	r25, 0x00	; 0
    2e70:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2e74:	b3 94       	inc	r11
    2e76:	f7 cf       	rjmp	.-18     	; 0x2e66 <vfprintf+0x314>
    2e78:	b2 14       	cp	r11, r2
    2e7a:	18 f4       	brcc	.+6      	; 0x2e82 <vfprintf+0x330>
    2e7c:	2b 18       	sub	r2, r11
    2e7e:	02 c0       	rjmp	.+4      	; 0x2e84 <vfprintf+0x332>
    2e80:	98 2c       	mov	r9, r8
    2e82:	21 2c       	mov	r2, r1
    2e84:	a4 fe       	sbrs	r10, 4
    2e86:	10 c0       	rjmp	.+32     	; 0x2ea8 <vfprintf+0x356>
    2e88:	b6 01       	movw	r22, r12
    2e8a:	80 e3       	ldi	r24, 0x30	; 48
    2e8c:	90 e0       	ldi	r25, 0x00	; 0
    2e8e:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2e92:	a2 fe       	sbrs	r10, 2
    2e94:	17 c0       	rjmp	.+46     	; 0x2ec4 <vfprintf+0x372>
    2e96:	a1 fc       	sbrc	r10, 1
    2e98:	03 c0       	rjmp	.+6      	; 0x2ea0 <vfprintf+0x34e>
    2e9a:	88 e7       	ldi	r24, 0x78	; 120
    2e9c:	90 e0       	ldi	r25, 0x00	; 0
    2e9e:	02 c0       	rjmp	.+4      	; 0x2ea4 <vfprintf+0x352>
    2ea0:	88 e5       	ldi	r24, 0x58	; 88
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	b6 01       	movw	r22, r12
    2ea6:	0c c0       	rjmp	.+24     	; 0x2ec0 <vfprintf+0x36e>
    2ea8:	8a 2d       	mov	r24, r10
    2eaa:	86 78       	andi	r24, 0x86	; 134
    2eac:	59 f0       	breq	.+22     	; 0x2ec4 <vfprintf+0x372>
    2eae:	a1 fe       	sbrs	r10, 1
    2eb0:	02 c0       	rjmp	.+4      	; 0x2eb6 <vfprintf+0x364>
    2eb2:	8b e2       	ldi	r24, 0x2B	; 43
    2eb4:	01 c0       	rjmp	.+2      	; 0x2eb8 <vfprintf+0x366>
    2eb6:	80 e2       	ldi	r24, 0x20	; 32
    2eb8:	a7 fc       	sbrc	r10, 7
    2eba:	8d e2       	ldi	r24, 0x2D	; 45
    2ebc:	b6 01       	movw	r22, r12
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2ec4:	89 14       	cp	r8, r9
    2ec6:	38 f4       	brcc	.+14     	; 0x2ed6 <vfprintf+0x384>
    2ec8:	b6 01       	movw	r22, r12
    2eca:	80 e3       	ldi	r24, 0x30	; 48
    2ecc:	90 e0       	ldi	r25, 0x00	; 0
    2ece:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2ed2:	9a 94       	dec	r9
    2ed4:	f7 cf       	rjmp	.-18     	; 0x2ec4 <vfprintf+0x372>
    2ed6:	8a 94       	dec	r8
    2ed8:	f3 01       	movw	r30, r6
    2eda:	e8 0d       	add	r30, r8
    2edc:	f1 1d       	adc	r31, r1
    2ede:	80 81       	ld	r24, Z
    2ee0:	b6 01       	movw	r22, r12
    2ee2:	90 e0       	ldi	r25, 0x00	; 0
    2ee4:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2ee8:	81 10       	cpse	r8, r1
    2eea:	f5 cf       	rjmp	.-22     	; 0x2ed6 <vfprintf+0x384>
    2eec:	22 20       	and	r2, r2
    2eee:	09 f4       	brne	.+2      	; 0x2ef2 <vfprintf+0x3a0>
    2ef0:	42 ce       	rjmp	.-892    	; 0x2b76 <vfprintf+0x24>
    2ef2:	b6 01       	movw	r22, r12
    2ef4:	80 e2       	ldi	r24, 0x20	; 32
    2ef6:	90 e0       	ldi	r25, 0x00	; 0
    2ef8:	0e 94 a0 17 	call	0x2f40	; 0x2f40 <fputc>
    2efc:	2a 94       	dec	r2
    2efe:	f6 cf       	rjmp	.-20     	; 0x2eec <vfprintf+0x39a>
    2f00:	f6 01       	movw	r30, r12
    2f02:	86 81       	ldd	r24, Z+6	; 0x06
    2f04:	97 81       	ldd	r25, Z+7	; 0x07
    2f06:	02 c0       	rjmp	.+4      	; 0x2f0c <vfprintf+0x3ba>
    2f08:	8f ef       	ldi	r24, 0xFF	; 255
    2f0a:	9f ef       	ldi	r25, 0xFF	; 255
    2f0c:	2b 96       	adiw	r28, 0x0b	; 11
    2f0e:	e2 e1       	ldi	r30, 0x12	; 18
    2f10:	0c 94 56 18 	jmp	0x30ac	; 0x30ac <__epilogue_restores__>

00002f14 <strnlen_P>:
    2f14:	fc 01       	movw	r30, r24
    2f16:	05 90       	lpm	r0, Z+
    2f18:	61 50       	subi	r22, 0x01	; 1
    2f1a:	70 40       	sbci	r23, 0x00	; 0
    2f1c:	01 10       	cpse	r0, r1
    2f1e:	d8 f7       	brcc	.-10     	; 0x2f16 <strnlen_P+0x2>
    2f20:	80 95       	com	r24
    2f22:	90 95       	com	r25
    2f24:	8e 0f       	add	r24, r30
    2f26:	9f 1f       	adc	r25, r31
    2f28:	08 95       	ret

00002f2a <strnlen>:
    2f2a:	fc 01       	movw	r30, r24
    2f2c:	61 50       	subi	r22, 0x01	; 1
    2f2e:	70 40       	sbci	r23, 0x00	; 0
    2f30:	01 90       	ld	r0, Z+
    2f32:	01 10       	cpse	r0, r1
    2f34:	d8 f7       	brcc	.-10     	; 0x2f2c <strnlen+0x2>
    2f36:	80 95       	com	r24
    2f38:	90 95       	com	r25
    2f3a:	8e 0f       	add	r24, r30
    2f3c:	9f 1f       	adc	r25, r31
    2f3e:	08 95       	ret

00002f40 <fputc>:
    2f40:	0f 93       	push	r16
    2f42:	1f 93       	push	r17
    2f44:	cf 93       	push	r28
    2f46:	df 93       	push	r29
    2f48:	fb 01       	movw	r30, r22
    2f4a:	23 81       	ldd	r18, Z+3	; 0x03
    2f4c:	21 fd       	sbrc	r18, 1
    2f4e:	03 c0       	rjmp	.+6      	; 0x2f56 <fputc+0x16>
    2f50:	8f ef       	ldi	r24, 0xFF	; 255
    2f52:	9f ef       	ldi	r25, 0xFF	; 255
    2f54:	2c c0       	rjmp	.+88     	; 0x2fae <fputc+0x6e>
    2f56:	22 ff       	sbrs	r18, 2
    2f58:	16 c0       	rjmp	.+44     	; 0x2f86 <fputc+0x46>
    2f5a:	46 81       	ldd	r20, Z+6	; 0x06
    2f5c:	57 81       	ldd	r21, Z+7	; 0x07
    2f5e:	24 81       	ldd	r18, Z+4	; 0x04
    2f60:	35 81       	ldd	r19, Z+5	; 0x05
    2f62:	42 17       	cp	r20, r18
    2f64:	53 07       	cpc	r21, r19
    2f66:	44 f4       	brge	.+16     	; 0x2f78 <fputc+0x38>
    2f68:	a0 81       	ld	r26, Z
    2f6a:	b1 81       	ldd	r27, Z+1	; 0x01
    2f6c:	9d 01       	movw	r18, r26
    2f6e:	2f 5f       	subi	r18, 0xFF	; 255
    2f70:	3f 4f       	sbci	r19, 0xFF	; 255
    2f72:	31 83       	std	Z+1, r19	; 0x01
    2f74:	20 83       	st	Z, r18
    2f76:	8c 93       	st	X, r24
    2f78:	26 81       	ldd	r18, Z+6	; 0x06
    2f7a:	37 81       	ldd	r19, Z+7	; 0x07
    2f7c:	2f 5f       	subi	r18, 0xFF	; 255
    2f7e:	3f 4f       	sbci	r19, 0xFF	; 255
    2f80:	37 83       	std	Z+7, r19	; 0x07
    2f82:	26 83       	std	Z+6, r18	; 0x06
    2f84:	14 c0       	rjmp	.+40     	; 0x2fae <fputc+0x6e>
    2f86:	8b 01       	movw	r16, r22
    2f88:	ec 01       	movw	r28, r24
    2f8a:	fb 01       	movw	r30, r22
    2f8c:	00 84       	ldd	r0, Z+8	; 0x08
    2f8e:	f1 85       	ldd	r31, Z+9	; 0x09
    2f90:	e0 2d       	mov	r30, r0
    2f92:	09 95       	icall
    2f94:	89 2b       	or	r24, r25
    2f96:	e1 f6       	brne	.-72     	; 0x2f50 <fputc+0x10>
    2f98:	d8 01       	movw	r26, r16
    2f9a:	16 96       	adiw	r26, 0x06	; 6
    2f9c:	8d 91       	ld	r24, X+
    2f9e:	9c 91       	ld	r25, X
    2fa0:	17 97       	sbiw	r26, 0x07	; 7
    2fa2:	01 96       	adiw	r24, 0x01	; 1
    2fa4:	17 96       	adiw	r26, 0x07	; 7
    2fa6:	9c 93       	st	X, r25
    2fa8:	8e 93       	st	-X, r24
    2faa:	16 97       	sbiw	r26, 0x06	; 6
    2fac:	ce 01       	movw	r24, r28
    2fae:	df 91       	pop	r29
    2fb0:	cf 91       	pop	r28
    2fb2:	1f 91       	pop	r17
    2fb4:	0f 91       	pop	r16
    2fb6:	08 95       	ret

00002fb8 <__ultoa_invert>:
    2fb8:	fa 01       	movw	r30, r20
    2fba:	aa 27       	eor	r26, r26
    2fbc:	28 30       	cpi	r18, 0x08	; 8
    2fbe:	51 f1       	breq	.+84     	; 0x3014 <__ultoa_invert+0x5c>
    2fc0:	20 31       	cpi	r18, 0x10	; 16
    2fc2:	81 f1       	breq	.+96     	; 0x3024 <__ultoa_invert+0x6c>
    2fc4:	e8 94       	clt
    2fc6:	6f 93       	push	r22
    2fc8:	6e 7f       	andi	r22, 0xFE	; 254
    2fca:	6e 5f       	subi	r22, 0xFE	; 254
    2fcc:	7f 4f       	sbci	r23, 0xFF	; 255
    2fce:	8f 4f       	sbci	r24, 0xFF	; 255
    2fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd2:	af 4f       	sbci	r26, 0xFF	; 255
    2fd4:	b1 e0       	ldi	r27, 0x01	; 1
    2fd6:	3e d0       	rcall	.+124    	; 0x3054 <__ultoa_invert+0x9c>
    2fd8:	b4 e0       	ldi	r27, 0x04	; 4
    2fda:	3c d0       	rcall	.+120    	; 0x3054 <__ultoa_invert+0x9c>
    2fdc:	67 0f       	add	r22, r23
    2fde:	78 1f       	adc	r23, r24
    2fe0:	89 1f       	adc	r24, r25
    2fe2:	9a 1f       	adc	r25, r26
    2fe4:	a1 1d       	adc	r26, r1
    2fe6:	68 0f       	add	r22, r24
    2fe8:	79 1f       	adc	r23, r25
    2fea:	8a 1f       	adc	r24, r26
    2fec:	91 1d       	adc	r25, r1
    2fee:	a1 1d       	adc	r26, r1
    2ff0:	6a 0f       	add	r22, r26
    2ff2:	71 1d       	adc	r23, r1
    2ff4:	81 1d       	adc	r24, r1
    2ff6:	91 1d       	adc	r25, r1
    2ff8:	a1 1d       	adc	r26, r1
    2ffa:	20 d0       	rcall	.+64     	; 0x303c <__ultoa_invert+0x84>
    2ffc:	09 f4       	brne	.+2      	; 0x3000 <__ultoa_invert+0x48>
    2ffe:	68 94       	set
    3000:	3f 91       	pop	r19
    3002:	2a e0       	ldi	r18, 0x0A	; 10
    3004:	26 9f       	mul	r18, r22
    3006:	11 24       	eor	r1, r1
    3008:	30 19       	sub	r19, r0
    300a:	30 5d       	subi	r19, 0xD0	; 208
    300c:	31 93       	st	Z+, r19
    300e:	de f6       	brtc	.-74     	; 0x2fc6 <__ultoa_invert+0xe>
    3010:	cf 01       	movw	r24, r30
    3012:	08 95       	ret
    3014:	46 2f       	mov	r20, r22
    3016:	47 70       	andi	r20, 0x07	; 7
    3018:	40 5d       	subi	r20, 0xD0	; 208
    301a:	41 93       	st	Z+, r20
    301c:	b3 e0       	ldi	r27, 0x03	; 3
    301e:	0f d0       	rcall	.+30     	; 0x303e <__ultoa_invert+0x86>
    3020:	c9 f7       	brne	.-14     	; 0x3014 <__ultoa_invert+0x5c>
    3022:	f6 cf       	rjmp	.-20     	; 0x3010 <__ultoa_invert+0x58>
    3024:	46 2f       	mov	r20, r22
    3026:	4f 70       	andi	r20, 0x0F	; 15
    3028:	40 5d       	subi	r20, 0xD0	; 208
    302a:	4a 33       	cpi	r20, 0x3A	; 58
    302c:	18 f0       	brcs	.+6      	; 0x3034 <__ultoa_invert+0x7c>
    302e:	49 5d       	subi	r20, 0xD9	; 217
    3030:	31 fd       	sbrc	r19, 1
    3032:	40 52       	subi	r20, 0x20	; 32
    3034:	41 93       	st	Z+, r20
    3036:	02 d0       	rcall	.+4      	; 0x303c <__ultoa_invert+0x84>
    3038:	a9 f7       	brne	.-22     	; 0x3024 <__ultoa_invert+0x6c>
    303a:	ea cf       	rjmp	.-44     	; 0x3010 <__ultoa_invert+0x58>
    303c:	b4 e0       	ldi	r27, 0x04	; 4
    303e:	a6 95       	lsr	r26
    3040:	97 95       	ror	r25
    3042:	87 95       	ror	r24
    3044:	77 95       	ror	r23
    3046:	67 95       	ror	r22
    3048:	ba 95       	dec	r27
    304a:	c9 f7       	brne	.-14     	; 0x303e <__ultoa_invert+0x86>
    304c:	00 97       	sbiw	r24, 0x00	; 0
    304e:	61 05       	cpc	r22, r1
    3050:	71 05       	cpc	r23, r1
    3052:	08 95       	ret
    3054:	9b 01       	movw	r18, r22
    3056:	ac 01       	movw	r20, r24
    3058:	0a 2e       	mov	r0, r26
    305a:	06 94       	lsr	r0
    305c:	57 95       	ror	r21
    305e:	47 95       	ror	r20
    3060:	37 95       	ror	r19
    3062:	27 95       	ror	r18
    3064:	ba 95       	dec	r27
    3066:	c9 f7       	brne	.-14     	; 0x305a <__ultoa_invert+0xa2>
    3068:	62 0f       	add	r22, r18
    306a:	73 1f       	adc	r23, r19
    306c:	84 1f       	adc	r24, r20
    306e:	95 1f       	adc	r25, r21
    3070:	a0 1d       	adc	r26, r0
    3072:	08 95       	ret

00003074 <__prologue_saves__>:
    3074:	2f 92       	push	r2
    3076:	3f 92       	push	r3
    3078:	4f 92       	push	r4
    307a:	5f 92       	push	r5
    307c:	6f 92       	push	r6
    307e:	7f 92       	push	r7
    3080:	8f 92       	push	r8
    3082:	9f 92       	push	r9
    3084:	af 92       	push	r10
    3086:	bf 92       	push	r11
    3088:	cf 92       	push	r12
    308a:	df 92       	push	r13
    308c:	ef 92       	push	r14
    308e:	ff 92       	push	r15
    3090:	0f 93       	push	r16
    3092:	1f 93       	push	r17
    3094:	cf 93       	push	r28
    3096:	df 93       	push	r29
    3098:	cd b7       	in	r28, 0x3d	; 61
    309a:	de b7       	in	r29, 0x3e	; 62
    309c:	ca 1b       	sub	r28, r26
    309e:	db 0b       	sbc	r29, r27
    30a0:	0f b6       	in	r0, 0x3f	; 63
    30a2:	f8 94       	cli
    30a4:	de bf       	out	0x3e, r29	; 62
    30a6:	0f be       	out	0x3f, r0	; 63
    30a8:	cd bf       	out	0x3d, r28	; 61
    30aa:	09 94       	ijmp

000030ac <__epilogue_restores__>:
    30ac:	2a 88       	ldd	r2, Y+18	; 0x12
    30ae:	39 88       	ldd	r3, Y+17	; 0x11
    30b0:	48 88       	ldd	r4, Y+16	; 0x10
    30b2:	5f 84       	ldd	r5, Y+15	; 0x0f
    30b4:	6e 84       	ldd	r6, Y+14	; 0x0e
    30b6:	7d 84       	ldd	r7, Y+13	; 0x0d
    30b8:	8c 84       	ldd	r8, Y+12	; 0x0c
    30ba:	9b 84       	ldd	r9, Y+11	; 0x0b
    30bc:	aa 84       	ldd	r10, Y+10	; 0x0a
    30be:	b9 84       	ldd	r11, Y+9	; 0x09
    30c0:	c8 84       	ldd	r12, Y+8	; 0x08
    30c2:	df 80       	ldd	r13, Y+7	; 0x07
    30c4:	ee 80       	ldd	r14, Y+6	; 0x06
    30c6:	fd 80       	ldd	r15, Y+5	; 0x05
    30c8:	0c 81       	ldd	r16, Y+4	; 0x04
    30ca:	1b 81       	ldd	r17, Y+3	; 0x03
    30cc:	aa 81       	ldd	r26, Y+2	; 0x02
    30ce:	b9 81       	ldd	r27, Y+1	; 0x01
    30d0:	ce 0f       	add	r28, r30
    30d2:	d1 1d       	adc	r29, r1
    30d4:	0f b6       	in	r0, 0x3f	; 63
    30d6:	f8 94       	cli
    30d8:	de bf       	out	0x3e, r29	; 62
    30da:	0f be       	out	0x3f, r0	; 63
    30dc:	cd bf       	out	0x3d, r28	; 61
    30de:	ed 01       	movw	r28, r26
    30e0:	08 95       	ret

000030e2 <_exit>:
    30e2:	f8 94       	cli

000030e4 <__stop_program>:
    30e4:	ff cf       	rjmp	.-2      	; 0x30e4 <__stop_program>
