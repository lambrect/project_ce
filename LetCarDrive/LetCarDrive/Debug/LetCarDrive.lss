
LetCarDrive.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000140  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000000ec  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000140  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000170  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000038  00000000  00000000  000001b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000776  00000000  00000000  000001e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006ca  00000000  00000000  0000095e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000301  00000000  00000000  00001028  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000054  00000000  00000000  0000132c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003be  00000000  00000000  00001380  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000028  00000000  00000000  0000173e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 5e 00 	call	0xbc	; 0xbc <main>
  78:	0c 94 74 00 	jmp	0xe8	; 0xe8 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initPWM>:
#define LEFT2 PORTB0	// Datasheet R_CTRL_2


void initPWM()
{
	DDRD |= (1<< PORTD5); //set PORTD pin5 as an output (left motor) speed
  80:	55 9a       	sbi	0x0a, 5	; 10
	DDRD |= (1 << PORTD6);// set PORTD pin6 as an output (right motor)speed
  82:	56 9a       	sbi	0x0a, 6	; 10
	TCCR0A |= (1 << COM0A1);// set none-inverting mode for OCR0A
  84:	84 b5       	in	r24, 0x24	; 36
  86:	80 68       	ori	r24, 0x80	; 128
  88:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << COM0B1);// set none-inverting mode for OCR0B
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	84 bd       	out	0x24, r24	; 36
	TCCR0A |= (1 << WGM01) | (1 << WGM00);// set fast PWM Mode
  90:	84 b5       	in	r24, 0x24	; 36
  92:	83 60       	ori	r24, 0x03	; 3
  94:	84 bd       	out	0x24, r24	; 36
	TCCR0B |= (1 << CS01);// sets prescaler to 8 and starts PWM
  96:	85 b5       	in	r24, 0x25	; 37
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	85 bd       	out	0x25, r24	; 37
  9c:	08 95       	ret

0000009e <motorDirection>:
}

// sets the direction for the car
void motorDirection(uint8_t direction)
{
	if(direction) // if it's not 0 drive forward
  9e:	88 23       	and	r24, r24
  a0:	29 f0       	breq	.+10     	; 0xac <motorDirection+0xe>
	{
		PORTD |= (1<<RIGHT1);		//set D2 to high
  a2:	5a 9a       	sbi	0x0b, 2	; 11
		PORTD &= ~(1<<RIGHT2);		//set D4 to low 
  a4:	5c 98       	cbi	0x0b, 4	; 11
		PORTD |= (1<<LEFT1);		//set D7 to high 
  a6:	5f 9a       	sbi	0x0b, 7	; 11
		PORTB &= ~(1<<LEFT2);		//set B0 to low	
  a8:	28 98       	cbi	0x05, 0	; 5
  aa:	08 95       	ret
	}
	else{
		//drive backwards
		PORTD &= ~(1<<RIGHT1);	//set D2 to low 
  ac:	5a 98       	cbi	0x0b, 2	; 11
		PORTD |= (1<<RIGHT2);	//set D4 to high
  ae:	5c 9a       	sbi	0x0b, 4	; 11
		PORTD &= ~(1<<LEFT1);	//set D7 to low
  b0:	5f 98       	cbi	0x0b, 7	; 11
		PORTB |= (1<<LEFT2);	//set B0 to high
  b2:	28 9a       	sbi	0x05, 0	; 5
  b4:	08 95       	ret

000000b6 <initButton>:
	}
}

// Initialize the Button on the Robot Car
void initButton(){
	DDRB &= ~(1<< PORTB4);	// set PORTB pin4 as an input
  b6:	24 98       	cbi	0x04, 4	; 4
	PORTB |= 1<< PORTB4;	// default state is high
  b8:	2c 9a       	sbi	0x05, 4	; 5
  ba:	08 95       	ret

000000bc <main>:
}

int main(void)
{
	initButton();	//initialize Button
  bc:	0e 94 5b 00 	call	0xb6	; 0xb6 <initButton>
	initPWM();		//initialize PWM
  c0:	0e 94 40 00 	call	0x80	; 0x80 <initPWM>
	while (1) 
    {
			while((PINB & (1<<PINB4))); // wait till Button pressed and PINB4 is grounded, then leave the while and move on to the next step
			motorDirection(1); //direction forwards
			OCR0A=128;	// right motor power
  c4:	c0 e8       	ldi	r28, 0x80	; 128
{
	initButton();	//initialize Button
	initPWM();		//initialize PWM
	while (1) 
    {
			while((PINB & (1<<PINB4))); // wait till Button pressed and PINB4 is grounded, then leave the while and move on to the next step
  c6:	1c 99       	sbic	0x03, 4	; 3
  c8:	fe cf       	rjmp	.-4      	; 0xc6 <main+0xa>
			motorDirection(1); //direction forwards
  ca:	81 e0       	ldi	r24, 0x01	; 1
  cc:	0e 94 4f 00 	call	0x9e	; 0x9e <motorDirection>
			OCR0A=128;	// right motor power
  d0:	c7 bd       	out	0x27, r28	; 39
			OCR0B=128; // left motor power
  d2:	c8 bd       	out	0x28, r28	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  d4:	2f ef       	ldi	r18, 0xFF	; 255
  d6:	87 ea       	ldi	r24, 0xA7	; 167
  d8:	91 e6       	ldi	r25, 0x61	; 97
  da:	21 50       	subi	r18, 0x01	; 1
  dc:	80 40       	sbci	r24, 0x00	; 0
  de:	90 40       	sbci	r25, 0x00	; 0
  e0:	e1 f7       	brne	.-8      	; 0xda <main+0x1e>
  e2:	00 c0       	rjmp	.+0      	; 0xe4 <main+0x28>
  e4:	00 00       	nop
  e6:	ef cf       	rjmp	.-34     	; 0xc6 <main+0xa>

000000e8 <_exit>:
  e8:	f8 94       	cli

000000ea <__stop_program>:
  ea:	ff cf       	rjmp	.-2      	; 0xea <__stop_program>
