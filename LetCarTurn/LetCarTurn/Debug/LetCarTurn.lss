
LetCarTurn.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  0000016c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000118  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016c  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000050  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000831  00000000  00000000  0000022c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006da  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000003b3  00000000  00000000  00001137  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000084  00000000  00000000  000014ec  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000003d9  00000000  00000000  00001570  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  00001949  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000040  00000000  00000000  000019d9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   8:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
   c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  10:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  14:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  18:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  1c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  20:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  24:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  28:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  2c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  30:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  34:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  38:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  3c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  40:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  44:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  48:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  4c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  50:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  54:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  58:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  5c:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  60:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>
  64:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 7d 00 	call	0xfa	; 0xfa <main>
  78:	0c 94 8a 00 	jmp	0x114	; 0x114 <_exit>

0000007c <__bad_interrupt>:
  7c:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000080 <initPWM>:
	}
	else{
	PORTD &= ~(1<<RIGHT1);	//set D2 to low LEft CTr 1
	PORTD |= (1<<RIGHT2);		//set D4 to high LEft CTr 2
	PORTD &= ~(1<<LEFT1);		//set D7 to high Right CTr 1
	PORTB |= (1<<LEFT2);	//set B0 to low		Right CTr 2
  80:	55 9a       	sbi	0x0a, 5	; 10
  82:	56 9a       	sbi	0x0a, 6	; 10
  84:	84 b5       	in	r24, 0x24	; 36
  86:	80 68       	ori	r24, 0x80	; 128
  88:	84 bd       	out	0x24, r24	; 36
  8a:	84 b5       	in	r24, 0x24	; 36
  8c:	80 62       	ori	r24, 0x20	; 32
  8e:	84 bd       	out	0x24, r24	; 36
  90:	84 b5       	in	r24, 0x24	; 36
  92:	83 60       	ori	r24, 0x03	; 3
  94:	84 bd       	out	0x24, r24	; 36
  96:	85 b5       	in	r24, 0x25	; 37
  98:	82 60       	ori	r24, 0x02	; 2
  9a:	85 bd       	out	0x25, r24	; 37
  9c:	08 95       	ret

0000009e <initButton>:
	}
}

void initButton(){
	DDRB &= ~(1<< PORTB4);
  9e:	24 98       	cbi	0x04, 4	; 4
	PORTB |= 1<< PORTB4; // default state is high
  a0:	2c 9a       	sbi	0x05, 4	; 5
  a2:	08 95       	ret

000000a4 <brake>:
	_delay_ms(600);
	brake();
}

void brake(){
	PORTD |= (1<<PORTD4);	//set D4 to low
  a4:	5c 9a       	sbi	0x0b, 4	; 11
	PORTD |= (1<<PORTD2);	//set D2 to high
  a6:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD |= (1<<PORTD7);	//set D7 to low
  a8:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB |= (1<<PORTB0);	//set B0 to high
  aa:	28 9a       	sbi	0x05, 0	; 5
  ac:	08 95       	ret

000000ae <turnRight90>:

void turnRight90()
{
	
	// right forwards
	PORTD |= (1<<RIGHT1);	//set D2 to low LEft CTr 1
  ae:	5a 9a       	sbi	0x0b, 2	; 11
	PORTD &= ~(1<<RIGHT2);		//set D4 to high LEft CTr 2
  b0:	5c 98       	cbi	0x0b, 4	; 11
	//left backwards
	PORTD &= ~(1<<LEFT1);		//set D7 to low
  b2:	5f 98       	cbi	0x0b, 7	; 11
	PORTB |= (1<<LEFT2);		//set B0 to high
  b4:	28 9a       	sbi	0x05, 0	; 5
	
	OCR0A=128;	// right motor power
  b6:	80 e8       	ldi	r24, 0x80	; 128
  b8:	87 bd       	out	0x27, r24	; 39
	OCR0B=128; // left motor power
  ba:	88 bd       	out	0x28, r24	; 40
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  bc:	2f ef       	ldi	r18, 0xFF	; 255
  be:	8b e4       	ldi	r24, 0x4B	; 75
  c0:	9d e1       	ldi	r25, 0x1D	; 29
  c2:	21 50       	subi	r18, 0x01	; 1
  c4:	80 40       	sbci	r24, 0x00	; 0
  c6:	90 40       	sbci	r25, 0x00	; 0
  c8:	e1 f7       	brne	.-8      	; 0xc2 <turnRight90+0x14>
  ca:	00 c0       	rjmp	.+0      	; 0xcc <turnRight90+0x1e>
  cc:	00 00       	nop
	_delay_ms(600);
	brake();
  ce:	0e 94 52 00 	call	0xa4	; 0xa4 <brake>
  d2:	08 95       	ret

000000d4 <turnLeft90>:
}

void turnLeft90()
{
	// Right backwards
	PORTD &= ~(1<<RIGHT1);	//set D2 to low LEft CTr 1
  d4:	5a 98       	cbi	0x0b, 2	; 11
	PORTD |= (1<<RIGHT2);		//set D4 to high LEft CTr 2
  d6:	5c 9a       	sbi	0x0b, 4	; 11
	// Left forwards
	PORTD |= (1<<LEFT1);		//set D7 to high Right CTr 1
  d8:	5f 9a       	sbi	0x0b, 7	; 11
	PORTB &= ~(1<<LEFT2);	//set B0 to low		Right CTr 2
  da:	28 98       	cbi	0x05, 0	; 5
	
	OCR0A=128;	// right motor power
  dc:	80 e8       	ldi	r24, 0x80	; 128
  de:	87 bd       	out	0x27, r24	; 39
	OCR0B=128; // left motor power
  e0:	88 bd       	out	0x28, r24	; 40
  e2:	2f ef       	ldi	r18, 0xFF	; 255
  e4:	8b e4       	ldi	r24, 0x4B	; 75
  e6:	9d e1       	ldi	r25, 0x1D	; 29
  e8:	21 50       	subi	r18, 0x01	; 1
  ea:	80 40       	sbci	r24, 0x00	; 0
  ec:	90 40       	sbci	r25, 0x00	; 0
  ee:	e1 f7       	brne	.-8      	; 0xe8 <turnLeft90+0x14>
  f0:	00 c0       	rjmp	.+0      	; 0xf2 <turnLeft90+0x1e>
  f2:	00 00       	nop
	_delay_ms(600);
	brake();
  f4:	0e 94 52 00 	call	0xa4	; 0xa4 <brake>
  f8:	08 95       	ret

000000fa <main>:
	PORTB |= (1<<PORTB0);	//set B0 to high
}

int main(void)
{
	initButton();
  fa:	0e 94 4f 00 	call	0x9e	; 0x9e <initButton>
	initPWM();
  fe:	0e 94 40 00 	call	0x80	; 0x80 <initPWM>
	
	while (1) 
    {
			while((PINB & (1<<PINB4))); // wait till Button pressed and PINB4 is grounded, then leave the while and move on to the next step
 102:	1c 99       	sbic	0x03, 4	; 3
 104:	fe cf       	rjmp	.-4      	; 0x102 <main+0x8>
			turnRight90();
 106:	0e 94 57 00 	call	0xae	; 0xae <turnRight90>
			while((PINB & (1<<PINB4)));
 10a:	1c 99       	sbic	0x03, 4	; 3
 10c:	fe cf       	rjmp	.-4      	; 0x10a <main+0x10>
			turnLeft90();
 10e:	0e 94 6a 00 	call	0xd4	; 0xd4 <turnLeft90>
// 			PORTD |= (1<<PORTD4);	//set D4 to low
// 			PORTD |= (1<<PORTD2);	//set D2 to high
// 			PORTD |= (1<<PORTD7);	//set D7 to low
// 			PORTB |= (1<<PORTB0);	//set B0 to high
// 			_delay_ms(1000); 
    }
 112:	f7 cf       	rjmp	.-18     	; 0x102 <main+0x8>

00000114 <_exit>:
 114:	f8 94       	cli

00000116 <__stop_program>:
 116:	ff cf       	rjmp	.-2      	; 0x116 <__stop_program>
